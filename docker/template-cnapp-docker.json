{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "Cloudformation script to deploy DockerMaster and DockerWorker instances",

	"Metadata": {
		"AWS::CloudFormation::Interface": {
			"Stack": {
				"Value": "3"
			},
			"VersionDate": {
				"Value": "20160510"
			},
			"Identifier": {
				"Value": "template-cnapp-docker"
			},
			"Input": {
				"Description": "VPC, SubnetIDs, S3 bucket names, CIDR blocks, KeyNames, AMIs, DB name and password"
			},
			"Output": {
				"Description": "Outputs ID of all deployed resources"
			}
		}
	},

	"Parameters": {
		"pEnvironment": {
			"Description": "Environment type (development, test, or production)",
			"Type": "String",
			"Default": "development"
		},
		"pAppStackName": {
			"Description": "AppStack Name (for example cnprod)",
			"Type": "String"
		},
		"pFriendlyName": {
			"Description": "Friendly name for this stack",
			"Type": "String",
			"Default": ""
		},
		"pProductionVPC": {
			"Description": "Production VPC",
			"Type": "AWS::EC2::VPC::Id"
		},
		"pSubnetA": {
			"Description": "Subnet A",
			"Type": "AWS::EC2::Subnet::Id"
		},
		"pSubnetB": {
			"Description": "Subnet B",
			"Type": "AWS::EC2::Subnet::Id"
		},
		"pSubnetC": {
			"Description": "Subnet C",
			"Type": "AWS::EC2::Subnet::Id"
		},
		"pRegionAZ1Name": {
			"Description": "First AZ",
			"Type": "AWS::EC2::AvailabilityZone::Name"
		},
		"pRegionAZ2Name": {
			"Description": "Second AZ",
			"Type": "AWS::EC2::AvailabilityZone::Name"
		},
		"pRegionAZ3Name": {
			"Description": "Third AZ",
			"Type": "AWS::EC2::AvailabilityZone::Name"
		},
		"pDomainName": {
			"Description": "Domain name where resources will deploy",
			"Type": "String",
			"Default": "us-east-1.compute.internal"
		},
		"pDBTypeKey": {
			"Description": "Database type key (PROD or TRAIN)",
			"Type": "String",
			"Default": "PROD",
			"AllowedValues": ["PROD", "TRAIN"]
		},
		"pEC2KeyPair": {
			"Description": "Key Name for Instance",
			"Type": "String",
			"Default": ""
		},
		"pLinuxAMI": {
			"Description": "Which Linux AMI do you want to use, default ",
			"Type": "String",
			"Default": "none"
		},
		"pInstanceIAMProfile": {
			"Description": "The IAM profile to assign to created EC2 instances",
			"Type": "String",
			"Default": ""
		},
		"pInstanceIAMRole": {
			"Description": "The IAM role to assign to created EC2 instances",
			"Type": "String",
			"Default": ""
		},
		"pAGListener": {
			"Description": "AG Listener for PRD instances",
			"Type": "String",
			"Default": ""
		},
		"pProdDBName": {
			"Description": "DB Name to Connect to for PRD",
			"Type": "String",
			"Default": ""
		},
		"pTrainDBName":{
            "Description":"Enter the name of the CASHNet training database",
            "Type":"String",
            "Default":"cashnet_train"
        },
		"pDBAppUser": {
			"Description": "DB User ID for PRD connections",
			"Type": "String",
			"Default": ""
		},
		"pDBAppPassword": {
			"Description": "DB User password for PRD connections",
			"Type": "String",
			"Default": ""
		},
		"pDockerWorkerMinInstances": {
			"Description": "Minimum number of instances for DockerWorker servers",
			"Type": "Number"
		},
		"pDockerWorkerMaxInstances": {
			"Description": "Maximum number of instances for DockerWorker servers",
			"Type": "Number"
		},
		"pDockerWorkerInstanceType": {
			"Description": "Instance type: (t2.micro, t2.medium, etc)",
			"Type": "String",
			"Default": "t2.medium"
		},
		"pSGcndotnetcode": {
			"Description": "Security Group for CNdotNetCode",
			"Type": "String"
		},
		"pSGwebceELB": {
			"Description": "ALB listener output for WebCE ELB SG",
			"Type": "String"
		},
		"pALBwebceListenerHttp": {
			"Description": "ALB listener output for HTTP on WebCE",
			"Type": "String"
		},
		"pAnsibleIP": {
			"Description": "Private IP Address of the Ansible Server",
			"Type": "String"
		},
		"pEnvironmentType": {
			"Description": "The environment type PROD or Non-Prod",
			"Type": "String",
			"AllowedValues":[  "PROD","Non-Prod" ]
		},
		"pDBTypeKey": {
			"Description": "The DB Type- PROD or TRAIN",
			"Type": "String",
			"AllowedValues":[  "PROD","TRAIN" ]
		},
		"pKongPGDatabaseG" :{
            "Description":"Postgres database used for this docker Enviornment",
            "Type":"String"
			},
		"pKongPGDatabaseI" :{
            "Description":"Postgres database used for this docker Enviornment",
            "Type":"String"
			},
		"pKongPGPassword":{
            "Description":"Postgres database password for this docker Enviornment",
            "Type":"String"
			},
		"pKongPGUser":{
            "Description":"Postgres database user for this docker Enviornment",
            "Type":"String"
        },
				"pWebAppUser":{
						"Description":"Pre-Existing AD User for Web App Pools as DOMAIN\\user",
						"Type":"String",
						"MinLength":3,
						"MaxLength":28
				},
				"pWebAppPassword":{
						"Description":"Mixed alphanumeric and must be between 8 and 28 characters and contain at least one capital letter",
						"NoEcho":true,
						"Type":"String",
						"MinLength":8,
						"MaxLength":28
				}
	},

	"Mappings":{
        "DockerEnvironmentTypeMap":{
			"PROD": {
				"EnvironmentType": "Production",
				"LoggingLevel" : "Error"
			},
            "Non-Prod": {
				"EnvironmentType": "Staging",
				"LoggingLevel" : "Informational"
			}
        },

		"DockerEnvironmentMap": {
			"PROD": {
				"PROD": "prod",
				"TRAIN": "uat"
				},

			"Non-Prod" : {
				"TRAIN": "qa",
				"PROD": "qa"
				}
		}
	},

	"Conditions" : {
		"cDBTypeKey":{ "Fn::Equals":[ { "Ref":"pDBTypeKey" }, "PROD" ] }
		},


	"Resources": {

		"rAutoScalingGroupDockerMaster": {
			"Type": "AWS::AutoScaling::AutoScalingGroup",
			"Properties": {
				"AvailabilityZones": [
					{"Ref": "pRegionAZ1Name" },
					{"Ref": "pRegionAZ2Name" },
					{"Ref": "pRegionAZ3Name" }
					],
				"VPCZoneIdentifier": [
					{"Ref": "pSubnetA"},
					{"Ref": "pSubnetB"},
					{"Ref": "pSubnetC"}
					],
				"LaunchConfigurationName":
					{"Ref": "rAutoScalingConfigDockerMaster"},
				"DesiredCapacity": "3",
				"MinSize": "3",
				"MaxSize": "6",
				"TerminationPolicies": ["OldestInstance"],

				"HealthCheckType": "EC2",
				"HealthCheckGracePeriod": "1800",
				"NotificationConfigurations": [
					{"TopicARN": {"Fn::ImportValue": {"Fn::Sub": "${pEnvironment}:SecurityAlarmTopic"} },
					"NotificationTypes": ["autoscaling:EC2_INSTANCE_LAUNCH", "autoscaling:EC2_INSTANCE_LAUNCH_ERROR", "autoscaling:EC2_INSTANCE_TERMINATE", "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"]
					}
					],
				"Tags": [
					{"Key": "Name",	"Value": { "Fn::Join": [" ", ["DockerMaster", { "Ref": "pFriendlyName" } ]]}, "PropagateAtLaunch": "true" },
					{"Key": "Environment",	"Value": {"Ref": "pEnvironment"},	"PropagateAtLaunch": "true" },
					{ "Key": "Role", "Value": "DockerMaster", "PropagateAtLaunch": "true" },
					{ "Key": "AppStack", "Value": { "Ref": "pAppStackName" }, "PropagateAtLaunch": "true"}
					]
			},
			"DependsOn": ["rAutoScalingConfigDockerMaster"]
		},

		"rAutoScalingConfigDockerMaster": {
			"Type": "AWS::AutoScaling::LaunchConfiguration",
			"Metadata": {
				"AWS::CloudFormation::Authentication": {
					"S3AccessCreds": {
						"type": "S3",
						"roleName": {
							"Ref": "pInstanceIAMRole"
						},
						"buckets": ["cashnet-configfiles", "cashnet-software"]
					}
				},
				"AWS::CloudFormation::Init": {
					"config": {
						"packages": {
							"yum": {
								"telnet": []
							}
						},
						"files": {

							"/etc/cfn/cfn-hup.conf": {
								"content": {
									"Fn::Join": ["", ["[main]\n", "stack=",	{ "Ref": "AWS::StackId" }, "\n", "region=", {"Ref": "AWS::Region"	}, "\n"]]
								}
							},

							"/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
								"content": {
									"Fn::Join": ["", ["[cfn-auto-reloader-hook]\n", "triggers=post.update\n", "path=Resources.rAutoScalingConfigDockerMaster.Metadata.AWS::CloudFormation::Init\n", "action=cfn-init.exe -v -s ", {
												"Ref": "AWS::StackId"
											}, " -r rAutoScalingConfigTomcat", " --region ", {
												"Ref": "AWS::Region"
											}, "\n"]]
								}
							},

							"/install/splunkforwarder.rpm": {
								"source": "https://cashnet-software.s3.amazonaws.com/splunk/splunkforwarder-6.5.1-f74036626f0c-linux-2.6-x86_64.rpm",
								"mode": "000700",
								"owner": "root",
								"group": "root"
							},

							"/install/al-agent-LATEST-1.x86_64.rpm": {
								"source": "https://cashnet-software.s3.amazonaws.com/alertlogic/al-agent-LATEST-1.x86_64.rpm"
							},

							"/install/dsa_install.sh": {
								"content": {
									"Fn::Join": ["", ["#!/usr/bin/env bash \n", "wget https://", {
												"Fn::ImportValue": {
													"Fn::Sub": "${pEnvironment}:ELBDeepSec"
												}
											}, ":443/software/agent/amzn1/x86_64/ -O /tmp/agent.rpm --no-check-certificate --quiet \n", "rpm -ihv /tmp/agent.rpm \n", "sleep 15 \n", "/opt/ds_agent/dsa_control -r \n", "/opt/ds_agent/dsa_control -a dsm://", {
												"Fn::ImportValue": {
													"Fn::Sub": "${pEnvironment}:ELBDeepSec"
												}
											}, ":4120/ \n"]]
								},
								"mode": "000700",
								"owner": "root",
								"group": "root"
							},

							"/install/AWS-PCI.sh": {
								"source": "https://s3.amazonaws.com/cashnet-configfiles/linux-hardening/AWS-PCI.sh",
								"mode": "000700",
								"owner": "root",
								"group": "root",
                "authentication" : "S3AccessCreds"
							},

							"/install/audit_rules.tgz": {
								"source": "https://cashnet-configfiles.s3.amazonaws.com/linux-hardening/audit_rules.tgz",
								"mode": "000600",
								"owner": "root",
								"group": "root"
							},

							"/install/cashnetg/.env": {
								"content": {
									"Fn::Join": ["", [
										"API_MIN_LOGGING=",
										{ "Fn::FindInMap" : [
											"DockerEnvironmentTypeMap",
											{ "Ref" : "pEnvironmentType" },
											"LoggingLevel"
										] },
										"\n",
										"API_PORT=9001\n",
										"AWS_SERVICE_URL=https://sqs.", { "Ref": "AWS::Region" }, ".amazonaws.com\n",
										"AWS_SQS_NAME=", { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SQSemailqueue" } }, "\n",
										"BASE_HREF=/cashnetg/static\n",

										"CONNECTIONSTRING_CN_DB=Max Pool Size=5000; Connection Lifetime=450; Packet Size=4096; server=tcp:",{"Ref": "pAGListener"}, ".", {"Ref": "pDomainName"},
										",1433; user id=", {"Ref": "pDBAppUser"}, "; password=", {"Ref": "pDBAppPassword"},
										"; encrypt=yes; TrustServerCertificate=true; Database=", { "Fn::If": [ "cDBTypeKey", { "Ref": "pProdDBName" }, { "Ref": "pTrainDBName"} ] },"\n",

										"CONNECTIONSTRING_CN_REPORTING_DB=Max Pool Size=5000; Connection Lifetime=450;Packet Size=4096; server=SQLPR2.", {"Ref": "pDomainName"}, "; user id=" ,
										{ "Ref": "pDBAppUser" }, "; password=", { "Ref": "pDBAppPassword" },
										"; encrypt=yes; TrustServerCertificate=true; Database=", { "Fn::If": [ "cDBTypeKey", { "Ref": "pProdDBName" }, { "Ref": "pTrainDBName"} ] },"\n" ,

										"ENVIRONMENT=",
										{ "Fn::FindInMap" : [
											"DockerEnvironmentMap",
											{ "Ref" : "pEnvironmentType" },
											{"Ref" :"pDBTypeKey"}
										] },
										"\n",
										"ENVIRONMENT_TYPE=",
										{ "Fn::FindInMap" : [
											"DockerEnvironmentTypeMap",
											{ "Ref" : "pEnvironmentType" },
											"EnvironmentType"
										] },
										"\n",
										"KONG_ADMIN_LISTEN=0.0.0.0:8001\n",
										"KONG_DATABASE=postgres\n",
										"KONG_LOG_LEVEL=notice\n",
										"KONG_PG_HOST=",
											{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:PostgresEndpoint" } }, "\n",
										"KONG_PG_DATABASE=",
											{"Ref":"pKongPGDatabaseG"}, "\n",
										"KONG_PG_USER=",
											{"Ref":"pKongPGUser"}, "\n",
										"KONG_PG_PASSWORD=",
											{"Ref":"pKongPGPassword"}, "\n",
										"KONG_PROXY_ERROR_LOG=/dev/stdout\n",
										"KONG_PROXY_LISTEN=0.0.0.0:8000\n",
										"KONG_PROXY_LISTEN_SSL=0.0.0.0:8443\n",
										"STATIC_PORT=8001\n",
										"STATIC_IMAGE=cn-images-",
											{"Ref":"pEnvironment"}, "-",
									  	{"Ref":"pAppStackName"}, "\n",
										"EBILL_REPORT_LOCAL=",
											{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:${pAppStackName}:WebCEURL" } }, "\n"
										]]
								}
							},

							"/install/cashneti/.env": {
								"content": {
									"Fn::Join": ["", [
										"API_MIN_LOGGING=",
										{ "Fn::FindInMap" : [
											"DockerEnvironmentTypeMap",
											{ "Ref" : "pEnvironmentType" },
											"LoggingLevel"
										] },
										"\n",
										"API_PORT=9001\n",
										"AWS_SERVICE_URL=https://sqs.", { "Ref": "AWS::Region" }, ".amazonaws.com\n",
										"AWS_SQS_NAME=", { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SQSemailqueue" } }, "\n",
										"BASE_HREF=/cashneti/static\n",

										"CONNECTIONSTRING_CN_DB=Max Pool Size=5000; Connection Lifetime=450; Packet Size=4096; server=tcp:",{"Ref": "pAGListener"}, ".", {"Ref": "pDomainName"},
										",1433; user id=", {"Ref": "pDBAppUser"}, "; password=", {"Ref": "pDBAppPassword"},
										"; encrypt=yes; TrustServerCertificate=true; Database=", { "Fn::If": [ "cDBTypeKey", { "Ref": "pProdDBName" }, { "Ref": "pTrainDBName"} ] },"\n",

										"CONNECTIONSTRING_CN_REPORTING_DB=Max Pool Size=5000; Connection Lifetime=450;Packet Size=4096; server=SQLPR2.", {"Ref": "pDomainName"}, "; user id=" ,
										{ "Ref": "pDBAppUser" }, "; password=", { "Ref": "pDBAppPassword" },
										"; encrypt=yes; TrustServerCertificate=true; Database=", { "Fn::If": [ "cDBTypeKey", { "Ref": "pProdDBName" }, { "Ref": "pTrainDBName"} ] },"\n" ,

										"ENVIRONMENT=",
										{ "Fn::FindInMap" : [
											"DockerEnvironmentMap",
											{ "Ref" : "pEnvironmentType" },
											{"Ref" :"pDBTypeKey"}
										] },
										"\n",
										"ENVIRONMENT_TYPE=",
										{ "Fn::FindInMap" : [
											"DockerEnvironmentTypeMap",
											{ "Ref" : "pEnvironmentType" },
											"EnvironmentType"
										] },
										"\n",
										"KONG_ADMIN_LISTEN=0.0.0.0:8001\n",
										"KONG_DATABASE=postgres\n",
										"KONG_LOG_LEVEL=notice\n",
										"KONG_PG_DATABASE=",
											{"Ref":"pKongPGDatabaseI"}, "\n",
										"KONG_PG_HOST=",
											{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:PostgresEndpoint" } }, "\n",
										"KONG_PG_PASSWORD=",
											{"Ref":"pKongPGPassword"}, "\n",
										"KONG_PG_USER=",
											{"Ref":"pKongPGUser"}, "\n",
										"KONG_PROXY_ERROR_LOG=/dev/stdout\n",
										"KONG_PROXY_LISTEN=0.0.0.0:8000\n",
										"KONG_PROXY_LISTEN_SSL=0.0.0.0:8443\n",
										"STATIC_PORT=8001\n",
										"STATIC_IMAGE=cn-images-",
											{"Ref":"pEnvironment"}, "-",
											{"Ref":"pAppStackName"}, "\n",
										"EBILL_REPORT_LOCAL=",
											{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:${pAppStackName}:WebCEURL" } }, "\n"
									]]
								}
							},

							"/install/docker-master-install.sh": {
								"source": "https://cashnet-configfiles.s3.amazonaws.com/docker/docker-master-install_v3.sh",
								"mode": "000700",
								"owner": "root",
								"group": "root"
							},

							"/etc/docker/daemon.json" : {
								"content": {
									"Fn::Join": ["", [
										"{\n",
										"\"log-driver\": \"syslog\",\n",
										"\"log-opts\":\n",
										"{\"syslog-address\": \"udp://logs:514\"}\n",
										"}\n"
										]]
									}
								}
						},

						"commands": {
							"05-harden-linux": {
								"command": {
									"Fn::Join": ["", ["/install/AWS-PCI.sh -u ", {
												"Fn::ImportValue": {
													"Fn::Sub": "${pEnvironment}:DomainJoinUser"
												}
											}, " -p ", { 	"Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:DomainJoinPassword" } },
											" -r DockerMaster", " -s ", { "Ref": "pAppStackName"
											}
										]]
								},
								"waitAfterCompletion": "0"
							},
							"08-install-deep-security": {
								"command": "/install/dsa_install.sh",
								"waitAfterCompletion": "0"
							},

							"20-docker-master-install": {
								"command": { "Fn::Sub": "/install/docker-master-install.sh -a ${pAnsibleIP} -e ${pEnvironment} -f ${pFriendlyName} -r ${AWS::Region} -s ${pAppStackName}" },
								"waitAfterCompletion": "0"
							}
						}
					}
				}
			},

			"Properties": {
				"AssociatePublicIpAddress": "false",
				"BlockDeviceMappings": [{
						"DeviceName": "/dev/xvda",
						"Ebs": {
							"VolumeSize": "16"
						}
					}
				],
				"IamInstanceProfile": {
					"Ref": "pInstanceIAMProfile"
				},
				"ImageId": {
					"Ref": "pLinuxAMI"
				},
				"InstanceType": "t2.medium",
				"KeyName": {
					"Ref": "pEC2KeyPair"
				},
				"SecurityGroups": [{
						"Fn::ImportValue": {
							"Fn::Sub": "${pEnvironment}:SGfileshareaccess"
						}
					}, {
						"Fn::ImportValue": {
							"Fn::Sub": "${pEnvironment}:SG000"
						}
					}, {
						"Fn::ImportValue": {
							"Fn::Sub": "${pEnvironment}:SGdomainmember"
						}
					}, {
						"Ref": "rSGdockermaster"
					}
				],
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": ["", ["#!/bin/bash\n", "yum update -y aws-cfn-bootstrap\n", "/opt/aws/bin/cfn-init -v ", "         --stack ", {
									"Ref": "AWS::StackName"
								}, "         --resource rAutoScalingConfigDockerMaster ", "         --region ", {
									"Ref": "AWS::Region"
								}, "\n"]]
					}
				}
			}
		},

		"rSGdockermaster": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Security group for dockermaster servers",
				"VpcId": {
					"Ref": "pProductionVPC"
				},
				"SecurityGroupIngress": [
					{ "IpProtocol": "tcp", "FromPort": "2377", "ToPort": "2377", "CidrIp": "0.0.0.0/0" }
				],
				"SecurityGroupEgress": [
					{ "IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": "104.192.143.0/25", "Description": "bitbucket.org" },
					{ "IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": "18.205.93.0/25", "Description": "bitbucket.org" },
					{ "IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": "13.52.5.0/25", "Description": "bitbucket.org" }
				],
				"Tags": [{
						"Key": "Name",
						"Value": {
							"Fn::Sub": "${pFriendlyName} SGdockermaster"
						}
					}, {
						"Key": "AppStack",
						"Value": {
							"Ref": "pAppStackName"
						}
					}, {
						"Key": "Environment",
						"Value": {
							"Ref": "pEnvironment"
						}
					}
				]
			}
		},

		"rSGdockermasterT7946e": {
			"Type": "AWS::EC2::SecurityGroupEgress",
			"Properties": {
				"FromPort": 7946,
				"ToPort": 7946,
				"GroupId": {
					"Ref": "rSGdockermaster"
				},
				"IpProtocol": "tcp",
				"DestinationSecurityGroupId": {
					"Ref": "rSGdockerworker"
				}
			}
		},

		"rSGdockermasterT7946i": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"FromPort": 7946,
				"ToPort": 7946,
				"GroupId": {
					"Ref": "rSGdockermaster"
				},
				"IpProtocol": "tcp",
				"SourceSecurityGroupId": {
					"Ref": "rSGdockerworker"
				}
			}
		},

		"rSGdockermasterU7946e": {
			"Type": "AWS::EC2::SecurityGroupEgress",
			"Properties": {
				"FromPort": 7946,
				"ToPort": 7946,
				"GroupId": {
					"Ref": "rSGdockermaster"
				},
				"IpProtocol": "udp",
				"DestinationSecurityGroupId": {
					"Ref": "rSGdockerworker"
				}
			}
		},

		"rSGdockermasterU7946i": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"FromPort": 7946,
				"ToPort": 7946,
				"GroupId": {
					"Ref": "rSGdockermaster"
				},
				"IpProtocol": "udp",
				"SourceSecurityGroupId": {
					"Ref": "rSGdockerworker"
				}
			}
		},

		"rSGdockermasterU4789e": {
			"Type": "AWS::EC2::SecurityGroupEgress",
			"Properties": {
				"FromPort": 4789,
				"ToPort": 4789,
				"GroupId": {
					"Ref": "rSGdockermaster"
				},
				"IpProtocol": "udp",
				"DestinationSecurityGroupId": {
					"Ref": "rSGdockerworker"
				}
			}
		},

		"rSGdockermasterU4789i": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"FromPort": 4789,
				"ToPort": 4789,
				"GroupId": {
					"Ref": "rSGdockermaster"
				},
				"IpProtocol": "udp",
				"SourceSecurityGroupId": {
					"Ref": "rSGdockerworker"
				}
			}
		},

		"rSGdockermasterT7946es": {
			"Type": "AWS::EC2::SecurityGroupEgress",
			"Properties": {
				"FromPort": 7946,
				"ToPort": 7946,
				"GroupId": {
					"Ref": "rSGdockermaster"
				},
				"IpProtocol": "tcp",
				"DestinationSecurityGroupId": {
					"Ref": "rSGdockermaster"
				}
			}
		},

		"rSGdockermasterT7946is": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"FromPort": 7946,
				"ToPort": 7946,
				"GroupId": {
					"Ref": "rSGdockermaster"
				},
				"IpProtocol": "tcp",
				"SourceSecurityGroupId": {
					"Ref": "rSGdockermaster"
				}
			}
		},

		"rSGdockermasterU7946es": {
			"Type": "AWS::EC2::SecurityGroupEgress",
			"Properties": {
				"FromPort": 7946,
				"ToPort": 7946,
				"GroupId": {
					"Ref": "rSGdockermaster"
				},
				"IpProtocol": "udp",
				"DestinationSecurityGroupId": {
					"Ref": "rSGdockermaster"
				}
			}
		},

		"rSGdockermasterU7946is": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"FromPort": 7946,
				"ToPort": 7946,
				"GroupId": {
					"Ref": "rSGdockermaster"
				},
				"IpProtocol": "udp",
				"SourceSecurityGroupId": {
					"Ref": "rSGdockermaster"
				}
			}
		},

		"rSGdockermasterU4789es": {
			"Type": "AWS::EC2::SecurityGroupEgress",
			"Properties": {
				"FromPort": 4789,
				"ToPort": 4789,
				"GroupId": {
					"Ref": "rSGdockermaster"
				},
				"IpProtocol": "udp",
				"DestinationSecurityGroupId": {
					"Ref": "rSGdockermaster"
				}
			}
		},

		"rSGdockermasterU4789is": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"FromPort": 4789,
				"ToPort": 4789,
				"GroupId": {
					"Ref": "rSGdockermaster"
				},
				"IpProtocol": "udp",
				"SourceSecurityGroupId": {
					"Ref": "rSGdockermaster"
				}
			}
		},

		"rSGdockermasterT2376e": {
			"Type": "AWS::EC2::SecurityGroupEgress",
			"Properties": {
				"FromPort": 2376,
				"ToPort": 2377,
				"GroupId": {
					"Ref": "rSGdockermaster"
				},
				"IpProtocol": "tcp",
				"DestinationSecurityGroupId": {
					"Ref": "rSGdockerworker"
				}
			}
		},

		"rSGdockermasterT2376i": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"FromPort": 2376,
				"ToPort": 2377,
				"GroupId": {
					"Ref": "rSGdockermaster"
				},
				"IpProtocol": "tcp",
				"SourceSecurityGroupId": {
					"Ref": "rSGdockerworker"
				}
			}
		},

		"rSGdockermasterT2376es": {
			"Type": "AWS::EC2::SecurityGroupEgress",
			"Properties": {
				"FromPort": 2376,
				"ToPort": 2377,
				"GroupId": {
					"Ref": "rSGdockermaster"
				},
				"IpProtocol": "tcp",
				"DestinationSecurityGroupId": {
					"Ref": "rSGdockermaster"
				}
			}
		},

		"rSGdockermasterT2376is": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"FromPort": 2376,
				"ToPort": 2377,
				"GroupId": {
					"Ref": "rSGdockermaster"
				},
				"IpProtocol": "tcp",
				"SourceSecurityGroupId": {
					"Ref": "rSGdockermaster"
				}
			}
		},

		"rSGdockermasterSGRedisE": {
			"Type": "AWS::EC2::SecurityGroupEgress",
			"Properties": {
				"FromPort": 6379,
				"ToPort": 6379,
				"GroupId": { "Ref": "rSGdockermaster" },
				"IpProtocol": "tcp",
				"DestinationSecurityGroupId": { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGredis" } }
			}
		},

		"rSGdockermasterSGRedisI": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"FromPort": 6379,
				"ToPort": 6379,
				"GroupId": { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGredis" } },
				"IpProtocol": "tcp",
				"SourceSecurityGroupId": { "Ref": "rSGdockermaster" }

			}
		},

		"rSGdockermasterSGPostgresE": {
			"Type": "AWS::EC2::SecurityGroupEgress",
			"Properties": {
				"FromPort": 5432,
				"ToPort": 5432,
				"GroupId": {"Ref": "rSGdockermaster"	},
				"IpProtocol": "tcp",
				"DestinationSecurityGroupId": { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGpostgres" } }
			}
		},

		"rSGdockermasterSGPostgresI": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"FromPort": 5432,
				"ToPort": 5432,
				"GroupId": { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGpostgres" } } ,
				"IpProtocol": "tcp",
				"SourceSecurityGroupId": { "Ref": "rSGdockermaster" }
			}
		},

		"rSGdockermasterAnsible22I": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"FromPort": 22,
				"ToPort": 22,
				"GroupId": { "Ref": "rSGdockermaster" },
                "IpProtocol": "tcp",
                "SourceSecurityGroupId": {"Fn::ImportValue": {"Fn::Sub": "${pEnvironment}:SGansible"} }
            }
        },



		"rCWAlarmHighCPUDockerMaster": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"EvaluationPeriods": "1",
				"Statistic": "Average",
				"Threshold": "60",
				"AlarmDescription": "Alarm if CPU too high or metric disappears indicating instance is down",
				"Period": "180",
				"AlarmActions": [{
						"Ref": "rAutoScalingUpDockerMaster"
					}
				],
				"Namespace": "AWS/EC2",
				"Dimensions": [{
						"Name": "AutoScalingGroupName",
						"Value": {
							"Ref": "rAutoScalingGroupDockerMaster"
						}
					}
				],
				"ComparisonOperator": "GreaterThanThreshold",
				"MetricName": "CPUUtilization"
			}
		},

		"rCWAlarmLowCPUDockerMaster": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"EvaluationPeriods": "1",
				"Statistic": "Average",
				"Threshold": "15",
				"AlarmDescription": "If CPU is too low, remove a dockermaster instance",
				"Period": "300",
				"AlarmActions": [{
						"Ref": "rAutoScalingDownDockerMaster"
					}
				],
				"Namespace": "AWS/EC2",
				"Dimensions": [{
						"Name": "AutoScalingGroupName",
						"Value": {
							"Ref": "rAutoScalingGroupDockerMaster"
						}
					}
				],
				"ComparisonOperator": "LessThanThreshold",
				"MetricName": "CPUUtilization"
			}
		},

		"rAutoScalingDownDockerMaster": {
			"Type": "AWS::AutoScaling::ScalingPolicy",
			"Properties": {
				"AdjustmentType": "ChangeInCapacity",
				"AutoScalingGroupName": {
					"Ref": "rAutoScalingGroupDockerMaster"
				},
				"Cooldown": "500",
				"ScalingAdjustment": "-1"
			}
		},

		"rAutoScalingUpDockerMaster": {
			"Type": "AWS::AutoScaling::ScalingPolicy",
			"Properties": {
				"AdjustmentType": "ChangeInCapacity",
				"AutoScalingGroupName": {
					"Ref": "rAutoScalingGroupDockerMaster"
				},
				"Cooldown": "500",
				"ScalingAdjustment": "1"
			}
		},


		"rAutoScalingGroupDockerWorker": {
			"Type": "AWS::AutoScaling::AutoScalingGroup",
			"DependsOn": ["rAutoScalingGroupDockerMaster"],
			"Properties": {
				"AvailabilityZones": [
					{ "Ref": "pRegionAZ1Name" },
					{ "Ref": "pRegionAZ2Name" 	}
				],
				"VPCZoneIdentifier": [
					{ "Ref": "pSubnetA" },
					{ "Ref": "pSubnetB" }
				],
				"LaunchConfigurationName": {
					"Ref": "rAutoScalingConfigDockerWorker"
				},
				"DesiredCapacity": {
					"Ref": "pDockerWorkerMinInstances"
				},
				"MinSize": {
					"Ref": "pDockerWorkerMinInstances"
				},
				"MaxSize": {
					"Ref": "pDockerWorkerMaxInstances"
				},
				"TargetGroupARNs": [
					{"Ref": "rALBwebceTargetBlueAPI"},
					{"Ref": "rALBwebceTargetGreenAPI"},
					{"Ref": "rALBwebceTargetBlueStatic"},
					{"Ref": "rALBwebceTargetGreenStatic"}
				],
				"TerminationPolicies": ["OldestInstance"],
				"HealthCheckType": "EC2",
				"HealthCheckGracePeriod": "1800",
				"NotificationConfigurations": [{
						"TopicARN": {
							"Fn::ImportValue": {
								"Fn::Sub": "${pEnvironment}:SecurityAlarmTopic"
							}
						},
						"NotificationTypes": ["autoscaling:EC2_INSTANCE_LAUNCH", "autoscaling:EC2_INSTANCE_LAUNCH_ERROR", "autoscaling:EC2_INSTANCE_TERMINATE", "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"]
					}
				],
				"Tags": [{
						"Key": "Name",
						"Value": {
							"Fn::Join": [" ", ["DockerWorker", {
										"Ref": "pFriendlyName"
									}
								]]
						},
						"PropagateAtLaunch": "true"
					}, {
						"Key": "Environment",
						"Value": {
							"Ref": "pEnvironment"
						},
						"PropagateAtLaunch": "true"
					}, {
						"Key": "Role",
						"Value": "DockerWorker",
						"PropagateAtLaunch": "true"
					}, {
						"Key": "AppStack",
						"Value": {
							"Ref": "pAppStackName"
						},
						"PropagateAtLaunch": "true"
					}
				]
			},
			"DependsOn": ["rAutoScalingConfigDockerWorker"]
		},

		"rAutoScalingConfigDockerWorker": {
			"Type": "AWS::AutoScaling::LaunchConfiguration",
			"Metadata": {

				"AWS::CloudFormation::Authentication": {
					"S3AccessCreds": {
						"type": "S3",
						"roleName": {
							"Ref": "pInstanceIAMRole"
						},
						"buckets": ["cashnet-configfiles", "cashnet-software"]
					}
				},

				"AWS::CloudFormation::Init": {
					"config": {
						"packages": {
							"yum": {
								"telnet": []
							}
						},

						"files": {
							"/etc/cfn/cfn-hup.conf": {
								"content": {
									"Fn::Join": ["", ["[main]\n", "stack=", {
												"Ref": "AWS::StackId"
											}, "\n", "region=", {
												"Ref": "AWS::Region"
											}, "\n"]]
								}
							},
							"/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
								"content": {
									"Fn::Join": ["", ["[cfn-auto-reloader-hook]\n", "triggers=post.update\n", "path=Resources.rAutoScalingConfigDockerWorker.Metadata.AWS::CloudFormation::Init\n", "action=cfn-init.exe -v -s ", {
												"Ref": "AWS::StackId"
											}, " -r rAutoScalingConfigTomcat", " --region ", {
												"Ref": "AWS::Region"
											}, "\n"]]
								}
							},
							"/install/splunkforwarder.rpm": {
								"source": "https://cashnet-software.s3.amazonaws.com/splunk/splunkforwarder-6.5.1-f74036626f0c-linux-2.6-x86_64.rpm",
								"mode": "000700",
								"owner": "root",
								"group": "root"
							},
							"/install/al-agent-LATEST-1.x86_64.rpm": {
								"source": "https://cashnet-software.s3.amazonaws.com/alertlogic/al-agent-LATEST-1.x86_64.rpm"
							},
							"/install/dsa_install.sh": {
								"content": {
									"Fn::Join": ["", ["#!/usr/bin/env bash \n", "wget https://", {
												"Fn::ImportValue": {
													"Fn::Sub": "${pEnvironment}:ELBDeepSec"
												}
											}, ":443/software/agent/amzn1/x86_64/ -O /tmp/agent.rpm --no-check-certificate --quiet \n", "rpm -ihv /tmp/agent.rpm \n", "sleep 15 \n", "/opt/ds_agent/dsa_control -r \n", "/opt/ds_agent/dsa_control -a dsm://", {
												"Fn::ImportValue": {
													"Fn::Sub": "${pEnvironment}:ELBDeepSec"
												}
											}, ":4120/ \n"]]
								},
								"mode": "000700",
								"owner": "root",
								"group": "root"
							},
							"/install/AWS-PCI.sh": {
								"source": "https://cashnet-configfiles.s3.amazonaws.com/linux-hardening/AWS-PCI.sh",
								"mode": "000700",
								"owner": "root",
								"group": "root"
							},
							"/install/audit_rules.tgz": {
								"source": "https://cashnet-configfiles.s3.amazonaws.com/linux-hardening/audit_rules.tgz",
								"mode": "000600",
								"owner": "root",
								"group": "root"
							},
							"/install/cashnetg/.env": {
								"content": {
									"Fn::Join": ["", [
										"API_MIN_LOGGING=",
										{ "Fn::FindInMap" : [
											"DockerEnvironmentTypeMap",
											{ "Ref" : "pEnvironmentType" },
											"LoggingLevel"
										] },
										"\n",
										"API_PORT=9001\n",
										"AWS_SERVICE_URL=https://sqs.", { "Ref": "AWS::Region" }, ".amazonaws.com\n",
										"AWS_SQS_NAME=", { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SQSemailqueue" } }, "\n",
										"BASE_HREF=/cashnetg/static\n",

										"CONNECTIONSTRING_CN_DB=Max Pool Size=5000; Connection Lifetime=450; Packet Size=4096; server=tcp:",{"Ref": "pAGListener"}, ".", {"Ref": "pDomainName"},
										",1433; user id=", {"Ref": "pDBAppUser"}, "; password=", {"Ref": "pDBAppPassword"},
										"; encrypt=yes; TrustServerCertificate=true; Database=", { "Fn::If": [ "cDBTypeKey", { "Ref": "pProdDBName" }, { "Ref": "pTrainDBName"} ] },"\n",

										"CONNECTIONSTRING_CN_REPORTING_DB=Max Pool Size=5000; Connection Lifetime=450;Packet Size=4096; server=SQLPR2.", {"Ref": "pDomainName"}, "; user id=" ,
										{ "Ref": "pDBAppUser" }, "; password=", { "Ref": "pDBAppPassword" },
										"; encrypt=yes; TrustServerCertificate=true; Database=", { "Fn::If": [ "cDBTypeKey", { "Ref": "pProdDBName" }, { "Ref": "pTrainDBName"} ] },"\n" ,

										"ENVIRONMENT=",
										{ "Fn::FindInMap" : [
											"DockerEnvironmentMap",
											{ "Ref" : "pEnvironmentType" },
											{"Ref" :"pDBTypeKey"}
										] },
										"\n",
										"ENVIRONMENT_TYPE=",
										{ "Fn::FindInMap" : [
											"DockerEnvironmentTypeMap",
											{ "Ref" : "pEnvironmentType" },
											"EnvironmentType"
										] },
										"\n",
										"KONG_ADMIN_LISTEN=0.0.0.0:8001\n",
										"KONG_DATABASE=postgres\n",
										"KONG_LOG_LEVEL=notice\n",
										"KONG_PG_DATABASE=",
											{"Ref":"pKongPGDatabaseG"}, "\n",
										"KONG_PG_HOST=",
											{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:PostgresEndpoint" } }, "\n",
										"KONG_PG_PASSWORD=",
											{"Ref":"pKongPGPassword"}, "\n",
										"KONG_PG_USER=",
											{"Ref":"pKongPGUser"}, "\n",
										"KONG_PROXY_ERROR_LOG=/dev/stdout\n",
										"KONG_PROXY_LISTEN=0.0.0.0:8000\n",
										"KONG_PROXY_LISTEN_SSL=0.0.0.0:8443\n",
										"STATIC_PORT=8001\n",
										"STATIC_IMAGE=cn-images-",
											{"Ref":"pEnvironment"},  "-",
									  	{"Ref":"pAppStackName"}, "\n",
										"EBILL_REPORT_LOCAL=",
											{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:${pAppStackName}:WebCEURL" } }, "\n"
								]]
								}
							},
							"/install/cashneti/.env": {
								"content": {
									"Fn::Join": ["", [
										"API_MIN_LOGGING=",
										{ "Fn::FindInMap" : [
											"DockerEnvironmentTypeMap",
											{ "Ref" : "pEnvironmentType" },
											"LoggingLevel"
										] },
										"\n",
										"API_PORT=9001\n",
										"AWS_SERVICE_URL=https://sqs.", { "Ref": "AWS::Region" }, ".amazonaws.com\n",
										"AWS_SQS_NAME=", { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SQSemailqueue" } }, "\n",
										"BASE_HREF=/cashneti/static\n",

										"CONNECTIONSTRING_CN_DB=Max Pool Size=5000; Connection Lifetime=450; Packet Size=4096; server=tcp:",{"Ref": "pAGListener"}, ".", {"Ref": "pDomainName"},
										",1433; user id=", {"Ref": "pDBAppUser"}, "; password=", {"Ref": "pDBAppPassword"},
										"; encrypt=yes; TrustServerCertificate=true; Database=", { "Fn::If": [ "cDBTypeKey", { "Ref": "pProdDBName" }, { "Ref": "pTrainDBName"} ] },"\n",

										"CONNECTIONSTRING_CN_REPORTING_DB=Max Pool Size=5000; Connection Lifetime=450;Packet Size=4096; server=SQLPR2.", {"Ref": "pDomainName"}, "; user id=" ,
										{ "Ref": "pDBAppUser" }, "; password=", { "Ref": "pDBAppPassword" },
										"; encrypt=yes; TrustServerCertificate=true; Database=", { "Fn::If": [ "cDBTypeKey", { "Ref": "pProdDBName" }, { "Ref": "pTrainDBName"} ] },"\n" ,

										"ENVIRONMENT=",
										{ "Fn::FindInMap" : [
											"DockerEnvironmentMap",
											{ "Ref" : "pEnvironmentType" },
											{"Ref" :"pDBTypeKey"}
										] },
										"\n",
										"ENVIRONMENT_TYPE=",
										{ "Fn::FindInMap" : [
											"DockerEnvironmentTypeMap",
											{ "Ref" : "pEnvironmentType" },
											"EnvironmentType"
										] },
										"\n",
										"KONG_ADMIN_LISTEN=0.0.0.0:8001\n",
										"KONG_DATABASE=postgres\n",
										"KONG_LOG_LEVEL=notice\n",
										"KONG_PG_HOST=",
											{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:PostgresEndpoint" } }, "\n",
										"KONG_PG_DATABASE=",
											{"Ref":"pKongPGDatabaseI"}, "\n",
										"KONG_PG_PASSWORD=",
											{"Ref":"pKongPGPassword"}, "\n",
										"KONG_PG_USER=",
											{"Ref":"pKongPGUser"}, "\n",
										"KONG_PROXY_ERROR_LOG=/dev/stdout\n",
										"KONG_PROXY_LISTEN=0.0.0.0:8000\n",
										"KONG_PROXY_LISTEN_SSL=0.0.0.0:8443\n",
										"STATIC_PORT=8001\n",
										"STATIC_IMAGE=cn-images-",
											 {"Ref":"pEnvironment"},  "-",
											{"Ref":"pAppStackName"}, "\n",
										"EBILL_REPORT_LOCAL=",
											{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:${pAppStackName}:WebCEURL" } }, "\n"
									]]
								}
							},
							"/install/docker-worker-install.sh": {
								"source": "https://cashnet-configfiles.s3.amazonaws.com/docker/docker-worker-install_v5.sh",
								"mode": "000700",
								"owner": "root",
								"group": "root"
							},

							"/etc/docker/daemon.json" : {
								"content": {
									"Fn::Join": ["", [
										"{\n",
										"\"log-driver\": \"syslog\",\n",
										"\"log-opts\":\n",
										"{\"syslog-address\": \"udp://logs:514\"}\n",
										"}\n"
										]]
									}
								},

						"/root/.cifs_cred_cnappuser": {
							"content": {
								"Fn::Join": ["", ["username=",
									{"Ref":"pWebAppUser"},
									"\n",
									"password=",
									{"Ref":"pWebAppPassword"},
									"\n"
									]],
									"mode": "000700",
									"owner": "root",
									"group": "root"
								}
							}
						},

						"commands": {
							"05-harden-linux": {
								"command": {
									"Fn::Join": ["", ["/install/AWS-PCI.sh -u ", {
												"Fn::ImportValue": {
													"Fn::Sub": "${pEnvironment}:DomainJoinUser"
												}
											}, " -p ", {
												"Fn::ImportValue": {
													"Fn::Sub": "${pEnvironment}:DomainJoinPassword"
												}
											}, " -r DockerWorker", " -s ", {
												"Ref": "pAppStackName"
											}
										]]
								},
								"waitAfterCompletion": "0"
							},
							"08-install-deep-security": {
								"command": "/install/dsa_install.sh",
								"waitAfterCompletion": "0"
							},
							"21-docker-worker-install": {
								"command": { "Fn::Sub": "/install/docker-worker-install.sh -a ${pAnsibleIP} -e ${pEnvironment} -f ${pFriendlyName} -r ${AWS::Region} -s ${pAppStackName}" },
								"waitAfterCompletion": "0"
							}
						}
					}
				}
			},

			"Properties": {
				"AssociatePublicIpAddress": "false",
				"BlockDeviceMappings": [{
						"DeviceName": "/dev/xvda",
						"Ebs": {
							"VolumeSize": "16"
						}
					}
				],
				"IamInstanceProfile": {
					"Ref": "pInstanceIAMProfile"
				},
				"ImageId": {
					"Ref": "pLinuxAMI"
				},
				"InstanceType": {
					"Ref": "pDockerWorkerInstanceType"
				},
				"KeyName": {
					"Ref": "pEC2KeyPair"
				},
				"SecurityGroups": [{
						"Fn::ImportValue":
						{"Fn::Sub": "${pEnvironment}:SGfileshareaccess" }	},
						{"Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SG000" } },
						{"Fn::ImportValue": {"Fn::Sub": "${pEnvironment}:SGdomainmember"}},
						{"Ref": "pSGcndotnetcode"},
						{"Ref": "rSGdockerworker"}
				],
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": ["", ["#!/bin/bash\n", "yum update -y aws-cfn-bootstrap\n", "/opt/aws/bin/cfn-init -v ", "         --stack ", {
									"Ref": "AWS::StackName"
								}, "         --resource rAutoScalingConfigDockerWorker ", "         --region ", {
									"Ref": "AWS::Region"
								}, "\n"]]
					}
				}
			}
		},

		"rSGdockerworker": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Security group for dockerworker servers",
				"VpcId": {
					"Ref": "pProductionVPC"
				},
				"Tags": [
						{ "Key": "Name", "Value": { "Fn::Sub": "${pFriendlyName} SGdockerworker" } },
						{ "Key": "AppStack", "Value": {	"Ref": "pAppStackName" } },
						{ "Key": "Environment", "Value": { "Ref": "pEnvironment" } }
				]
			}
		},

		"rSGdockerworkerT7946e": {
			"Type": "AWS::EC2::SecurityGroupEgress",
			"Properties": {
				"FromPort": 7946,
				"ToPort": 7946,
				"GroupId": {
					"Ref": "rSGdockerworker"
				},
				"IpProtocol": "tcp",
				"DestinationSecurityGroupId": {
					"Ref": "rSGdockermaster"
				}
			}
		},

		"rSGdockerworkerT7946i": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"FromPort": 7946,
				"ToPort": 7946,
				"GroupId": {
					"Ref": "rSGdockerworker"
				},
				"IpProtocol": "tcp",
				"SourceSecurityGroupId": {
					"Ref": "rSGdockermaster"
				}
			}
		},

		"rSGdockerworkerU7946e": {
			"Type": "AWS::EC2::SecurityGroupEgress",
			"Properties": {
				"FromPort": 7946,
				"ToPort": 7946,
				"GroupId": {
					"Ref": "rSGdockerworker"
				},
				"IpProtocol": "udp",
				"DestinationSecurityGroupId": {
					"Ref": "rSGdockermaster"
				}
			}
		},

		"rSGdockerworkerU7946i": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"FromPort": 7946,
				"ToPort": 7946,
				"GroupId": {
					"Ref": "rSGdockerworker"
				},
				"IpProtocol": "udp",
				"SourceSecurityGroupId": {
					"Ref": "rSGdockermaster"
				}
			}
		},

		"rSGdockerworkerU4789e": {
			"Type": "AWS::EC2::SecurityGroupEgress",
			"Properties": {
				"FromPort": 4789,
				"ToPort": 4789,
				"GroupId": {
					"Ref": "rSGdockerworker"
				},
				"IpProtocol": "udp",
				"DestinationSecurityGroupId": {
					"Ref": "rSGdockermaster"
				}
			}
		},

		"rSGdockerworkerU4789i": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"FromPort": 4789,
				"ToPort": 4789,
				"GroupId": {
					"Ref": "rSGdockerworker"
				},
				"IpProtocol": "udp",
				"SourceSecurityGroupId": {
					"Ref": "rSGdockermaster"
				}
			}
		},

		"rSGdockerworkerT7946es": {
			"Type": "AWS::EC2::SecurityGroupEgress",
			"Properties": {
				"FromPort": 7946,
				"ToPort": 7946,
				"GroupId": {
					"Ref": "rSGdockerworker"
				},
				"IpProtocol": "tcp",
				"DestinationSecurityGroupId": {
					"Ref": "rSGdockerworker"
				}
			}
		},

		"rSGdockerworkerT7946is": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"FromPort": 7946,
				"ToPort": 7946,
				"GroupId": {
					"Ref": "rSGdockerworker"
				},
				"IpProtocol": "tcp",
				"SourceSecurityGroupId": {
					"Ref": "rSGdockerworker"
				}
			}
		},

		"rSGdockerworkerU7946es": {
			"Type": "AWS::EC2::SecurityGroupEgress",
			"Properties": {
				"FromPort": 7946,
				"ToPort": 7946,
				"GroupId": {
					"Ref": "rSGdockerworker"
				},
				"IpProtocol": "udp",
				"DestinationSecurityGroupId": {
					"Ref": "rSGdockerworker"
				}
			}
		},

		"rSGdockerworkerU7946is": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"FromPort": 7946,
				"ToPort": 7946,
				"GroupId": {
					"Ref": "rSGdockerworker"
				},
				"IpProtocol": "udp",
				"SourceSecurityGroupId": {
					"Ref": "rSGdockerworker"
				}
			}
		},

		"rSGdockerworkerU4789es": {
			"Type": "AWS::EC2::SecurityGroupEgress",
			"Properties": {
				"FromPort": 4789,
				"ToPort": 4789,
				"GroupId": {
					"Ref": "rSGdockerworker"
				},
				"IpProtocol": "udp",
				"DestinationSecurityGroupId": {
					"Ref": "rSGdockerworker"
				}
			}
		},

		"rSGdockerworkerU4789is": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"FromPort": 4789,
				"ToPort": 4789,
				"GroupId": {
					"Ref": "rSGdockerworker"
				},
				"IpProtocol": "udp",
				"SourceSecurityGroupId": {
					"Ref": "rSGdockerworker"
				}
			}
		},

		"rSGdockerworkerT2376e": {
			"Type": "AWS::EC2::SecurityGroupEgress",
			"Properties": {
				"FromPort": 2376,
				"ToPort": 2377,
				"GroupId": {
					"Ref": "rSGdockerworker"
				},
				"IpProtocol": "tcp",
				"DestinationSecurityGroupId": {
					"Ref": "rSGdockermaster"
				}
			}
		},

		"rSGdockerworkerT2376i": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"FromPort": 2376,
				"ToPort": 2377,
				"GroupId": {
					"Ref": "rSGdockerworker"
				},
				"IpProtocol": "tcp",
				"SourceSecurityGroupId": {
					"Ref": "rSGdockermaster"
				}
			}
		},

		"rSGdockerworkerT2376es": {
			"Type": "AWS::EC2::SecurityGroupEgress",
			"Properties": {
				"FromPort": 2376,
				"ToPort": 2377,
				"GroupId": {
					"Ref": "rSGdockerworker"
				},
				"IpProtocol": "tcp",
				"DestinationSecurityGroupId": {
					"Ref": "rSGdockerworker"
				}
			}
		},

		"rSGdockerworkerT2376is": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"FromPort": 2376,
				"ToPort": 2377,
				"GroupId": {
					"Ref": "rSGdockerworker"
				},
				"IpProtocol": "tcp",
				"SourceSecurityGroupId": {
					"Ref": "rSGdockerworker"
				}
			}
		},

		"rSGdockerworkerSGRedisE": {
			"Type": "AWS::EC2::SecurityGroupEgress",
			"Properties": {
				"FromPort": 6379,
				"ToPort": 6379,
				"GroupId": { "Ref": "rSGdockerworker" },
				"IpProtocol": "tcp",
				"DestinationSecurityGroupId": { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGredis" } }
			}
		},

		"rSGdockerworkerSGRedisI": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"FromPort": 6379,
				"ToPort": 6379,
				"GroupId": { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGredis" } },
				"IpProtocol": "tcp",
				"SourceSecurityGroupId": { "Ref": "rSGdockerworker" }

			}
		},

		"rSGdockerworkerSGPostgresE": {
			"Type": "AWS::EC2::SecurityGroupEgress",
			"Properties": {
				"FromPort": 5432,
				"ToPort": 5432,
				"GroupId": {"Ref": "rSGdockerworker"	},
				"IpProtocol": "tcp",
				"DestinationSecurityGroupId": { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGpostgres" } }
			}
		},

		"rSGdockerworkerSGPostgresI": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"FromPort": 5432,
				"ToPort": 5432,
				"GroupId": { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGpostgres" } },
				"IpProtocol": "tcp",
				"SourceSecurityGroupId": { "Ref": "rSGdockerworker" }
			}
		},

		"rCWAlarmHighCPUDockerWorker": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"EvaluationPeriods": "1",
				"Statistic": "Average",
				"Threshold": "60",
				"AlarmDescription": "Add a DockerWorker if CPU utilization is too high",
				"Period": "180",
				"AlarmActions": [{
						"Ref": "rAutoScalingUpDockerWorker"
					}
				],
				"Namespace": "AWS/EC2",
				"Dimensions": [{
						"Name": "AutoScalingGroupName",
						"Value": {
							"Ref": "rAutoScalingGroupDockerWorker"
						}
					}
				],
				"ComparisonOperator": "GreaterThanThreshold",
				"MetricName": "CPUUtilization"
			}
		},

		"rCWAlarmLowCPUDockerWorker": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"EvaluationPeriods": "1",
				"Statistic": "Average",
				"Threshold": "15",
				"AlarmDescription": "If CPU is idle, remove a DockerWorker instance",
				"Period": "300",
				"AlarmActions": [{
						"Ref": "rAutoScalingDownDockerWorker"
					}
				],
				"Namespace": "AWS/EC2",
				"Dimensions": [{
						"Name": "AutoScalingGroupName",
						"Value": {
							"Ref": "rAutoScalingGroupDockerWorker"
						}
					}
				],
				"ComparisonOperator": "LessThanThreshold",
				"MetricName": "CPUUtilization"
			}
		},

		"rAutoScalingDownDockerWorker": {
			"Type": "AWS::AutoScaling::ScalingPolicy",
			"Properties": {
				"AdjustmentType": "ChangeInCapacity",
				"AutoScalingGroupName": {
					"Ref": "rAutoScalingGroupDockerWorker"
				},
				"Cooldown": "500",
				"ScalingAdjustment": "-1"
			}
		},

		"rAutoScalingUpDockerWorker": {
			"Type": "AWS::AutoScaling::ScalingPolicy",
			"Properties": {
				"AdjustmentType": "ChangeInCapacity",
				"AutoScalingGroupName": {
					"Ref": "rAutoScalingGroupDockerWorker"
				},
				"Cooldown": "500",
				"ScalingAdjustment": "1"
			}
		},

		"rALBwebceTargetAPI": {
			"Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
			"Properties": {
				"HealthCheckIntervalSeconds": 30,
				"HealthCheckPath": "/worths/help.aspx",
				"HealthCheckPort": 80,
				"HealthCheckProtocol": "HTTP",
				"HealthCheckTimeoutSeconds": 5,
				"HealthyThresholdCount": 2,
				"Matcher": {
					"HttpCode": "200,302"
				},
				"Port": 80,
				"Protocol": "HTTP",
				"Tags": [{
						"Key": "Name",
						"Value": {
							"Fn::Sub": "${pFriendlyName} DockerWorker HTTP"
						}
					}, {
						"Key": "Role",
						"Value": "DockerWorker"
					}, {
						"Key": "AppStack",
						"Value": {
							"Ref": "pAppStackName"
						}
					}, {
						"Key": "Environment",
						"Value": {
							"Ref": "pEnvironment"
						}
					}
				],
				"TargetGroupAttributes": [{
						"Key": "deregistration_delay.timeout_seconds",
						"Value": "30"
					}, {
						"Key": "stickiness.enabled",
						"Value": "true"
					}, {
						"Key": "stickiness.type",
						"Value": "lb_cookie"
					}, {
						"Key": "stickiness.lb_cookie.duration_seconds",
						"Value": "3600"
					}
				],
				"UnhealthyThresholdCount": 5,
				"VpcId": {
					"Ref": "pProductionVPC"
				}
			}
		},

		"rALBdockerworkerListenerHTTP": {
			"Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
			"Properties": {
				"Actions": [{
						"Type": "forward",
						"TargetGroupArn": {
							"Ref": "rALBwebceTargetAPI"
						}
					}
				],
				"Conditions": [{
						"Field": "path-pattern",
						"Values": ["/worths/*"]
					}
				],
				"ListenerArn": {
					"Ref": "pALBwebceListenerHttp"
				},
				"Priority": 32
			}
		},

		"rSGdockerworkerHTTPi": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"FromPort": 80,
				"ToPort": 80,
				"GroupId": { "Ref": "rSGdockerworker" },
				"IpProtocol": "tcp",
				"SourceSecurityGroupId": { "Ref": "pSGwebceELB" }
			}
		},

		"rALBwebceTargetBlueAPI":{
		"Type":"AWS::ElasticLoadBalancingV2::TargetGroup",
		"Properties":{
			"HealthCheckIntervalSeconds":30,
			"HealthCheckPath":"/health",
			"HealthCheckPort":9001,
			"HealthCheckProtocol":"HTTP",
			"HealthCheckTimeoutSeconds":5,
			"HealthyThresholdCount":2,
			"Matcher":{"HttpCode":"200,302"},
			"Port":9001,
			"Protocol":"HTTP",
			"Tags":[
				{"Key":"Name","Value":{"Fn::Sub":"${pFriendlyName} DockerWorker WebCE Blue API"}},
				{"Key":"Role","Value":"DockerWorker Blue API"},
				{"Key":"AppStack","Value":{"Ref":"pAppStackName"}},
				{"Key":"Environment","Value":{"Ref":"pEnvironment"}}],
			"TargetGroupAttributes":[
				{"Key":"deregistration_delay.timeout_seconds","Value":"30"},
				{"Key":"stickiness.enabled","Value":"true"},
				{"Key":"stickiness.type","Value":"lb_cookie"},
				{"Key":"stickiness.lb_cookie.duration_seconds","Value":"3600"}],
			"UnhealthyThresholdCount":5,
			"VpcId":{"Ref":"pProductionVPC"}}
	},

		"rALBdockerworkerListenerBlueAPI9001":{
		"Type":"AWS::ElasticLoadBalancingV2::ListenerRule",
		"Properties":{
			"Actions":[{"Type":"forward","TargetGroupArn":{"Ref":"rALBwebceTargetBlueAPI"}}],
			"Conditions":[{"Field":"path-pattern","Values":["/cashnetg/api/*"]}],
			"ListenerArn":{"Ref":"pALBwebceListenerHttp"},
			"Priority":6}
	},

		"rSGdockerworkerListenterBlueAPI9001i": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"FromPort": 9001,
				"ToPort": 9001,
				"GroupId": { "Ref": "rSGdockerworker" },
				"IpProtocol": "tcp",
				"SourceSecurityGroupId": { "Ref": "pSGwebceELB" }
			}
		},

		"rALBwebceTargetGreenAPI":{
		"Type":"AWS::ElasticLoadBalancingV2::TargetGroup",
		"Properties":{
			"HealthCheckIntervalSeconds":30,
			"HealthCheckPath":"/health",
			"HealthCheckPort":9002,
			"HealthCheckProtocol":"HTTP",
			"HealthCheckTimeoutSeconds":5,
			"HealthyThresholdCount":2,
			"Matcher":{"HttpCode":"200,302"},
			"Port":9002,
			"Protocol":"HTTP",
			"Tags":[
				{"Key":"Name","Value":{"Fn::Sub":"${pFriendlyName} DockerWorker WebCE Green API"}},
				{"Key":"Role","Value":"DockerWorker Green API"},
				{"Key":"AppStack","Value":{"Ref":"pAppStackName"}},
				{"Key":"Environment","Value":{"Ref":"pEnvironment"}}],
			"TargetGroupAttributes":[
				{"Key":"deregistration_delay.timeout_seconds","Value":"30"},
				{"Key":"stickiness.enabled","Value":"true"},
				{"Key":"stickiness.type","Value":"lb_cookie"},
				{"Key":"stickiness.lb_cookie.duration_seconds","Value":"3600"}],
			"UnhealthyThresholdCount":5,
			"VpcId":{"Ref":"pProductionVPC"}}
	},

		"rALBdockerworkerListenerGreenAPI9002":{
		"Type":"AWS::ElasticLoadBalancingV2::ListenerRule",
		"Properties":{
			"Actions":[{"Type":"forward","TargetGroupArn":{"Ref":"rALBwebceTargetGreenAPI"}}],
			"Conditions":[{"Field":"path-pattern","Values":["/cashneti/api/*"]}],
			"ListenerArn":{"Ref":"pALBwebceListenerHttp"},
			"Priority":16}
	},

		"rSGdockerworkerListenterGreenAPI9002i": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"FromPort": 9002,
				"ToPort": 9002,
				"GroupId": { "Ref": "rSGdockerworker" },
				"IpProtocol": "tcp",
				"SourceSecurityGroupId": { "Ref": "pSGwebceELB" }
			}
		},

		"rALBwebceTargetBlueStatic":{
		"Type":"AWS::ElasticLoadBalancingV2::TargetGroup",
		"Properties":{
			"HealthCheckIntervalSeconds":30,
			"HealthCheckPath":"/health",
			"HealthCheckPort":8001,
			"HealthCheckProtocol":"HTTP",
			"HealthCheckTimeoutSeconds":5,
			"HealthyThresholdCount":2,
			"Matcher":{"HttpCode":"200,302"},
			"Port":8001,
			"Protocol":"HTTP",
			"Tags":[
				{"Key":"Name","Value":{"Fn::Sub":"${pFriendlyName} DockerWorker WebCE Blue API"}},
				{"Key":"Role","Value":"DockerWorker Blue Static"},
				{"Key":"AppStack","Value":{"Ref":"pAppStackName"}},
				{"Key":"Environment","Value":{"Ref":"pEnvironment"}}],
			"TargetGroupAttributes":[
				{"Key":"deregistration_delay.timeout_seconds","Value":"30"},
				{"Key":"stickiness.enabled","Value":"true"},
				{"Key":"stickiness.type","Value":"lb_cookie"},
				{"Key":"stickiness.lb_cookie.duration_seconds","Value":"3600"}],
			"UnhealthyThresholdCount":5,
			"VpcId":{"Ref":"pProductionVPC"}}
	},

		"rALBdockerworkerListenerBlueStatic8001":{
		"Type":"AWS::ElasticLoadBalancingV2::ListenerRule",
		"Properties":{
			"Actions":[{"Type":"forward","TargetGroupArn":{"Ref":"rALBwebceTargetBlueStatic"}}],
			"Conditions":[{"Field":"path-pattern","Values":["/cashnetg/static/*"]}],
			"ListenerArn":{"Ref":"pALBwebceListenerHttp"},
			"Priority":8}
	},

		"rSGdockerworkerListenterBlueStatic8001i": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"FromPort": 8001,
				"ToPort": 8001,
				"GroupId": { "Ref": "rSGdockerworker" },
				"IpProtocol": "tcp",
				"SourceSecurityGroupId": { "Ref": "pSGwebceELB" }
			}
		},

		"rALBwebceTargetGreenStatic":{
		"Type":"AWS::ElasticLoadBalancingV2::TargetGroup",
		"Properties":{
			"HealthCheckIntervalSeconds":30,
			"HealthCheckPath":"/health",
			"HealthCheckPort":8002,
			"HealthCheckProtocol":"HTTP",
			"HealthCheckTimeoutSeconds":5,
			"HealthyThresholdCount":2,
			"Matcher":{"HttpCode":"200,302"},
			"Port":8002,
			"Protocol":"HTTP",
			"Tags":[
				{"Key":"Name","Value":{"Fn::Sub":"${pFriendlyName} DockerWorker WebCE Green API"}},
				{"Key":"Role","Value":"DockerWorker Green Static"},
				{"Key":"AppStack","Value":{"Ref":"pAppStackName"}},
				{"Key":"Environment","Value":{"Ref":"pEnvironment"}}],
			"TargetGroupAttributes":[
				{"Key":"deregistration_delay.timeout_seconds","Value":"30"},
				{"Key":"stickiness.enabled","Value":"true"},
				{"Key":"stickiness.type","Value":"lb_cookie"},
				{"Key":"stickiness.lb_cookie.duration_seconds","Value":"3600"}],
			"UnhealthyThresholdCount":5,
			"VpcId":{"Ref":"pProductionVPC"}}
	},

		"rALBdockerworkerListenerGreenStatic8002":{
		"Type":"AWS::ElasticLoadBalancingV2::ListenerRule",
		"Properties":{
			"Actions":[{"Type":"forward","TargetGroupArn":{"Ref":"rALBwebceTargetGreenStatic"}}],
			"Conditions":[{"Field":"path-pattern","Values":["/cashneti/static/*"]}],
			"ListenerArn":{"Ref":"pALBwebceListenerHttp"},
			"Priority":18}
	},

		"rSGdockerworkerListenterGreenStatic8002i": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"FromPort": 8002,
				"ToPort": 8002,
				"GroupId": { "Ref": "rSGdockerworker" },
				"IpProtocol": "tcp",
				"SourceSecurityGroupId": { "Ref": "pSGwebceELB" }
			}
		},

		"rSGdockerworkerListenterBlueAPI8001e": {
			"Type": "AWS::EC2::SecurityGroupEgress",
			"Properties": {
				"FromPort": 8001,
				"ToPort": 8002,
				"GroupId": { "Ref": "pSGwebceELB" },
				"IpProtocol": "tcp",
				"DestinationSecurityGroupId": { "Ref": "rSGdockerworker" }
			}
		},

		"rSGdockerworkerListenterBlueAPI9001e": {
			"Type": "AWS::EC2::SecurityGroupEgress",
			"Properties": {
				"FromPort": 9001,
				"ToPort": 9002,
				"GroupId": { "Ref": "pSGwebceELB" },
				"IpProtocol": "tcp",
				"DestinationSecurityGroupId": { "Ref": "rSGdockerworker" }
			}
		},

		"rSGdockerworkerAnsible22I": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"FromPort": 22,
				"ToPort": 22,
				"GroupId": { "Ref": "rSGdockerworker" },
                "IpProtocol": "tcp",
                "SourceSecurityGroupId": {"Fn::ImportValue": {"Fn::Sub": "${pEnvironment}:SGansible"} }
            }
        },

		"rSGdockerworkerAnsible9991I": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"FromPort": 9991,
				"ToPort": 9991,
				"GroupId": { "Ref": "rSGdockerworker" },
				"IpProtocol": "tcp",
				"SourceSecurityGroupId": { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGansible" } }
			}
		},

		"rSGdockerworkerAnsible9992I": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"FromPort": 9992,
				"ToPort": 9992,
				"GroupId": { "Ref": "rSGdockerworker" },
				"IpProtocol": "tcp",
				"SourceSecurityGroupId": { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGansible" } }
			}
		},

		"rSGdockermasterSGDockerworker99919992e": {
			"Type": "AWS::EC2::SecurityGroupEgress",
			"Properties": {
				"FromPort": 9991,
				"ToPort": 9992,
				"GroupId": { "Ref": "rSGdockermaster" },
				"IpProtocol": "tcp",
				"DestinationSecurityGroupId": { "Ref": "rSGdockerworker" }
			}
		},

		"rSGdockermasterSGdockerworker99919992i": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"FromPort": 9991,
				"ToPort": 9992,
				"GroupId": { "Ref": "rSGdockerworker" },
				"IpProtocol": "tcp",
				"SourceSecurityGroupId": { "Ref": "rSGdockermaster" }
			}
		}
	},

	"Outputs": {

		"Hi":
			{ "Value": "Hello" }
	}
}
