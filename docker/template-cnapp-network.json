{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "Provides networking configuration for a standard, public facing application, separates private-public subnets and enforces traffic with NACL rules",
	"Metadata": {
		"AWS::CloudFormation::Interface": {
			"ParameterGroups": [{
				"Label": {
					"default": "Region Config"
				},
				"Parameters": ["pRegionAZ1Name", "pRegionAZ2Name"]
			}, {
				"Label": {
					"default": "Production VPC Config"
				},
				"Parameters": [ "pSubnetACIDR", "pSubnetBCIDR", "pSubnetCCIDR", "pFriendlyName", "pAppStackName" ]
			}],
			"ParameterLabels": {
				"pSubnetACIDR": {
					"default": "CIDR block of subnet A"
				},
				"pSubnetBCIDR": {
					"default": "CIDR block of subnet B"
				},
				"pSubnetCCIDR": {
					"default": "CIDR block of subnet C"
				},
				"pFriendlyName": {
					"default": "Friendly name for the stack (shared stack-app stack)"
				},
				"pAppStackName": {
					"default": "Name of the app stack"
				}
			}
		},
		"Stack": {
			"Value": "2"
		},
		"VersionDate": {
			"Value": "20160510"
		},
		"Identifier": {
			"Value": "template-network-cnapp"
		},
		"Input": {
			"Description": "CIDR blocks, VPC names, KeyName, EC2 instance size"
		},
		"Output": {
			"Description": "Outputs ID of all deployed resources"
		}
	},
	"Parameters": {
		"pFriendlyName": {
			"Description": "Friendly name for this stack",
			"Type": "String",
			"Default": ""
		},
		"pSubnetACIDR": {
			"Description": "CIDR block for AZ-1a subnet",
			"Type": "String"
		},
		"pSubnetBCIDR": {
			"Description": "CIDR block for AZ-1b subnet",
			"Type": "String"
		},
		"pSubnetCCIDR": {
			"Description": "CIDR block for AZ-1c subnet",
			"Type": "String"
		},
		"pEnvironment": {
			"Description": "Environment (development, test, or production)",
			"Type": "String"
		},
		"pAppStackName": {
			"Description": "AppStack Name (for example cnprod)",
			"Type": "String"
		},
		"pUseCiscoCSR": {
			"Description": "Should this stack have a Cisco Cloud Services Router?",
			"Type": "String",
			"AllowedValues": ["true", "false"]
		},
		"pUseDocker": {
			"Description": "Should this stack install Docker resources?",
			"Type": "String",
			"AllowedValues": ["true", "false"],
			"Default": "false"
		},
		
		"pRegionAZ3Name": {
                "Description": "Availability Zone 3",
                "Type": "AWS::EC2::AvailabilityZone::Name"
        }
	},
	
	"Conditions": {
		"cUseCSR": {
			"Fn::Equals": [ { "Ref": "pUseCiscoCSR" }, 	"true"  ] 
		},
		"cSkipCSR": {
			"Fn::Equals": [  { "Ref": "pUseCiscoCSR" }, "false" ] 
		},
		"cBuildDocker": { 
			"Fn::Equals":[ { "Ref":"pUseDocker" }, "true" ] }
	},
	
	"Resources": {
		"rSubnetA": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"CidrBlock": { "Ref": "pSubnetACIDR" },		
				"AvailabilityZone": { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:AvailabilityZoneA"} },			
				"MapPublicIpOnLaunch": "false",
				"VpcId": { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:VPCID" } },
				"Tags": [ 
					{	"Key": "Name",
						"Value": { "Fn::Sub": "${pFriendlyName} Subnet A" }
					}, 
					{	"Key": "Environment",
						"Value": { "Ref": "pEnvironment" }
					}, 
					{	"Key": "AppStack",
						"Value": { "Ref": "pAppStackName" }
					},
					{	"Key": "Role",
						"Value": "CN Subnet"
					}
				]
			}
		},
		"rSubnetB": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"CidrBlock": { "Ref": "pSubnetBCIDR" },
				"AvailabilityZone": { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:AvailabilityZoneB"} },
				"MapPublicIpOnLaunch": "false",
				"VpcId": { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:VPCID" } },
				"Tags": [ 
					{	"Key": "Name",
						"Value": { "Fn::Sub": "${pFriendlyName} Subnet B" }
					}, 
					{	"Key": "Environment",
						"Value": { "Ref": "pEnvironment" }
					}, 
					{	"Key": "AppStack",
						"Value": { "Ref": "pAppStackName" }
					},
					{	"Key": "Role",
						"Value": "CN Subnet"
					} 
				]
			}
		},
		"rSubnetC": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"CidrBlock": { "Ref": "pSubnetCCIDR" },
				"AvailabilityZone": { "Ref":"pRegionAZ3Name" },
				"MapPublicIpOnLaunch": "false",
				"VpcId": { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:VPCID" } },
				"Tags": [ 
					{	"Key": "Name",
						"Value": { "Fn::Sub": "${pFriendlyName} Subnet C" }
					}, 
					{	"Key": "Environment",
						"Value": { "Ref": "pEnvironment" }
					}, 
					{	"Key": "AppStack",
						"Value": { "Ref": "pAppStackName" }
					},
					{	"Key": "Role",
						"Value": "CN Subnet"
					} 
				]
			}
		},
		"rRouteAssocANoCSR": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Condition": "cSkipCSR",
			"Properties": {
				"RouteTableId": { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:RouteTablePrivate" }  },
				"SubnetId": { "Ref": "rSubnetA" }
			}
		},
		"rRouteAssocBNoCSR": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Condition": "cSkipCSR",
			"Properties": {
				"RouteTableId": { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:RouteTablePrivateB" }  },
				"SubnetId": { "Ref": "rSubnetB" }
			}
		},
		"rRouteAssocCNoCSR": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Condition": "cBuildDocker",
			"Condition": "cSkipCSR",
			"Properties": {
				"RouteTableId": { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:RouteTablePrivateB" }  },
				"SubnetId": { "Ref": "rSubnetC" }
			}
		},
		"rRouteAssocACSR": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Condition": "cUseCSR",
			"Properties": {
				"RouteTableId": { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:RouteTableVPN" }  },
				"SubnetId": { "Ref": "rSubnetA" }
			}
		},
		"rRouteAssocBCSR": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Condition": "cUseCSR",
			"Properties": {
				"RouteTableId": {"Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:RouteTableVPN" } },
				"SubnetId": { "Ref": "rSubnetB"}
			}
		},
		
		"rRouteAssocCCSR": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Condition": "cBuildDocker",
			"Condition": "cUseCSR",
			"Properties": {
				"RouteTableId": { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:RouteTableVPN" }  },
				"SubnetId": { "Ref": "rSubnetC"	}
			}
		}
	},
	
	"Outputs": {
		"rSubnetA": {
			"Value": {
				"Ref": "rSubnetA"
			}
		},
		"rSubnetB": {
			"Value": {
				"Ref": "rSubnetB"
			}
		},
		"rSubnetC": {
			"Value": {
				"Ref": "rSubnetC"
			}
		}
	}
}