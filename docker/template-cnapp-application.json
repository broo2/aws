{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "Provides resources directly required for the application, such as EC2 instances, autoscaling groups, and databases",

	"Metadata": {
		"AWS::CloudFormation::Interface": {
			"ParameterGroups": [{
				"Label": {
					"default": "Region Config"
				},
				"Parameters": ["pRegionAZ1Name", "pRegionAZ2Name"]
			}, {
				"Label": {
					"default": "Network (existing VPC config)"
				},
				"Parameters": ["pDomainName",   "pDBTypeKey", "pProductionVPC", "pSubnetA", "pSubnetB"]
			}, {
				"Label": {
					"default": "Application Configuration"
				},
				"Parameters": ["pWebInstanceType", "pWebMinInstances", "pWebMaxInstances", "pMiscMinInstances", "pMiscMaxInstances", "pTomcatInstanceType", "pMiscInstanceType", "pJobInstanceType", "pJobMinInstances", "pJobMaxInstances", "pWindowsAMI", "pWindowsIISAMI", "pLinuxAMI", "pInstanceIAMProfile", "pInstanceIAMRole", "pCodeDeployServiceRoleArn", "pDirectoryService" , "pAzureVPNFlag", "pAzureCNAppCIDR"]
			}, {
				"Label": {
					"default": "Database Configuration"
				},
				"Parameters": ["pDBName", "pDBUser", "pDBPassword", "pDBClass", "pDBAllocatedStorage"]
			}]
		},
		"Stack": {
			"Value": "3"
		},
		"VersionDate": {
			"Value": "20160510"
		},
		"Identifier": {
			"Value": "template-cnapp-application"
		},
		"Input": {
			"Description": "VPC, SubnetIDs, S3 bucket names, CIDR blocks, KeyNames, AMIs, DB name and password"
		},
		"Output": {
			"Description": "Outputs ID of all deployed resources"
		}
	},

	"Parameters": {
		"pEnvironment": {
			"Description": "Environment type (development, test, or production)",
			"Type": "String",
			"Default": "development"
		},
		"pAppStackName": {
			"Description": "AppStack Name (for example cnprod)",
			"Type": "String"
		},
		"pFriendlyName": {
			"Description": "Friendly name for this stack",
			"Type": "String",
			"Default": ""
		},
		"pProductionVPC": {
			"Description": "Production VPC",
			"Type": "AWS::EC2::VPC::Id"
		},
		"pSubnetA": {
			"Description": "Subnet A",
			"Type": "AWS::EC2::Subnet::Id"
		},
		"pSubnetB": {
			"Description": "Subnet B",
			"Type": "AWS::EC2::Subnet::Id"
		},
		"pRegionAZ1Name": {
			"Description": "First AZ",
			"Type": "AWS::EC2::AvailabilityZone::Name"
		},
		"pRegionAZ2Name": {
			"Description": "Second AZ",
			"Type": "AWS::EC2::AvailabilityZone::Name"
		},
		"pDomainName": {
			"Description": "Domain name where resources will deploy",
			"Type": "String",
			"Default": "us-east-1.compute.internal"
		},
		"pDBTypeKey": {
			"Description": "Database type key (PROD or TRAIN)",
			"Type": "String",
			"Default": "PROD",
			"AllowedValues": ["PROD", "TRAIN"]
		},
		"pEC2KeyPair": {
			"Description": "Key Name for Instance",
			"Type": "String",
			"Default": ""
		},
		"pWebInstanceType": {
			"Description": "Instance type for the webservers",
			"Type": "String"
		},
		"p404InstanceType": {
			"Description": "Instance type for the 404 handler webservers",
			"Type": "String"
		},
		"pWebMinInstances": {
			"Description": "Minimum number of instances for the webservers",
			"Type": "String"
		},
		"pWebMaxInstances": {
			"Description": "Maximum number of instances for the webservers",
			"Type": "String"
		},
		"pMiscInstanceType": {
			"Description": "Instance type for the miscellaneous servers",
			"Type": "String"
		},
		"pMiscMinInstances": {
			"Description": "Minimum number of instances for misc. servers",
			"Type": "String"
		},
		"pMiscMaxInstances": {
			"Description": "Maximum number of instances for misc. servers",
			"Type": "String"
		},
		"pJobInstanceType": {
			"Description": "Instance type for the job servers",
			"Type": "String"
		},
		"pJobMinInstances": {
			"Description": "Minimum number of instances for job servers",
			"Type": "String"
		},
		"pJobMaxInstances": {
			"Description": "Maximum number of instances for job servers",
			"Type": "String"
		},
		"pTomcatInstanceType": {
			"Description": "Instance type for the tomcat servers",
			"Type": "String"
		},
		"pTomcatMinInstances": {
			"Description": "Minimum number of instances for tomcat servers",
			"Type": "String"
		},
		"pTomcatMaxInstances": {
			"Description": "Maximum number of instances for tomcat servers",
			"Type": "String"
		},
		"pWindowsAMI": {
			"Description": "Which Windows server AMI do you want to use without IIS, default ",
			"Type": "String",
			"Default": "none"
		},
		"pWindowsIISAMI": {
			"Description": "Which Windows server AMI do you want to use with IIS, default ",
			"Type": "String",
			"Default": "none"
		},
		"pLinuxAMI": {
			"Description": "Which Linux AMI do you want to use, default ",
			"Type": "String",
			"Default": "none"
		},
		"pInstanceIAMProfile": {
			"Description": "The IAM profile to assign to created EC2 instances",
			"Type": "String",
			"Default": ""
		},
		"pInstanceIAMRole": {
			"Description": "The IAM role to assign to created EC2 instances",
			"Type": "String",
			"Default": ""
		},
		"pCodeDeployServiceRoleArn": {
			"Description": "The ARN of the code deploy service role",
			"Type": "String",
			"Default": ""
		},
		"pDirectoryService": {
			"Description": "Directory Service ID to join instances to",
			"Type": "String",
			"Default": ""
		},
		"pDBAppUser": {
			"Description": "The database user for the application",
			"Type": "String",
			"MinLength": 3,
			"MaxLength": 28
		},
		"pDBAppPassword": {
			"Description": "Mixed alphanumeric and must be between 8 and 28 characters and contain at least one capital letter",
			"NoEcho": true,
			"Type": "String",
			"MinLength": 8,
			"MaxLength": 28
		},
		"pProdDBName": {
			"Description": "Enter the name of the CASHNet production database",
			"Type": "String",
			"Default": "cashnet_prod"
		},
		"pTrainDBName": {
			"Description": "Enter the name of the CASHNet training database",
			"Type": "String",
			"Default": "cashnet_train"
		},
		"pSTDBUser": {
			"Description": "The database user for session state",
			"Type": "String",
			"MinLength": 3,
			"MaxLength": 28
		},
		"pSTDBPassword": {
			"Description": "Mixed alphanumeric and must be between 8 and 28 characters and contain at least one capital letter",
			"NoEcho": true,
			"Type": "String",
			"MinLength": 8,
			"MaxLength": 28
		},
		"pAutorunUser": {
			"Description": "Pre-Existing SQL user for the autorun utility databases",
			"Type": "String",
			"MinLength": 3,
			"MaxLength": 28
		},
		"pAutorunPassword": {
			"Description": "Mixed alphanumeric and must be between 8 and 28 characters and contain at least one capital letter",
			"NoEcho": true,
			"Type": "String",
			"MinLength": 8,
			"MaxLength": 28
		},
		"pWebAppUser": {
			"Description": "The user for the web application pools",
			"Type": "String",
			"MinLength": 3,
			"MaxLength": 28
		},
		"pWebAppPassword": {
			"Description": "Mixed alphanumeric and must be between 8 and 28 characters and contain at least one capital letter",
			"NoEcho": true,
			"Type": "String",
			"MinLength": 8,
			"MaxLength": 28
		},
		"pBatchAppUser": {
			"Description": "The user for the batch application",
			"Type": "String",
			"MinLength": 3,
			"MaxLength": 28
		},
		"pBatchAppPassword": {
			"Description": "Mixed alphanumeric and must be between 8 and 28 characters and contain at least one capital letter",
			"NoEcho": true,
			"Type": "String",
			"MinLength": 8,
			"MaxLength": 28
		},
		"pAGListener": {
			"Description": "Enter the DNS name of the Availability Group listener you have already created for SQL PR",
			"Type": "String"
		},
		"pSTAGListener": {
			"Description": "Enter the DNS name of the Availability Group listener you have already created for SQL ST",
			"Type": "String"
		},
		"pSTDBName": {
			"Description": "Enter the name of the SQL Session State Database",
			"Type": "String"
		},
		"pCommerceCertARN": {
			"Description": "Enter the Amazon Certificate Manager ARN for the commerce.cashnet.com certificate to use",
			"Type": "String"
		},
		"pWebauthCertARN": {
			"Description": "Enter the Amazon Certificate Manager ARN for the webauth.cashnet.com certificate to use",
			"Type": "String"
		},
		"pEnvironmentType": {
			"Description": "The type of environment this will be used for",
			"Type": "String",
			"Default": "Non-Prod",
			"AllowedValues": ["PROD", "Non-Prod"]
		},
		"pWebceWAFPort": {
			"Description": "Enter the Port on which the WAF will accept connections for WebCE",
			"Type": "Number",
			"MinValue": "8001",
			"MaxValue": "8099",
			"ConstraintDescription": "must be a valid number between 8001 and 8099."
		},
		"pWebceHttpWAFPort": {
			"Description": "Enter the Port on which the WAF will accept HTTP connections for WebCE for redirect to HTTPS",
			"Type": "Number",
			"MinValue": "8001",
			"MaxValue": "8099",
			"ConstraintDescription": "must be a valid number between 8001 and 8099."
		},
		"pWebauthWAFPort": {
			"Description": "Enter the Port on which the WAF will accept connections for Webauth",
			"Type": "Number",
			"MinValue": "8001",
			"MaxValue": "8099",
			"ConstraintDescription": "must be a valid number between 8001 and 89899."
		},
		"pOLPostOperator": {
			"Description": "Enter the CASHNet Operator ID that should be used to run the online posting service",
			"Type": "String"
		},
		"pOLPostOperatorPassword": {
			"Description": "Enter the password for the CASHNet Operator ID that will run the online posting service",
			"NoEcho": true,
			"Type": "String"
		},

		"pOLPostServiceIndicator": {
			"Description": "Enter the Service Indicator for the online posting service",
			"Type": "String",
			"Default": "A",
			"MinLength": 1,
			"MaxLength": 1,
			"ConstraintDescription": "Must be one character only"
		},

		"pCashnetHost": {
			"Description": "Enter the hostname for the CASHNet website, such as commerce.cashnet.com or train.cashnet.com",
			"Type": "String"
		},

		"pPublicAccessFlag": {
			"Description": "Choose true to allow public access to websites or false to restrict to predefined permitted IP addresses",
			"AllowedValues": ["true", "false"],
			"Default": "false",
			"Type": "String"
		},
		"pAzureVPNFlag": {
			"Description": "Setup Routes for Azure VPN?",
			"Type": "String",
			"AllowedValues" : ["true", "false"],
			"Default": "false"
		},
		"pAzureCNAppCIDR": {
			"Description": "Azure CNApp CIDR",
			"Type": "String"
		}
	},

	"Conditions": {
		"cProdEnvironment": {
			"Fn::Equals" : [
				{ "Ref": "pEnvironmentType" },
				"PROD"
			]
		},

		"cPublicAccess": {
			"Fn::Equals" : [
				{ "Ref": "pPublicAccessFlag" },
				"true"
			]
		},

		"cPrivateAccess": {
			"Fn::Equals" : [
				{ "Ref": "pPublicAccessFlag" },
				"false"
			]
		}
	},

	"Resources": {
		"rSGcndotnetcode": {
			"Type" : "AWS::EC2::SecurityGroup",
			"Properties" : {
				"GroupDescription" : "Security group applied to servers running CASHNEt asp.net code i.e. web, job, olpost",
				"VpcId" : { "Ref": "pProductionVPC" },
				"SecurityGroupEgress": [
					{ "CidrIp": "0.0.0.0/0", "IpProtocol": "tcp", "FromPort": "20", "ToPort" : "22" },
	        { "CidrIp": "0.0.0.0/0", "IpProtocol": "tcp", "FromPort": "25", "ToPort" : "25" },
			{ "CidrIp": "0.0.0.0/0", "IpProtocol": "tcp", "FromPort": "222", "ToPort" : "222" },
	        { "CidrIp": "0.0.0.0/0", "IpProtocol": "tcp", "FromPort": "443", "ToPort" : "443" },
	        { "CidrIp": "0.0.0.0/0", "IpProtocol": "tcp", "FromPort": "991", "ToPort" : "991" },
	        { "CidrIp": "0.0.0.0/0", "IpProtocol": "tcp", "FromPort": "1025", "ToPort" : "65535" }
				],
				"Tags" :  [
					{ "Key": "Name", "Value": { "Fn::Sub": "${pFriendlyName} SGcndotnetcode" } },
					{ "Key": "AppStack", "Value": { "Ref": "pAppStackName" } },
					{ "Key": "Environment", "Value": { "Ref": "pEnvironment" } }
				]
			}
		},

		"rSGcnsiteaccessOpen": {
			"Type" : "AWS::EC2::SecurityGroup",
			"Condition": "cPublicAccess",
			"Properties" : {
				"GroupDescription" : "Controls who can access the Cashnet websites (in production, everyone)",
				"VpcId" : { "Ref": "pProductionVPC" },
				"SecurityGroupIngress": [
					{ "CidrIp": "0.0.0.0/0", "IpProtocol": "tcp", "FromPort": "80", "ToPort" : "80" },
					{ "CidrIp": "0.0.0.0/0", "IpProtocol": "tcp", "FromPort": "443", "ToPort" : "443" }
				],
			    "SecurityGroupEgress": [
					{ "CidrIp": "127.0.0.1/32", "IpProtocol": "icmp", "FromPort": "8", "ToPort" : "8" }
				],
				"Tags" :  [
					{ "Key": "Name", "Value": { "Fn::Sub": "${pFriendlyName} SGcnsiteaccessOpen" } },
					{ "Key": "AppStack", "Value": { "Ref": "pAppStackName" } },
					{ "Key": "Environment", "Value": { "Ref": "pEnvironment" } }
				]
			}
		},

		"rSGcnsiteaccessRestricted": {
			"Type" : "AWS::EC2::SecurityGroup",
			"Condition": "cPrivateAccess",
			"Properties" : {
				"GroupDescription" : "Controls who can access the Cashnet websites (in non-production, only specific addresses)",
				"VpcId" : { "Ref": "pProductionVPC" },
				"SecurityGroupIngress": [
					{ "CidrIp": "50.205.108.0/27", "IpProtocol": "tcp", "FromPort": "443", "ToPort" : "443" },
					{ "CidrIp": "54.202.108.107/32", "IpProtocol": "tcp", "FromPort": "443", "ToPort" : "443" },
					{ "CidrIp": "54.202.107.248/32", "IpProtocol": "tcp", "FromPort": "443", "ToPort" : "443" },
					{ "CidrIp": "52.7.223.237/32", "IpProtocol": "tcp", "FromPort": "443", "ToPort" : "443" },
					{ "CidrIp": "54.83.61.223/32", "IpProtocol": "tcp", "FromPort": "443", "ToPort" : "443" },
					{ "CidrIp": "54.226.188.175/32", "IpProtocol": "tcp", "FromPort": "443", "ToPort" : "443" },
					{ "CidrIp": "54.234.235.238/32", "IpProtocol": "tcp", "FromPort": "443", "ToPort" : "443" },
					{ "CidrIp": "54.235.108.107/32", "IpProtocol": "tcp", "FromPort": "443", "ToPort" : "443" },
					{ "CidrIp": "54.83.12.245/32", "IpProtocol": "tcp", "FromPort": "443", "ToPort" : "443" },
					{ "CidrIp": "52.202.107.248/32", "IpProtocol": "tcp", "FromPort": "443", "ToPort" : "443" },
					{ "CidrIp": "107.20.191.36/32", "IpProtocol": "tcp", "FromPort": "443", "ToPort" : "443" },
					{ "CidrIp": "107.20.185.82/32", "IpProtocol": "tcp", "FromPort": "443", "ToPort" : "443" },
					{ "CidrIp": "54.236.192.96/32", "IpProtocol": "tcp", "FromPort": "443", "ToPort" : "443" },
					{ "CidrIp": "54.208.33.254/32", "IpProtocol": "tcp", "FromPort": "443", "ToPort" : "443" },
					{ "CidrIp": "107.21.45.209/32", "IpProtocol": "tcp", "FromPort": "443", "ToPort" : "443" },
					{ "CidrIp": "34.194.227.159/32", "IpProtocol": "tcp", "FromPort": "443", "ToPort" : "443" },
					{ "CidrIp": "34.193.39.182/32", "IpProtocol": "tcp", "FromPort": "443", "ToPort" : "443" },
					{ "CidrIp": "63.144.247.0/24", "IpProtocol": "tcp", "FromPort": "443", "ToPort" : "443" },
					{ "CidrIp": "209.113.252.0/27", "IpProtocol": "tcp", "FromPort": "443", "ToPort" : "443" },
					{ "CidrIp": "125.18.78.128/29", "IpProtocol": "tcp", "FromPort": "443", "ToPort" : "443" },
					{ "CidrIp": "98.23.116.10/32", "IpProtocol": "tcp", "FromPort": "443", "ToPort" : "443" },
					{ "CidrIp": "165.212.191.131/32", "IpProtocol": "tcp", "FromPort": "443", "ToPort" : "443" },
					{ "CidrIp": "66.210.59.5/32", "IpProtocol": "tcp", "FromPort": "443", "ToPort" : "443" },
					{ "CidrIp": "207.243.114.66/32", "IpProtocol": "tcp", "FromPort": "443", "ToPort" : "443" },
					{ "CidrIp": "34.193.13.19/32", "IpProtocol": "tcp", "FromPort": "443", "ToPort" : "443" },
					{ "CidrIp": "34.193.25.63/32", "IpProtocol": "tcp", "FromPort": "443", "ToPort" : "443" },
					{ "CidrIp": "38.142.180.160/29", "IpProtocol": "tcp", "FromPort": "443", "ToPort" : "443" },
					{ "CidrIp": "54.235.153.247/32", "IpProtocol": "tcp", "FromPort": "443", "ToPort" : "443" },
					{ "CidrIp": "35.168.211.222/32", "IpProtocol": "tcp", "FromPort": "443", "ToPort" : "443" },
					{ "CidrIp": "54.227.22.118/32", "IpProtocol": "tcp", "FromPort": "443", "ToPort" : "443" }
				],
				"SecurityGroupEgress": [
					{ "CidrIp": "127.0.0.1/32", "IpProtocol": "icmp", "FromPort": "8", "ToPort" : "8" }
				],
				"Tags" :  [
					{ "Key": "Name", "Value": { "Fn::Sub": "${pFriendlyName} SGcnsiteaccessRestricted" } },
					{ "Key": "AppStack", "Value": { "Ref": "pAppStackName" } },
					{ "Key": "Environment", "Value": { "Ref": "pEnvironment" } }
				]
			}
		},

		"rSGwebce": {
			"Type" : "AWS::EC2::SecurityGroup",
			"Properties" : {
				"GroupDescription" : "Security group for WebCE servers",
				"VpcId" : { "Ref": "pProductionVPC" },
				"SecurityGroupEgress": [
					{ "CidrIp": "127.0.0.1/32", "IpProtocol": "icmp", "FromPort": "-1", "ToPort" : "-1" }
				],
				"Tags" :  [
					{ "Key": "Name", "Value": { "Fn::Sub": "${pFriendlyName} SGwebce" } },
					{ "Key": "AppStack", "Value": { "Ref": "pAppStackName" } },
					{ "Key": "Environment", "Value": { "Ref": "pEnvironment" } }
				]
			}
		},

		"rSGwebceELB": {
			"Type" : "AWS::EC2::SecurityGroup",
			"Properties" : {
				"GroupDescription" : "Security group for WebCE ELB",
				"VpcId" : { "Ref": "pProductionVPC" },
				"Tags" :  [
					{ "Key": "Name", "Value": { "Fn::Sub": "${pFriendlyName} SGwebceELB" } },
					{ "Key": "AppStack", "Value": { "Ref": "pAppStackName" } },
					{ "Key": "Environment", "Value": { "Ref": "pEnvironment" } }
				]
			}
		},

		"rSGwebceELBSGwafHTTP": {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"FromPort" : 80,
				"ToPort" : 80,
				"GroupId" : { "Ref": "rSGwebceELB"},
				"IpProtocol" : "tcp",
				"SourceSecurityGroupId" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGwaf" } }
			}
		},

		"rSGwebceELBSGwafHTTPS": {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"FromPort" : 443,
				"ToPort" : 443,
				"GroupId" : { "Ref": "rSGwebceELB"},
				"IpProtocol" : "tcp",
				"SourceSecurityGroupId" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGwaf" } }
			}
		},

		"rSGwebceSGwebceELB": {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"FromPort" : 80,
				"ToPort" : 80,
				"GroupId" : { "Ref": "rSGwebce"},
				"IpProtocol" : "tcp",
				"SourceSecurityGroupId" : { "Ref": "rSGwebceELB" }
			}
		},

		"rSGwebceSGwebceELBEgress": {
		  "Type" : "AWS::EC2::SecurityGroupEgress",
		  "Properties" : {
		    "FromPort" : 80,
		    "ToPort" : 80,
		    "GroupId" : { "Ref": "rSGwebceELB" },
		    "IpProtocol" : "tcp",
		    "DestinationSecurityGroupId" : { "Ref": "rSGwebce"}
		  }
		},

		"rSGwebceELBSGwebce": {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"FromPort" : 443,
				"ToPort" : 443,
				"GroupId" : { "Ref": "rSGwebceELB"},
				"IpProtocol" : "tcp",
				"SourceSecurityGroupId" : { "Ref": "rSGwebce" }
			}
		},

		"rSGwebceWAFALB": {
			"Type" : "AWS::EC2::SecurityGroup",
			"Properties" : {
				"GroupDescription" : "Security group for WebCE WAF ALB",
				"VpcId" : { "Ref": "pProductionVPC" },
				"Tags" :  [
					{ "Key": "Name", "Value": { "Fn::Sub": "${pFriendlyName} SGwebceELB" } },
					{ "Key": "AppStack", "Value": { "Ref": "pAppStackName" } },
					{ "Key": "Environment", "Value": { "Ref": "pEnvironment" } }
				]
			}
		},

		"rSGwafSGwebceALB": {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"FromPort" : { "Ref": "pWebceWAFPort" },
				"ToPort" : { "Ref": "pWebceWAFPort" },
				"GroupId" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGwaf" } },
				"IpProtocol" : "tcp",
				"SourceSecurityGroupId" : { "Ref": "rSGwebceWAFALB"}
			}
		},

		"rSGwafSGwebceALBEgress": {
		  "Type" : "AWS::EC2::SecurityGroupEgress",
		  "Properties" : {
		    "FromPort" : { "Ref": "pWebceWAFPort" },
		    "ToPort" : { "Ref": "pWebceWAFPort" },
		    "GroupId" : { "Ref": "rSGwebceWAFALB"},
		    "IpProtocol" : "tcp",
		    "DestinationSecurityGroupId" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGwaf" } }
		  }
		},

		"rSGwafSGwebceHttpALB": {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"FromPort" : { "Ref": "pWebceHttpWAFPort" },
				"ToPort" : { "Ref": "pWebceHttpWAFPort" },
				"GroupId" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGwaf" } },
				"IpProtocol" : "tcp",
				"SourceSecurityGroupId" : { "Ref": "rSGwebceWAFALB"}
			}
		},

		"rSGwafSGwebceHttpALBEgress": {
		  "Type" : "AWS::EC2::SecurityGroupEgress",
		  "Properties" : {
		    "FromPort" : { "Ref": "pWebceHttpWAFPort" },
		    "ToPort" : { "Ref": "pWebceHttpWAFPort" },
		    "GroupId" : { "Ref": "rSGwebceWAFALB"},
		    "IpProtocol" : "tcp",
		    "DestinationSecurityGroupId" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGwaf" } }
		  }
		},


		"rSGjob": {
			"Type" : "AWS::EC2::SecurityGroup",
			"Properties" : {
				"GroupDescription" : "Security group for job servers",
				"VpcId" : { "Ref": "pProductionVPC" },
				"Tags" :  [
					{ "Key": "Name", "Value": { "Fn::Sub": "${pFriendlyName} SGjob" } },
					{ "Key": "AppStack", "Value": { "Ref": "pAppStackName" } },
					{ "Key": "Environment", "Value": { "Ref": "pEnvironment" } }
				]
			}
		},

		"rSGjobSGjams773": {
			"Type" : "AWS::EC2::SecurityGroupEgress",
			"Properties" : {
				"FromPort" : 773,
				"ToPort" : 773,
				"GroupId" : { "Ref": "rSGjob"},
				"IpProtocol" : "tcp",
				"DestinationSecurityGroupId" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGjams" } }
			}
		},

		"rSGjamsSGjob773": {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"FromPort" : 773,
				"ToPort" : 773,
				"GroupId" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGjams" } },
				"IpProtocol" : "tcp",
				"SourceSecurityGroupId" : { "Ref": "rSGjob"}
			}
		},

		"rSGjamsSGjob77": {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"FromPort" : 77,
				"ToPort" : 77,
				"GroupId" : { "Ref": "rSGjob"},
				"IpProtocol" : "tcp",
				"SourceSecurityGroupId" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGjams" } }
			}
		},

		"rSGjobSGjams77": {
			"Type" : "AWS::EC2::SecurityGroupEgress",
			"Properties" : {
				"FromPort" : 77,
				"ToPort" : 77,
				"GroupId" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGjams" } },
				"IpProtocol" : "tcp",
				"DestinationSecurityGroupId" : { "Ref": "rSGjob"}
			}
		},

		"rSGjobELB": {
			"Type" : "AWS::EC2::SecurityGroup",
			"Properties" : {
				"GroupDescription" : "Security group for job servers ELB",
				"VpcId" : { "Ref": "pProductionVPC" },
				"Tags" :  [
					{ "Key": "Name", "Value": { "Fn::Sub": "${pFriendlyName} SGjobELB" } },
					{ "Key": "AppStack", "Value": { "Ref": "pAppStackName" } },
					{ "Key": "Environment", "Value": { "Ref": "pEnvironment" } }
				]
			}
		},

		"rSGjobELBSGjams773": {
			"Type" : "AWS::EC2::SecurityGroupEgress",
			"Properties" : {
				"FromPort" : 773,
				"ToPort" : 773,
				"GroupId" : { "Ref": "rSGjobELB"},
				"IpProtocol" : "tcp",
				"DestinationSecurityGroupId" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGjams" } }
			}
		},

		"rSGjamsSGjobELB773": {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"FromPort" : 773,
				"ToPort" : 773,
				"GroupId" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGjams" } },
				"IpProtocol" : "tcp",
				"SourceSecurityGroupId" : { "Ref": "rSGjobELB"}
			}
		},

		"rSGjamsSGjobELB77": {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"FromPort" : 77,
				"ToPort" : 77,
				"GroupId" : { "Ref": "rSGjobELB"},
				"IpProtocol" : "tcp",
				"SourceSecurityGroupId" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGjams" } }
			}
		},

		"rSGjobELBSGjams77": {
			"Type" : "AWS::EC2::SecurityGroupEgress",
			"Properties" : {
				"FromPort" : 77,
				"ToPort" : 77,
				"GroupId" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGjams" } },
				"IpProtocol" : "tcp",
				"DestinationSecurityGroupId" : { "Ref": "rSGjobELB"}
			}
		},

		"rSGjobELBSGjob77": {
			"Type" : "AWS::EC2::SecurityGroupEgress",
			"Properties" : {
				"FromPort" : 77,
				"ToPort" : 77,
				"GroupId" : { "Ref": "rSGjobELB" },
				"IpProtocol" : "tcp",
				"DestinationSecurityGroupId" : { "Ref": "rSGjob" }
			}
		},

		"rSGjobSGjobELB77": {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"FromPort" : 77,
				"ToPort" : 77,
				"GroupId" : { "Ref": "rSGjob" },
				"IpProtocol" : "tcp",
				"SourceSecurityGroupId" : { "Ref": "rSGjobELB" }
			}
		},


		"rSGws": {
			"Type" : "AWS::EC2::SecurityGroup",
			"Properties" : {
				"GroupDescription" : "Security group for webservices servers",
				"VpcId" : { "Ref": "pProductionVPC" },
				"SecurityGroupIngress": [
										{ "IpProtocol": "tcp", "FromPort": "80", "ToPort": "80", "CidrIp": { "Ref": "pAzureCNAppCIDR" } }
				],
				"SecurityGroupEgress": [
					{ "CidrIp": "0.0.0.0/0", "IpProtocol": "6", "FromPort": "80", "ToPort": "80" },
					{ "CidrIp": "0.0.0.0/0", "IpProtocol": "6", "FromPort": "443", "ToPort": "443" },
					{ "CidrIp": "0.0.0.0/0", "IpProtocol": "6", "FromPort": "1024", "ToPort": "65535" }
				],
				"Tags" :  [
					{ "Key": "Name", "Value": { "Fn::Sub": "${pFriendlyName} SGws" } },
					{ "Key": "AppStack", "Value": { "Ref": "pAppStackName" } },
					{ "Key": "Environment", "Value": { "Ref": "pEnvironment" } }
				]
			}
		},

		"rSGwsELB": {
			"Type" : "AWS::EC2::SecurityGroup",
			"Properties" : {
				"GroupDescription" : "Security group for webservices ELB",
				"VpcId" : { "Ref": "pProductionVPC" },
				"Tags" :  [
					{ "Key": "Name", "Value": { "Fn::Sub": "${pFriendlyName} SGwsELB" } },
					{ "Key": "AppStack", "Value": { "Ref": "pAppStackName" } },
					{ "Key": "Environment", "Value": { "Ref": "pEnvironment" } }
				]
			}
		},

		"rSGwsSGwsELB": {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"FromPort" : 80,
				"ToPort" : 80,
				"GroupId" : { "Ref": "rSGws"},
				"IpProtocol" : "tcp",
				"SourceSecurityGroupId" : { "Ref": "rSGwsELB" }
			}
		},

		"rSGwsSGwsELBEgress": {
		  "Type" : "AWS::EC2::SecurityGroupEgress",
		  "Properties" : {
		    "FromPort" : 80,
		    "ToPort" : 80,
		    "GroupId" : { "Ref": "rSGwsELB" },
		    "IpProtocol" : "tcp",
		    "DestinationSecurityGroupId" : { "Ref": "rSGws"}
		  }
		},

		"rSGcndotnetcodeSGwsELB": {
			"Type" : "AWS::EC2::SecurityGroupEgress",
			"Properties" : {
				"FromPort" : 80,
				"ToPort" : 80,
				"GroupId" : { "Ref": "rSGcndotnetcode"},
				"IpProtocol" : "tcp",
				"DestinationSecurityGroupId" : { "Ref": "rSGwsELB" }
			}
		},

		"rSGwsELBSGcndotnetcode": {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"FromPort" : 80,
				"ToPort" : 80,
				"GroupId" : { "Ref": "rSGwsELB"},
				"IpProtocol" : "tcp",
				"SourceSecurityGroupId" : { "Ref": "rSGcndotnetcode" }
			}
		},


		"rSGsupporttsSGwselb": {
			"Type" : "AWS::EC2::SecurityGroupEgress",
			"Properties" : {
				"FromPort" : 80,
				"ToPort" : 80,
				"GroupId" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGsupportts" } },
				"IpProtocol" : "tcp",
				"DestinationSecurityGroupId" : { "Ref": "rSGwsELB" }
			}
		},

		"rSGwselbSGsupportts": {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"FromPort" : 80,
				"ToPort" : 80,
				"GroupId" : { "Ref": "rSGwsELB" },
				"IpProtocol" : "tcp",
				"SourceSecurityGroupId" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGsupportts" } }
			}
		},


		"rSGwebauthELB": {
			"Type" : "AWS::EC2::SecurityGroup",
			"Properties" : {
				"GroupDescription" : "Security group for webauth ELB",
				"VpcId" : { "Ref": "pProductionVPC" },
				"Tags" :  [
					{ "Key": "Name", "Value": "SGwebauthELB" },
					{ "Key": "Environment", "Value": { "Ref": "pEnvironment" } }
				]
			}
		},

		"rSGwebauth": {
			"Type" : "AWS::EC2::SecurityGroup",
			"Properties" : {
				"GroupDescription" : "Security group for webauth servers",
				"VpcId" : { "Ref": "pProductionVPC" },
				"SecurityGroupEgress": [
					{ "CidrIp": "127.0.0.1/32", "IpProtocol": "icmp", "FromPort": "8", "ToPort" : "8" }
				],
				"Tags" :  [
					{ "Key": "Name", "Value": "SGwebauth" },
					{ "Key": "Environment", "Value": { "Ref": "pEnvironment" } }
				]
			}
		},

		"rSGwebauthSGwebauthELB": {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"FromPort" : 80,
				"ToPort" : 80,
				"GroupId" : { "Ref": "rSGwebauth"},
				"IpProtocol" : "tcp",
				"SourceSecurityGroupId" : { "Ref": "rSGwebauthELB" }
			}
		},

		"rSGwebauthSGwebauthELBEgress": {
		  "Type" : "AWS::EC2::SecurityGroupEgress",
		  "Properties" : {
		    "FromPort" : 80,
		    "ToPort" : 80,
		    "GroupId" : { "Ref": "rSGwebauthELB" },
		    "IpProtocol" : "tcp",
		    "DestinationSecurityGroupId" : { "Ref": "rSGwebauth"}
		  }
		},

		"rSGwebauthELBSGwafHTTP": {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"FromPort" : 80,
				"ToPort" : 80,
				"GroupId" : { "Ref": "rSGwebauthELB"},
				"IpProtocol" : "tcp",
				"SourceSecurityGroupId" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGwaf" } }
			}
		},

		"rSGwebauthELBSGwafHTTPS": {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"FromPort" : 443,
				"ToPort" : 443,
				"GroupId" : { "Ref": "rSGwebauthELB"},
				"IpProtocol" : "tcp",
				"SourceSecurityGroupId" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGwaf" } }
			}
		},

		"rSGwebauthWAFALB": {
			"Type" : "AWS::EC2::SecurityGroup",
			"Properties" : {
				"GroupDescription" : "Security group for Webauth WAF ALB",
				"VpcId" : { "Ref": "pProductionVPC" },
				"Tags" :  [
					{ "Key": "Name", "Value": { "Fn::Sub": "${pFriendlyName} SGwebauthELB" } },
					{ "Key": "AppStack", "Value": { "Ref": "pAppStackName" } },
					{ "Key": "Environment", "Value": { "Ref": "pEnvironment" } }
				]
			}
		},

		"rSGwafSGwebauthALB": {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"FromPort" : { "Ref": "pWebauthWAFPort" },
				"ToPort" : { "Ref": "pWebauthWAFPort" },
				"GroupId" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGwaf" } },
				"IpProtocol" : "tcp",
				"SourceSecurityGroupId" : { "Ref": "rSGwebauthWAFALB"}
			}
		},

		"rSGwafSGwebauthALBEgress": {
		  "Type" : "AWS::EC2::SecurityGroupEgress",
		  "Properties" : {
		    "FromPort" : { "Ref": "pWebauthWAFPort" },
		    "ToPort" : { "Ref": "pWebauthWAFPort" },
		    "GroupId" : { "Ref": "rSGwebauthWAFALB"},
		    "IpProtocol" : "tcp",
		    "DestinationSecurityGroupId" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGwaf" } }
		  }
		},


		"rSGtomcat": {
			"Type" : "AWS::EC2::SecurityGroup",
			"Properties" : {
				"GroupDescription" : "Security group for tomcat servers",
				"VpcId" : { "Ref": "pProductionVPC" },
				"SecurityGroupIngress": [
					 { "IpProtocol": "tcp", "FromPort": "8080", "ToPort": "8086", "CidrIp": { "Ref": "pAzureCNAppCIDR" } },
					 { "IpProtocol": "udp", "FromPort": "8080", "ToPort": "8086", "CidrIp": { "Ref": "pAzureCNAppCIDR" } }
				],
				"SecurityGroupEgress": [
					{ "CidrIp": "0.0.0.0/0", "IpProtocol": "6", "FromPort": "80", "ToPort": "80" },
					{ "CidrIp": "0.0.0.0/0", "IpProtocol": "6", "FromPort": "443", "ToPort": "443" },
					{ "CidrIp": "0.0.0.0/0", "IpProtocol": "6", "FromPort": "1024", "ToPort": "65535" }
				],
				"Tags" :  [
					{ "Key": "Name", "Value": { "Fn::Sub": "${pFriendlyName} SGtomcat" } },
					{ "Key": "AppStack", "Value": { "Ref": "pAppStackName" } },
					{ "Key": "Environment", "Value": { "Ref": "pEnvironment" } }
				]
			}
		},

		"rSGtomcatELB": {
			"Type" : "AWS::EC2::SecurityGroup",
			"Properties" : {
				"GroupDescription" : "Security group for tomcat ELB",
				"VpcId" : { "Ref": "pProductionVPC" },
				"Tags" :  [
					{ "Key": "Name", "Value": { "Fn::Sub": "${pFriendlyName} SGtomcatELB" } },
					{ "Key": "AppStack", "Value": { "Ref": "pAppStackName" } },
					{ "Key": "Environment", "Value": { "Ref": "pEnvironment" } }
				]
			}
		},

		"rSGtomcatSGtomcatELB": {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"FromPort" : 8080,
				"ToPort" : 8085,
				"GroupId" : { "Ref": "rSGtomcat"},
				"IpProtocol" : "tcp",
				"SourceSecurityGroupId" : { "Ref": "rSGtomcatELB" }
			}
		},

		"rSGtomcatSGtomcatELBEgress": {
		  "Type" : "AWS::EC2::SecurityGroupEgress",
		  "Properties" : {
		    "FromPort" : 8080,
		    "ToPort" : 8085,
		    "GroupId" : { "Ref": "rSGtomcatELB" },
		    "IpProtocol" : "tcp",
		    "DestinationSecurityGroupId" : { "Ref": "rSGtomcat"}
		  }
		},

		"rSGcndotnetcodeSGtomcatELB": {
			"Type" : "AWS::EC2::SecurityGroupEgress",
			"Properties" : {
				"FromPort" : 8080,
				"ToPort" : 8085,
				"GroupId" : { "Ref": "rSGcndotnetcode"},
				"IpProtocol" : "tcp",
				"DestinationSecurityGroupId" : { "Ref": "rSGtomcatELB" }
			}
		},

		"rSGtomcatELBSGcndotnetcode": {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"FromPort" : 8080,
				"ToPort" : 8085,
				"GroupId" : { "Ref": "rSGtomcatELB"},
				"IpProtocol" : "tcp",
				"SourceSecurityGroupId" : { "Ref": "rSGcndotnetcode" }
			}
		},

		"rSGsupporttsSGtomcatelb": {
			"Type" : "AWS::EC2::SecurityGroupEgress",
			"Properties" : {
				"FromPort" : 8080,
				"ToPort" : 8085,
				"GroupId" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGsupportts" } },
				"IpProtocol" : "tcp",
				"DestinationSecurityGroupId" : { "Ref": "rSGtomcatELB" }
			}
		},

		"rSGtomcatelbSGsupportts": {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"FromPort" : 8080,
				"ToPort" : 8085,
				"GroupId" : { "Ref": "rSGtomcatELB" },
				"IpProtocol" : "tcp",
				"SourceSecurityGroupId" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGsupportts" } }
			}
		},

		"rSGcndotnetcodeSGcardELB": {
			"Type" : "AWS::EC2::SecurityGroupEgress",
			"Properties" : {
				"FromPort" : 8666,
				"ToPort" : 8666,
				"GroupId" : { "Ref": "rSGcndotnetcode"},
				"IpProtocol" : "tcp",
				"DestinationSecurityGroupId" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGcardELB" } }
			}
		},


		"rSGcardELBSGcndotnetcode": {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"FromPort" : 8666,
				"ToPort" : 8666,
				"GroupId" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGcardELB" } },
				"IpProtocol" : "tcp",
				"SourceSecurityGroupId" : { "Ref": "rSGcndotnetcode" }
			}
		},

		"rSGcndotnetcodeSGcardELB8555": {
			"Type" : "AWS::EC2::SecurityGroupEgress",
			"Properties" : {
				"FromPort" : 8555,
				"ToPort" : 8555,
				"GroupId" : { "Ref": "rSGcndotnetcode"},
				"IpProtocol" : "tcp",
				"DestinationSecurityGroupId" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGcardELB" } }
			}
		},

		"rSGcardELBSGcndotnetcode8555": {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"FromPort" : 8555,
				"ToPort" : 8555,
				"GroupId" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGcardELB" } },
				"IpProtocol" : "tcp",
				"SourceSecurityGroupId" : { "Ref": "rSGcndotnetcode" }
			}
		},

		"rSGcndotnetcodeSGsqlclientPR": {
			"Type" : "AWS::EC2::SecurityGroupEgress",
			"Properties" : {
				"FromPort" : 1433,
				"ToPort" : 1433,
				"GroupId" : { "Ref": "rSGcndotnetcode"},
				"IpProtocol" : "tcp",
				"DestinationSecurityGroupId" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGsqlclient:PR" } }
			}
		},

		"rSGsqlclientSGcndotnetcodePR": {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"FromPort" : 1433,
				"ToPort" : 1433,
				"GroupId" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGsqlclient:PR" } },
				"IpProtocol" : "tcp",
				"SourceSecurityGroupId" : { "Ref": "rSGcndotnetcode" }
			}
		},

		"rSGcndotnetcodeSGsqlclientST": {
			"Type" : "AWS::EC2::SecurityGroupEgress",
			"Properties" : {
				"FromPort" : 1433,
				"ToPort" : 1433,
				"GroupId" : { "Ref": "rSGcndotnetcode"},
				"IpProtocol" : "tcp",
				"DestinationSecurityGroupId" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGsqlclient:ST" } }
			}
		},

		"rSGsqlclientSGcndotnetcodeST": {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"FromPort" : 1433,
				"ToPort" : 1433,
				"GroupId" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGsqlclient:ST" } },
				"IpProtocol" : "tcp",
				"SourceSecurityGroupId" : { "Ref": "rSGcndotnetcode" }
			}
		},

		"rSGcndotnetcodeSGstdb": {
			"Type" : "AWS::EC2::SecurityGroupEgress",
			"Properties" : {
				"FromPort" : 1433,
				"ToPort" : 1433,
				"GroupId" : { "Ref": "rSGcndotnetcode"},
				"IpProtocol" : "tcp",
				"DestinationSecurityGroupId" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGstdb" } }
			}
		},

		"rSGstdbSGcndotnetcode": {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"FromPort" : 1433,
				"ToPort" : 1433,
				"GroupId" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGstdb" } },
				"IpProtocol" : "tcp",
				"SourceSecurityGroupId" : { "Ref": "rSGcndotnetcode" }
			}
		},

		"rSGcndotnetcodeSGrsELB": {
			"Type" : "AWS::EC2::SecurityGroupEgress",
			"Properties" : {
				"FromPort" : 80,
				"ToPort" : 80,
				"GroupId" : { "Ref": "rSGcndotnetcode"},
				"IpProtocol" : "tcp",
				"DestinationSecurityGroupId" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGrsELB" } }
			}
		},

		"rSGrsELBSGcndotnetcode": {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"FromPort" : 80,
				"ToPort" : 80,
				"GroupId" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGrsELB" } },
				"IpProtocol" : "tcp",
				"SourceSecurityGroupId" : { "Ref": "rSGcndotnetcode" }
			}
		},

		"rSGcndotnetcodeSGsmtpELB": {
			"Type" : "AWS::EC2::SecurityGroupEgress",
			"Properties" : {
				"FromPort" : 25,
				"ToPort" : 25,
				"GroupId" : { "Ref": "rSGcndotnetcode"},
				"IpProtocol" : "tcp",
				"DestinationSecurityGroupId" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGsmtpELB" } }
			}
		},

		"rSGsmtpELBSGcndotnetcode": {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"FromPort" : 25,
				"ToPort" : 25,
				"GroupId" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGsmtpELB" } },
				"IpProtocol" : "tcp",
				"SourceSecurityGroupId" : { "Ref": "rSGcndotnetcode" }
			}
		},

		"rSGwebceSGrs": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"FromPort": 80,
				"ToPort": 80,
				"GroupId": { "Ref": "rSGwebce" },
				"IpProtocol": "tcp",
				"SourceSecurityGroupId": { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGrs" } }
			}
		},

		"rSGrsSGwebce": {
			"Type": "AWS::EC2::SecurityGroupEgress",
			"Properties": {
				"FromPort": 80,
				"ToPort": 80,
				"GroupId": { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGrs" } },
				"IpProtocol": "tcp",
				"DestinationSecurityGroupId": { "Ref": "rSGwebce" }
			}
		},

		"rSGwebceELBSGrs": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"FromPort": 80,
				"ToPort": 80,
				"GroupId": { "Ref": "rSGwebceELB" },
				"IpProtocol": "tcp",
				"SourceSecurityGroupId": { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGrs" } }
			}
		},

		"rSGrsSGwebceELB": {
			"Type": "AWS::EC2::SecurityGroupEgress",
			"Properties": {
				"FromPort": 80,
				"ToPort": 80,
				"GroupId": { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGrs" } },
				"IpProtocol": "tcp",
				"DestinationSecurityGroupId": { "Ref": "rSGwebceELB" }
			}
		},


		"rSGolpost": {
			"Type" : "AWS::EC2::SecurityGroup",
			"Properties" : {
				"GroupDescription" : "Security group for OLPost servers",
				"VpcId" : { "Ref": "pProductionVPC" },
				"SecurityGroupEgress": [
					{ "CidrIp": "127.0.0.1/32", "IpProtocol": "icmp", "FromPort": "8", "ToPort" : "8" }
				],
				"Tags" :  [
					{ "Key": "Name", "Value": { "Fn::Sub": "${pFriendlyName} SGolpost" } },
					{ "Key": "AppStack", "Value": { "Ref": "pAppStackName" } },
					{ "Key": "Environment", "Value": { "Ref": "pEnvironment" } }
				]
			}
		},

		"rSGcsrprivSGwebce": {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"FromPort" : "-1",
				"ToPort" : "-1",
				"GroupId" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGcsrpriv" } },
				"IpProtocol" : "-1",
				"SourceSecurityGroupId" : { "Ref": "rSGwebce" }
			}
		},

		"rSGcsrprivSGolpost": {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"FromPort" : "-1",
				"ToPort" : "-1",
				"GroupId" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGcsrpriv" } },
				"IpProtocol" : "-1",
				"SourceSecurityGroupId" : { "Ref": "rSGolpost" }
			}
		},

		"rSGcsrprivSGjob": {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"FromPort" : "-1",
				"ToPort" : "-1",
				"GroupId" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGcsrpriv" } },
				"IpProtocol" : "-1",
				"SourceSecurityGroupId" : { "Ref": "rSGjob" }
			}
		},

		"rSGcsrprivSGtomcat": {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"FromPort" : "-1",
				"ToPort" : "-1",
				"GroupId" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGcsrpriv" } },
				"IpProtocol" : "-1",
				"SourceSecurityGroupId" : { "Ref": "rSGtomcat" }
			}
		},

		"rSGcsrprivSGws": {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"FromPort" : "-1",
				"ToPort" : "-1",
				"GroupId" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGcsrpriv" } },
				"IpProtocol" : "-1",
				"SourceSecurityGroupId" : { "Ref": "rSGws" }
			}
		},

		"rSGcsrprivSGwebauth": {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"FromPort" : "-1",
				"ToPort" : "-1",
				"GroupId" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGcsrpriv" } },
				"IpProtocol" : "-1",
				"SourceSecurityGroupId" : { "Ref": "rSGwebauth" }
			}
		},


		"rALBwebceWAF": {
			"Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
			"Properties" : {
				"Scheme": "internet-facing",
				"SecurityGroups": [
					{ "Ref": "rSGwebceWAFALB" },
					{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SG000" } },
					{ "Fn::If": [ "cPublicAccess", { "Ref": "rSGcnsiteaccessOpen" }, { "Ref": "rSGcnsiteaccessRestricted"} ] }
				],
				"Subnets": [
					{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:DMZSubnetA" } },
					{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:DMZSubnetB" } }
				],
				"LoadBalancerAttributes" : [
					{ "Key" : "access_logs.s3.enabled", "Value" : "false" },
					{ "Key" : "access_logs.s3.bucket", "Value" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:S3ELBAccessLogs" } } },
					{ "Key" : "access_logs.s3.prefix", "Value" : "Logs" },
					{ "Key" : "idle_timeout.timeout_seconds", "Value": "3600"}
				],
				"Tags": [
					{ "Key": "Name", "Value": { "Fn::Sub": "${pFriendlyName} WebCE WAF ALB" } },
					{ "Key": "Role", "Value": "WebCE WAF" },
					{ "Key": "AppStack", "Value": { "Ref": "pAppStackName" } },
					{ "Key": "Environment", "Value": { "Ref": "pEnvironment" } }
				]
			}
		},

		"rALBwebceWAFListener80": {
			"Type" : "AWS::ElasticLoadBalancingV2::Listener",
			"Properties" : {
				"DefaultActions": [{
					"Type": "forward",
					"TargetGroupArn": { "Ref": "rALBwebceHttpWAFTarget" }
				}],
				"LoadBalancerArn" : { "Ref": "rALBwebceWAF" },
				"Port" : 80,
				"Protocol" : "HTTP"
			}
		},

		"rALBwebceWAFListener443": {
			"Type" : "AWS::ElasticLoadBalancingV2::Listener",
			"Properties" : {
				"DefaultActions": [{
					"Type": "forward",
					"TargetGroupArn": { "Ref": "rALBwebceWAFTarget" }
				}],
				"LoadBalancerArn" : { "Ref": "rALBwebceWAF" },
				"Port" : 443,
				"Protocol" : "HTTPS",
				"SslPolicy" : "ELBSecurityPolicy-TLS-1-2-2017-01",
				"Certificates": [
					{ "CertificateArn":
						{ "Ref": "pCommerceCertARN" }
					}
				]
			}
		},

		"rALBwebceWAFTarget": {
			"Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
			"Properties" : {
				"HealthCheckIntervalSeconds" : 10,
				"HealthCheckPath" : "/404handler/help.aspx",
				"HealthCheckPort" : "traffic-port",
				"HealthCheckProtocol" : "HTTP",
				"HealthCheckTimeoutSeconds" : 5,
				"HealthyThresholdCount" : 2,
				"Matcher" : { "HttpCode" : "200,302" },
				"Port" : { "Ref": "pWebceWAFPort" },
				"Protocol" : "HTTP",
				"Tags" : [
					{ "Key": "Name", "Value": { "Fn::Sub": "${pFriendlyName} WebCE WAF ALB Target" } },
					{ "Key": "Role", "Value": "WebCE WAF" },
					{ "Key": "AppStack", "Value": { "Ref": "pAppStackName" } },
					{ "Key": "Environment", "Value": { "Ref": "pEnvironment" } }
				],
				"Targets": [
					{ "Id": { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:WAF1" } }, "Port": { "Ref": "pWebceWAFPort" } }
				],
				"TargetGroupAttributes": [
					{
						"Key": "deregistration_delay.timeout_seconds",
						"Value": "150"
					},
					{
						"Key": "stickiness.enabled",
						"Value": "true"
					},
					{
						"Key": "stickiness.type",
						"Value": "lb_cookie"
					},
					{
						"Key": "stickiness.lb_cookie.duration_seconds",
						"Value": "3600"
					}
				],
				"UnhealthyThresholdCount" : 3,
				"VpcId" : { "Ref": "pProductionVPC" }
			}
		},

		"rALBwebceHttpWAFTarget": {
			"Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
			"Properties" : {
				"HealthCheckIntervalSeconds" : 10,
				"HealthCheckPath" : "/",
				"HealthCheckPort" : "traffic-port",
				"HealthCheckProtocol" : "HTTP",
				"HealthCheckTimeoutSeconds" : 5,
				"HealthyThresholdCount" : 2,
				"Matcher" : { "HttpCode" : "301" },
				"Port" : { "Ref": "pWebceHttpWAFPort" },
				"Protocol" : "HTTP",
				"Tags" : [
					{ "Key": "Name", "Value": { "Fn::Sub": "${pFriendlyName} WebCE HTTP WAF ALB Target" } },
					{ "Key": "Role", "Value": "WebCE WAF" },
					{ "Key": "AppStack", "Value": { "Ref": "pAppStackName" } },
					{ "Key": "Environment", "Value": { "Ref": "pEnvironment" } }
				],
				"Targets": [
					{ "Id": { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:WAF1" } }, "Port": { "Ref": "pWebceHttpWAFPort" } }
				],
				"TargetGroupAttributes": [
					{
						"Key": "deregistration_delay.timeout_seconds",
						"Value": "150"
					},
					{
						"Key": "stickiness.enabled",
						"Value": "true"
					},
					{
						"Key": "stickiness.type",
						"Value": "lb_cookie"
					},
					{
						"Key": "stickiness.lb_cookie.duration_seconds",
						"Value": "3600"
					}
				],
				"UnhealthyThresholdCount" : 3,
				"VpcId" : { "Ref": "pProductionVPC" }
			}
		},


		"rALBwebce": {
			"Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
			"Properties" : {
				"Scheme": "internal",
				"SecurityGroups": [
					{ "Ref": "rSGwebceELB" },
					{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SG000" } }
				],
				"Subnets": [{
					"Ref": "pSubnetA"
				}, {
					"Ref": "pSubnetB"
				}],
				"LoadBalancerAttributes" : [
					{ "Key" : "access_logs.s3.enabled", "Value" : "false" },
					{ "Key" : "access_logs.s3.bucket", "Value" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:S3ELBAccessLogs" } } },
					{ "Key" : "access_logs.s3.prefix", "Value" : "Logs" },
					{ "Key" : "idle_timeout.timeout_seconds", "Value": "3600"}
				],
				"Tags": [
					{ "Key": "Name", "Value": { "Fn::Sub": "${pFriendlyName} WebCE ALB" } },
					{ "Key": "Role", "Value": "WebCE" },
					{ "Key": "AppStack", "Value": { "Ref": "pAppStackName" } },
					{ "Key": "Environment", "Value": { "Ref": "pEnvironment" } }
				]
			}
		},

		"rALBwebceListenerHttp": {
			"Type" : "AWS::ElasticLoadBalancingV2::Listener",
			"Properties" : {
				"DefaultActions": [{
					"Type": "forward",
					"TargetGroupArn": { "Ref": "rALBwebceTarget404" }
				}],
				"LoadBalancerArn" : { "Ref": "rALBwebce" },
				"Port" : 80,
				"Protocol" : "HTTP"
			}
		},

		"rALBwebceListenerRuleGHttp": {
			"Type" : "AWS::ElasticLoadBalancingV2::ListenerRule",
			"Properties" : {
				"Actions": [{
					"Type": "forward",
					"TargetGroupArn": { "Ref": "rALBwebceTargetBlue" }
				}],
				"Conditions": [{
					"Field": "path-pattern",
					"Values": [ "/cashnetg/*" ]
				}],
				"ListenerArn" : { "Ref": "rALBwebceListenerHttp" },
				"Priority" : 10
			}
		},

		"rALBwebceListenerRuleHHttp": {
			"Type" : "AWS::ElasticLoadBalancingV2::ListenerRule",
			"Properties" : {
				"Actions": [{
					"Type": "forward",
					"TargetGroupArn": { "Ref": "rALBwebceTargetBlue" }
				}],
				"Conditions": [{
					"Field": "path-pattern",
					"Values": [ "/cashneth/*" ]
				}],
				"ListenerArn" : { "Ref": "rALBwebceListenerHttp" },
				"Priority" : 12
			}
		},

		"rALBwebceListenerRuleIHttp": {
			"Type" : "AWS::ElasticLoadBalancingV2::ListenerRule",
			"Properties" : {
				"Actions": [{
					"Type": "forward",
					"TargetGroupArn": { "Ref": "rALBwebceTargetGreen" }
				}],
				"Conditions": [{
					"Field": "path-pattern",
					"Values": [ "/cashneti/*" ]
				}],
				"ListenerArn" : { "Ref": "rALBwebceListenerHttp" },
				"Priority" : 20
			}
		},

		"rALBwebceListenerRuleJHttp": {
			"Type" : "AWS::ElasticLoadBalancingV2::ListenerRule",
			"Properties" : {
				"Actions": [{
					"Type": "forward",
					"TargetGroupArn": { "Ref": "rALBwebceTargetGreen" }
				}],
				"Conditions": [{
					"Field": "path-pattern",
					"Values": [ "/cashnetj/*" ]
				}],
				"ListenerArn" : { "Ref": "rALBwebceListenerHttp" },
				"Priority" : 22
			}
		},

		"rALBwebceListenerHttps": {
			"Type" : "AWS::ElasticLoadBalancingV2::Listener",
			"Properties" : {
				"DefaultActions": [{
					"Type": "forward",
					"TargetGroupArn": { "Ref": "rALBwebceTarget404" }
				}],
				"LoadBalancerArn" : { "Ref": "rALBwebce" },
				"Port" : 443,
				"Protocol" : "HTTPS",
				"SslPolicy" : "ELBSecurityPolicy-TLS-1-1-2017-01",
				"Certificates": [
					{ "CertificateArn":
						{ "Ref": "pCommerceCertARN" }
					}
				]
			}
		},

		"rALBwebceListenerRuleGHttps": {
			"Type" : "AWS::ElasticLoadBalancingV2::ListenerRule",
			"Properties" : {
				"Actions": [{
					"Type": "forward",
					"TargetGroupArn": { "Ref": "rALBwebceTargetBlue" }
				}],
				"Conditions": [{
					"Field": "path-pattern",
					"Values": [ "/cashnetg/*" ]
				}],
				"ListenerArn" : { "Ref": "rALBwebceListenerHttps" },
				"Priority" : 10
			}
		},

		"rALBwebceListenerRuleHHttps": {
			"Type" : "AWS::ElasticLoadBalancingV2::ListenerRule",
			"Properties" : {
				"Actions": [{
					"Type": "forward",
					"TargetGroupArn": { "Ref": "rALBwebceTargetBlue" }
				}],
				"Conditions": [{
					"Field": "path-pattern",
					"Values": [ "/cashneth/*" ]
				}],
				"ListenerArn" : { "Ref": "rALBwebceListenerHttps" },
				"Priority" : 12
			}
		},

		"rALBwebceListenerRuleIHttps": {
			"Type" : "AWS::ElasticLoadBalancingV2::ListenerRule",
			"Properties" : {
				"Actions": [{
					"Type": "forward",
					"TargetGroupArn": { "Ref": "rALBwebceTargetGreen" }
				}],
				"Conditions": [{
					"Field": "path-pattern",
					"Values": [ "/cashneti/*" ]
				}],
				"ListenerArn" : { "Ref": "rALBwebceListenerHttps" },
				"Priority" : 20
			}
		},

		"rALBwebceListenerRuleJHttps": {
			"Type" : "AWS::ElasticLoadBalancingV2::ListenerRule",
			"Properties" : {
				"Actions": [{
					"Type": "forward",
					"TargetGroupArn": { "Ref": "rALBwebceTargetGreen" }
				}],
				"Conditions": [{
					"Field": "path-pattern",
					"Values": [ "/cashnetj/*" ]
				}],
				"ListenerArn" : { "Ref": "rALBwebceListenerHttps" },
				"Priority" : 22
			}
		},

		"rALBwebceTargetBlue": {
			"Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
			"Properties" : {
				"HealthCheckIntervalSeconds" : 30,
				"HealthCheckPath" : "/cashnetg/",
				"HealthCheckPort" : 80,
				"HealthCheckProtocol" : "HTTP",
				"HealthCheckTimeoutSeconds" : 5,
				"HealthyThresholdCount" : 2,
				"Matcher" : { "HttpCode" : "200,302" },
				"Port" : 80,
				"Protocol" : "HTTP",
				"Tags" : [
					{ "Key": "Name", "Value": { "Fn::Sub": "${pFriendlyName} WebCE ALB Target Blue" } },
					{ "Key": "Role", "Value": "WebCE Blue" },
					{ "Key": "AppStack", "Value": { "Ref": "pAppStackName" } },
					{ "Key": "Environment", "Value": { "Ref": "pEnvironment" } }
				],
				"TargetGroupAttributes": [
					{
						"Key": "deregistration_delay.timeout_seconds",
						"Value": "150"
					},
					{
						"Key": "stickiness.enabled",
						"Value": "true"
					},
					{
						"Key": "stickiness.type",
						"Value": "lb_cookie"
					},
					{
						"Key": "stickiness.lb_cookie.duration_seconds",
						"Value": "3600"
					}
				],
				"UnhealthyThresholdCount" : 5,
				"VpcId" : { "Ref": "pProductionVPC" }
			}
		},

		"rALBwebceTargetGreen": {
			"Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
			"Properties" : {
				"HealthCheckIntervalSeconds" : 30,
				"HealthCheckPath" : "/cashneti/",
				"HealthCheckPort" : 80,
				"HealthCheckProtocol" : "HTTP",
				"HealthCheckTimeoutSeconds" : 5,
				"HealthyThresholdCount" : 2,
				"Matcher" : { "HttpCode" : "200,302" },
				"Port" : 80,
				"Protocol" : "HTTP",
				"Tags" : [
					{ "Key": "Name", "Value": { "Fn::Sub": "${pFriendlyName} WebCE ALB Target Green" } },
					{ "Key": "Role", "Value": "WebCE Green" },
					{ "Key": "AppStack", "Value": { "Ref": "pAppStackName" } },
					{ "Key": "Environment", "Value": { "Ref": "pEnvironment" } }
				],
				"TargetGroupAttributes": [
					{
						"Key": "deregistration_delay.timeout_seconds",
						"Value": "150"
					},
					{
						"Key": "stickiness.enabled",
						"Value": "true"
					},
					{
						"Key": "stickiness.type",
						"Value": "lb_cookie"
					},
					{
						"Key": "stickiness.lb_cookie.duration_seconds",
						"Value": "3600"
					}
				],
				"UnhealthyThresholdCount" : 5,
				"VpcId" : { "Ref": "pProductionVPC" }
			}
		},

		"rALBwebceTarget404": {
			"Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
			"Properties" : {
				"HealthCheckIntervalSeconds" : 30,
				"HealthCheckPath" : "/404handler/help.aspx",
				"HealthCheckPort" : 80,
				"HealthCheckProtocol" : "HTTP",
				"HealthCheckTimeoutSeconds" : 5,
				"HealthyThresholdCount" : 2,
				"Matcher" : { "HttpCode" : "200,302" },
				"Port" : 80,
				"Protocol" : "HTTP",
				"Tags" : [
					{ "Key": "Name", "Value": { "Fn::Sub": "${pFriendlyName} WebCE ALB Target 404" } },
					{ "Key": "Role", "Value": "WebCE 404" },
					{ "Key": "AppStack", "Value": { "Ref": "pAppStackName" } },
					{ "Key": "Environment", "Value": { "Ref": "pEnvironment" } }
				],
				"TargetGroupAttributes": [
					{
						"Key": "deregistration_delay.timeout_seconds",
						"Value": "30"
					},
					{
						"Key": "stickiness.enabled",
						"Value": "true"
					},
					{
						"Key": "stickiness.type",
						"Value": "lb_cookie"
					},
					{
						"Key": "stickiness.lb_cookie.duration_seconds",
						"Value": "3600"
					}
				],
				"UnhealthyThresholdCount" : 5,
				"VpcId" : { "Ref": "pProductionVPC" }
			}
		},


		"rAutoScalingConfigWebceBlue": {
			"Type": "AWS::AutoScaling::LaunchConfiguration",
			"Metadata": {
				"AWS::CloudFormation::Authentication":{
					"S3AccessCreds":{
						"type":"S3",
						"roleName":{ "Ref": "pInstanceIAMRole" },
						"buckets" : [ "cashnet-configfiles", "cashnet-software" ]
					}
				},
				"AWS::CloudFormation::Init" : {
					"config" : {
						"version": "2016-10-18-001",
						"files" : {
							"c:\\cfn\\cfn-hup.conf" : {
								"content" : { "Fn::Join" : ["", [
									"[main]\n",
									"stack=", { "Ref" : "AWS::StackId" }, "\n",
									"region=", { "Ref" : "AWS::Region" }, "\n"
								]]}
							},
							"c:\\cfn\\hooks.d\\cfn-auto-reloader.conf" : {
								"content": { "Fn::Join" : ["", [
									"[cfn-auto-reloader-hook]\n",
									"triggers=post.update\n",
									"path=Resources.rAutoScalingConfigWebceBlue.Metadata.AWS::CloudFormation::Init\n",
									"action=cfn-init.exe -v -s ", { "Ref" : "AWS::StackId" },
										" -r rAutoScalingConfigWebceBlue",
										" --region ", { "Ref" : "AWS::Region" }, "\n"
								]]}
							},
							"c:\\temp\\domainjoin.ps1": {
								"content": { "Fn::Join" : ["", [
									"Set-DefaultAWSRegion -Region ", { "Ref" : "AWS::Region" }, " \r\n",
									"Set-Variable -name instance_id -value (Invoke-Restmethod -uri http://169.254.169.254/latest/meta-data/instance-id) \r\n",
									"$params = @{\"directoryId\"=\"", { "Ref": "pDirectoryService" }, "\"; \"directoryName\"=\"", { "Ref": "pDomainName" }, "\"}\r\n",
									"New-SSMAssociation -InstanceId $instance_id -Name \"AWS-JoinDirectoryServiceDomain\" -parameters $params\r\n"
								]]}
							},
							"c:\\temp\\installers\\splunkforwarder.msi" : {
								"source" : "https://cashnet-software.s3.amazonaws.com/splunk/splunkforwarder-latest-x64.msi"
							},
							"c:\\temp\\installers\\ConfigureSplunk.ps1" : {
								"source" : "https://cashnet-software.s3.amazonaws.com/splunk/ConfigureSplunk.ps1"
							},
							"c:\\temp\\installers\\alertlogic.msi": {
								"source" : "https://cashnet-software.s3.amazonaws.com/alertlogic/al_agent-LATEST.msi"
							},
							"c:\\temp\\installers\\dsa_install.ps1": {
								"content": { "Fn::Join" : ["", [
									"[Net.ServicePointManager]::ServerCertificateValidationCallback = {$true} \r\n",
									"Start-Transcript -path \"c:\\temp\\dsa_deploy.log\" -append \r\n",
									"echo \"$(Get-Date -format T) - DSA download started\" \r\n",
									"(New-Object System.Net.WebClient).DownloadFile(\"https://",
									{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:ELBDeepSec" } },
									":443/software/agent/Windows/x86_64/\", \"c:\\temp\\dsa_agent.msi\") \r\n",
									"echo \"$(Get-Date -format T) - Downloaded File Size:\" (Get-Item \"c:\\temp\\dsa_agent.msi\").length \r\n",
									"echo \"$(Get-Date -format T) - DSA install started\" \r\n",
									"echo \"$(Get-Date -format T) - Installer Exit Code:\" (Start-Process -FilePath msiexec -ArgumentList \"/i c:\\temp\\dsa_agent.msi /qn ADDLOCAL=ALL /l*v `\"c:\\temp\\dsa_install.log`\"\" -Wait -PassThru).ExitCode \r\n",
									"echo \"$(Get-Date -format T) - DSA activation started\" \r\n",
									"Start-Sleep -s 50 \r\n",
									"& $Env:ProgramFiles\"\\Trend Micro\\Deep Security Agent\\dsa_control\" -r \r\n",
									"& $Env:ProgramFiles\"\\Trend Micro\\Deep Security Agent\\dsa_control\" -a dsm://",
									{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:ELBDeepSec" } },
									":4120/ \r\n",
									"Stop-Transcript \r\n",
									"echo \"$(Get-Date -format T) - DSA Deployment Finished\" \r\n"
								]]}
							},
							"c:\\temp\\appendDNSsearchsuffix.ps1": {
								"content": { "Fn::Join" : ["", [
									"$settings=Get-DnsClientGlobalSetting\r\n",
									"$suffixes=$settings.SuffixSearchList\r\n",
									"$suffixes+=\"", { "Ref": "pAppStackName" }, ".", { "Ref": "pDomainName" }, "\"\r\n",
									"Set-DnsClientGlobalSetting -SuffixSearchList $suffixes\r\n"
								]]}
							},
							"c:\\temp\\deploywebceblue.ps1": {
								"source" : "https://cashnet-configfiles.s3.amazonaws.com/webce/deploywebceblue_1_1.ps1"
							},
							"c:\\temp\\web.config": {
								"source" : "https://cashnet-configfiles.s3.amazonaws.com/webce/web.config"
							},
							"c:\\temp\\codebase.zip": {
								"source" : "https://cashnet-software.s3.amazonaws.com/webce/codebase.zip"
							},
							"c:\\temp\\codedeploy-agent.msi": {
								"source" : { "Fn::Sub" : "https://aws-codedeploy-${AWS::Region}.s3.amazonaws.com/latest/codedeploy-agent.msi" }
							},
							"c:\\temp\\setapppooluser.ps1": {
								"content": { "Fn::Join" : ["", [
									"Import-Module webadministration \r\n",
									"# ADD Domain service account to local IIS_IUSRS group\r\n",
									"net localgroup IIS_IUSRS /add ",
									{ "Ref": "pWebAppUser"},
									"\r\n",
									"# Set the app pool to run under that user\r\n",
									"Set-ItemProperty 'IIS:\\AppPools\\.NET v4.5 Classic' -name processModel -value @{userName=\"",
									{ "Ref": "pWebAppUser" },
									"\";password=\"",
									{ "Ref": "pWebAppPassword" },
									"\";identitytype=3} \r\n"
								]]}
							},
							"c:\\temp\\setmachineconfig.ps1": {
								"content": { "Fn::Join" : ["", [
									"# Open the machine.config file and handle it as XML\r\n",
									"$file = 'C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\Config\\machine.config'\r\n",
									"$doc = (Get-Content $file)-as [Xml]\r\n",
									"function setConfig {\r\n",
									"# Create a new appSettings section within the configuration section since it does not exist on a new build\r\n",
									"$appSettings = $doc.configuration.AppendChild($doc.CreateElement(\"appSettings\"));\r\n",
									"# Add the ServerNo key within the appSettings section, it will be last 4 characters of the instance ID\r\n",
									"$myinstance = (Invoke-Restmethod -uri http://169.254.169.254/latest/meta-data/instance-id) \r\n",
									"$myserverno = \"webce-\" + $myinstance.substring($myinstance.length -4, 4) \r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"ServerNo\")\r\n",
									"$newKey.SetAttribute(\"value\", $myserverno)\r\n",
									"# Add the DBType key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"DBType\")\r\n",
									{ "Fn::Sub": "$newKey.SetAttribute(\"value\", \"${pDBTypeKey}\")\r\n" },
									"# Add the rshostname key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"rshostname\")\r\n",
									"$newKey.SetAttribute(\"value\", \"",
									{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:RSurl" } },
									"\")\r\n",
									"# Add the cashnethost key within the appSettings section.  On webce it is a URL.  On webauth it is a hostname.\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"cashnethost\")\r\n",
									"$newKey.SetAttribute(\"value\", \"https://",
									{ "Fn::GetAtt": "rALBwebce.DNSName" },
									"\")\r\n",
									"# Add the ConnectionStrProd key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"ConnectionStrProd\")\r\n",
									"$newKey.SetAttribute(\"value\", \"Max Pool Size=5000; Connection Lifetime=450;Packet Size=4096; server=tcp:",
									{ "Ref": "pAGListener" },
									",1433; user id=", { "Ref": "pDBAppUser" }, "; password=", { "Ref": "pDBAppPassword" }, "; encrypt=yes; TrustServerCertificate=true; Database=", { "Ref": "pProdDBName" }, "\")\r\n" ,
									"# Add the ConnectionStrTrain key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"ConnectionStrTrain\")\r\n",
									"$newKey.SetAttribute(\"value\", \"Max Pool Size=5000; Connection Lifetime=450;Packet Size=4096; server=tcp:",
									{ "Ref": "pAGListener" },
									",1433; user id=", { "Ref": "pDBAppUser" }, "; password=", { "Ref": "pDBAppPassword" }, "; encrypt=yes; TrustServerCertificate=true; Database=", { "Ref": "pTrainDBName" }, "\")\r\n" ,
									"# Add the ReportingDBConnectionStrProd key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"ReportingDBConnectionStrProd\")\r\n",
									"$newKey.SetAttribute(\"value\", \"Max Pool Size=5000; Connection Lifetime=450;Packet Size=4096; server=SQLPR2; user id=",
									{ "Ref": "pDBAppUser" }, "; password=", { "Ref": "pDBAppPassword" }, "; encrypt=yes; TrustServerCertificate=true; Database=", { "Ref": "pProdDBName" }, "\")\r\n" ,
									"# Add the ReportingDBConnectionStrTrain key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"ReportingDBConnectionStrTrain\")\r\n",
									"$newKey.SetAttribute(\"value\", \"Max Pool Size=5000; Connection Lifetime=450;Packet Size=4096; server=SQLPR2; user id=",
									{ "Ref": "pDBAppUser" }, "; password=", { "Ref": "pDBAppPassword" }, "; encrypt=yes; TrustServerCertificate=true; Database=", { "Ref": "pTrainDBName" }, "\")\r\n" ,
									"# Add the legacy ConnectionStr key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"ConnectionStr\")\r\n",
									"$newKey.SetAttribute(\"value\", \"\")\r\n",
									"# Add the legacy MasterDBName key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"MasterDBName\")\r\n",
									"$newKey.SetAttribute(\"value\", \"\")\r\n",
									"# Add the ConnectionType key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"ConnectionType\")\r\n",
									"$newKey.SetAttribute(\"value\", \"1\")\r\n",
									"# Add the FilePath key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"FilePath\")\r\n",
									"$newKey.SetAttribute(\"value\", \"\\\\fileshare\\cashnet_file01_pub\\usr\\\")\r\n",
									"# Add the PathToPublicKeyRing key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"PathToPublicKeyRing\")\r\n",
									"$newKey.SetAttribute(\"value\", \"\\\\fileshare\\cashnet_file01_priv\\PGP\\cashnet.pkr\")\r\n",
									"# Add the PathToSecretKeyRing key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"PathToSecretKeyRing\")\r\n",
									"$newKey.SetAttribute(\"value\", \"\\\\fileshare\\cashnet_file01_priv\\PGP\\cashnet.skr\")\r\n",
									"# Add the PGPLicenseKey key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"PGPLicenseKey\")\r\n",
									"$newKey.SetAttribute(\"value\", \"0253696AF1B8E27F69F0B8A8CC13893347EC8B9B64906FDAEF5F95A8D108D3EE113CDC5D9CA3C1CA0B9F06E0D66A474A738F12672531B6749063C50CFD55B084B05DFBC75A4D132F84ADD152E00A31E7620BDF9026AC7348370B66C9EC2299B1CE164FBA5B3D40681613523973FC4E6390D4A33C7D4C0E02B5B5E7B134BD736A1ED52A238EB179B31FB885B098A1CC3392B32FA9246B81AA4EA06880455CB745904AE3FF3BA65C159DAFFC8CA639B10B72447BE6DBB12753FB5F8F820055FC0910FA60D4EEF62309AF9742A64D19F04713DB12CF1A3A0B52264EEE5D85173F381C5DDE0AEE7822E71B5EA8A5712205C70E282A4EAEF4471E472DB874367C36D3\")\r\n",
									"# Add the sessionState element within the system.web section\r\n",
									"$newSystemWeb = $doc.CreateElement(\"sessionState\")\r\n",
									"$doc.configuration.\"system.web\".AppendChild($newSystemWeb)\r\n",
									"$newSystemWeb.SetAttribute(\"mode\", \"SQLServer\")\r\n",
									"$newSystemWeb.SetAttribute(\"allowCustomSqlDatabase\", \"true\")\r\n",
									"$newSystemWeb.SetAttribute(\"sqlConnectionString\", \"Packet Size=4096; server=tcp:",
									{ "Ref": "pSTAGListener" },
									",1433; initial catalog=", { "Ref": "pSTDBName" }, "; user id=", { "Ref": "pSTDBUser" }, "; password=", { "Ref": "pSTDBPassword" }, "\")\r\n" ,
									"$newSystemWeb.SetAttribute(\"cookieless\", \"false\")\r\n",
									"$newSystemWeb.SetAttribute(\"timeout\", \"1200\")\r\n",
									"# Add the machineKey element within the system.web section\r\n",
									"$newSystemWeb = $doc.CreateElement(\"machineKey\")\r\n",
									"$doc.configuration.\"system.web\".AppendChild($newSystemWeb)\r\n",
									"$newSystemWeb.SetAttribute(\"validationKey\", \"962F842FCF4AC9E9FDF0C95BC42804CBA08304D2584950B057E579A29D6CA5C8124F095F2EBBA35E040959141C2C1472C698E80B80F1E3AE634EAD62E6450A1D,IsolateApps\")\r\n",
									"$newSystemWeb.SetAttribute(\"decryptionKey\", \"6F2A71E5A07911814A3D05776870EAA6AB90DCB6552F2086,IsolateApps\")\r\n",
									"$newSystemWeb.SetAttribute(\"validation\", \"SHA1\")\r\n",
									"# Add the local_addr element within the appSettings section; this one is interesting because it needs our IP address.\r\n",
									"$myip = (Invoke-Restmethod -uri http://169.254.169.254/latest/meta-data/local-ipv4)\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"local_addr\")\r\n",
									"$newKey.SetAttribute(\"value\", $myip)\r\n",
									"# Save the file\r\n",
									"$doc.save($file)\r\n",
									"}\r\n",
									"#check if config values have already been written; exit 0 if yes, else write the values\r\n",
									"if ($doc.SelectSingleNode('//add[@key=\"ServerNo\"]').Value -ne $null)\r\n",
									"{\r\n",
									"exit 0\r\n",
									"}\r\n",
									"else\r\n",
									"{\r\n",
									"setConfig\r\n",
									"}\r\n"
								]]}
							}
						},
						"commands" : {
							"03-DomainJoin": {
								"command": "powershell.exe -ExecutionPolicy unrestricted . 'c:\\temp\\domainjoin.ps1'",
								"waitAfterCompletion": "forever"
							},
							"04-install-splunk": {
								"command": "mkdir c:\\logs & c:\\temp\\installers\\splunkforwarder.msi RECEIVING_INDEXER=\"logs:9997\" MONITOR_PATH=\"C:\\LOGS\" WINEVENTLOG_SEC_ENABLE=1 WINEVENTLOG_SYS_ENABLE=1 WINEVENTLOG_APP_ENABLE=1 AGREETOLICENSE=Yes /quiet /L*v c:\\temp\\splunk_install.log",
								"waitAfterCompletion": 0
							},
							"04a-ConfigureSplunk": {
								"command": "powershell.exe -ExecutionPolicy unrestricted . 'c:\\temp\\installers\\ConfigureSplunk.ps1' 'webceblue'",
								"waitAfterCompletion": "0"
							},
							"05-InstallDeepSec": {
								"command": "powershell.exe -ExecutionPolicy unrestricted . 'c:\\temp\\installers\\dsa_install.ps1'",
								"waitAfterCompletion": "0"
							},
							"06-install-alertlogic": {
								"command": "msiexec /i c:\\temp\\installers\\alertlogic.msi prov_key=d450f7170ea98662c07e2b5bd991213ca55d96b2369b3ba901 /q",
								"waitAfterCompletion": 0
							},
							"07-disable-win-fw": {
                                "command": "powershell.exe -Command \"Get-NetFirewallProfile | Set-NetFirewallProfile -Enabled False\"",
								"waitAfterCompletion": "0"
                            },
							"09-appendDNSsearchsuffix": {
								"command": "powershell.exe -ExecutionPolicy unrestricted . 'c:\\temp\\appendDNSsearchsuffix.ps1'",
								"waitAfterCompletion": "0"
							},
							"20-DeployWebce": {
								"command": "powershell.exe -ExecutionPolicy unrestricted . 'c:\\temp\\deploywebceblue.ps1'",
								"waitAfterCompletion": "0"
							},
							"22-SetAppPoolUser": {
								"command": "powershell.exe -ExecutionPolicy unrestricted . 'c:\\temp\\setapppooluser.ps1'",
								"waitAfterCompletion": "0"
							},
							"25-SetMachineConfig": {
								"command": "powershell.exe -ExecutionPolicy unrestricted . 'c:\\temp\\setmachineconfig.ps1'",
								"waitAfterCompletion": "0"
							},
							"30-InstallCodeDeploy": {
								"command": "c:\\temp\\codedeploy-agent.msi",
								"waitAfterCompletion": "0"
							},
							"40-Signal": {
								"command": { "Fn::Sub": "cfn-signal.exe -e 0 --stack ${AWS::StackName} --resource rAutoScalingGroupWebceBlue --region ${AWS::Region}" },
								"waitAfterCompletion": "0"
							}
						},
						"services" : {
							"windows" : {
								"cfn-hup" : {
									"enabled" : "true",
									"ensureRunning" : "true",
									"files" : ["c:\\cfn\\cfn-hup.conf", "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"]
								}
							}
						}
					}
				}
			},
			"Properties": {
				"ImageId": { "Ref": "pWindowsIISAMI" },
				"InstanceType": { "Ref": "pWebInstanceType" },
				"IamInstanceProfile": { "Ref": "pInstanceIAMProfile" },
				"KeyName": { "Ref": "pEC2KeyPair" },
				"SecurityGroups": [
					{ "Ref": "rSGwebce" },
					{ "Ref": "rSGcndotnetcode" },
					{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGfileshareaccess" } },
					{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SG000" } },
					{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGdomainmember" } }
				],
				"UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
					"<script>\n",
					"C:\\Windows\\System32\\tzutil /s \"Eastern Standard Time\"\n",
					"cfn-init.exe ",
					" --stack ", { "Ref" : "AWS::StackName" },
					" --resource rAutoScalingConfigWebceBlue ",
					" --region ", { "Ref" : "AWS::Region" }, "\n",
					"</script>\n"
				]]}}
			}
		},

		"rAutoScalingGroupWebceBlue": {
			"Type": "AWS::AutoScaling::AutoScalingGroup",
			"DependsOn": "rAutoScalingConfigWebceBlue",
			"CreationPolicy": {
				"ResourceSignal": {
					"Count": { "Ref" : "pWebMinInstances" },
					"Timeout": "PT55M"
				}
			},
			"Properties": {
				"AvailabilityZones": [
					{ "Ref": "pRegionAZ1Name" },
					{ "Ref": "pRegionAZ2Name" }
				],
				"VPCZoneIdentifier": [
					{ "Ref": "pSubnetA" },
					{ "Ref": "pSubnetB" }
				],
				"LaunchConfigurationName": { "Ref": "rAutoScalingConfigWebceBlue" },
				"DesiredCapacity": { "Ref" : "pWebMinInstances" },
				"MinSize": { "Ref" : "pWebMinInstances" },
				"MaxSize": { "Ref" : "pWebMaxInstances" },
				"TargetGroupARNs": [ { "Ref": "rALBwebceTargetBlue" } ],
				"TerminationPolicies" : ["OldestInstance"],
				"HealthCheckType": "EC2",
				"HealthCheckGracePeriod": "3600",
			    "NotificationConfigurations" : [
					{
						"TopicARN" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SecurityAlarmTopic" } },
						"NotificationTypes" : [
							"autoscaling:EC2_INSTANCE_LAUNCH",
							"autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
							"autoscaling:EC2_INSTANCE_TERMINATE",
							"autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
						]
					}
				],
				"Tags": [
					{
						"Key": "Name",
						"Value": { "Fn::Join" : [ " ", [ "WebCE Blue", { "Ref": "pFriendlyName" } ] ] },
						"PropagateAtLaunch": "true"
					},
					{
						"Key": "Environment",
						"Value": { "Ref": "pEnvironment" },
						"PropagateAtLaunch": "true"
					},
					{
						"Key": "Role",
						"Value": "WebCE Blue",
						"PropagateAtLaunch": "true"
					},
					{
						"Key": "Patch Group",
						"Value": { "Ref": "pEnvironment" },
						"PropagateAtLaunch": "true"
					},
					{
						"Key": "AppStack",
						"Value": { "Ref": "pAppStackName" },
						"PropagateAtLaunch": "true"
					}
				]
			}
		},

		"rAutoScalingUpWebceBlue": {
			"Type": "AWS::AutoScaling::ScalingPolicy",
			"Properties": {
				"AdjustmentType": "ChangeInCapacity",
				"AutoScalingGroupName": {
					"Ref": "rAutoScalingGroupWebceBlue"
				},
				"Cooldown": "500",
				"ScalingAdjustment": "1"
			}
		},

		"rAutoScalingDownWebceBlue": {
			"Type": "AWS::AutoScaling::ScalingPolicy",
			"Properties": {
				"AdjustmentType": "ChangeInCapacity",
				"AutoScalingGroupName": {
					"Ref": "rAutoScalingGroupWebceBlue"
				},
				"Cooldown": "500",
				"ScalingAdjustment": "-1"
			}
		},

		"rCWAlarmHighCPUWebceBlue": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"EvaluationPeriods": "1",
				"Statistic": "Average",
				"Threshold": "60",
				"AlarmDescription": "Alarm if CPU too high or metric disappears indicating instance is down",
				"Period": "180",
				"AlarmActions": [{
					"Ref": "rAutoScalingUpWebceBlue"
				}],
				"Namespace": "AWS/EC2",
				"Dimensions": [{
					"Name": "AutoScalingGroupName",
					"Value": {
						"Ref": "rAutoScalingGroupWebceBlue"
					}
				}],
				"ComparisonOperator": "GreaterThanThreshold",
				"MetricName": "CPUUtilization"
			}
		},

		"rCWAlarmLowCPUWebceBlue": {
			"Type": "AWS::CloudWatch::Alarm",
			"DependsOn": "rAutoScalingGroupWebceBlue",
			"Properties": {
				"EvaluationPeriods": "1",
				"Statistic": "Average",
				"Threshold": "15",
				"AlarmDescription": "Alarm if CPU too too, remove a webserver",
				"Period": "300",
				"AlarmActions": [{
					"Ref": "rAutoScalingDownWebceBlue"
				}],
				"Namespace": "AWS/EC2",
				"Dimensions": [{
					"Name": "AutoScalingGroupName",
					"Value": {
						"Ref": "rAutoScalingGroupWebceBlue"
					}
				}],
				"ComparisonOperator": "LessThanThreshold",
				"MetricName": "CPUUtilization"
			}
		},

		"rCodeDeployGroupWebceBlue": {
			"Type" : "AWS::CodeDeploy::DeploymentGroup",
			"DependsOn": [ "rCodeDeployGroup404handler" ],
			"Properties" : {
				"ApplicationName" : "webce-blue",
				"AutoScalingGroups" : [ { "Ref": "rAutoScalingGroupWebceBlue" } ],
				"DeploymentConfigName" : "CodeDeployDefault.OneAtATime",
				"DeploymentGroupName" : { "Fn::Sub": "WebCEblue-${pFriendlyName}" },
				"ServiceRoleArn" : { "Ref": "pCodeDeployServiceRoleArn" },
				"DeploymentStyle": {
					"DeploymentOption": "WITH_TRAFFIC_CONTROL",
					"DeploymentType": "IN_PLACE"
				},
				"LoadBalancerInfo" : {
					"TargetGroupInfoList" : [ { "Name": { "Fn::GetAtt": ["rALBwebceTargetBlue", "TargetGroupName"] } } ]
				},
				"Deployment" : {
					"Description" : "Initial WebCE Blue Deployment",
					"Revision" : {
						"RevisionType" : "S3",
						"S3Location" : {
							"Bucket" : "cashnet-codedeploy",
							"Key" : "webce-blue.zip",
							"BundleType" : "Zip"
						}
					}
				}
			}
		},


		"rAutoScalingConfigWebceGreen": {
			"Type": "AWS::AutoScaling::LaunchConfiguration",
			"Metadata": {
				"AWS::CloudFormation::Authentication":{
					"S3AccessCreds":{
						"type":"S3",
						"roleName":{ "Ref": "pInstanceIAMRole" },
						"buckets" : [ "cashnet-configfiles", "cashnet-software" ]
					}
				},
				"AWS::CloudFormation::Init" : {
					"config" : {
						"version": "2016-10-18-001",
						"files" : {
							"c:\\cfn\\cfn-hup.conf" : {
								"content" : { "Fn::Join" : ["", [
									"[main]\n",
									"stack=", { "Ref" : "AWS::StackId" }, "\n",
									"region=", { "Ref" : "AWS::Region" }, "\n"
								]]}
							},
							"c:\\cfn\\hooks.d\\cfn-auto-reloader.conf" : {
								"content": { "Fn::Join" : ["", [
									"[cfn-auto-reloader-hook]\n",
									"triggers=post.update\n",
									"path=Resources.rAutoScalingConfigWebceGreen.Metadata.AWS::CloudFormation::Init\n",
									"action=cfn-init.exe -v -s ", { "Ref" : "AWS::StackId" },
										" -r rAutoScalingConfigWebceGreen",
										" --region ", { "Ref" : "AWS::Region" }, "\n"
								]]}
							},
							"c:\\temp\\domainjoin.ps1": {
								"content": { "Fn::Join" : ["", [
									"Set-DefaultAWSRegion -Region ", { "Ref" : "AWS::Region" }, " \r\n",
									"Set-Variable -name instance_id -value (Invoke-Restmethod -uri http://169.254.169.254/latest/meta-data/instance-id) \r\n",
									"$params = @{\"directoryId\"=\"", { "Ref": "pDirectoryService" }, "\"; \"directoryName\"=\"", { "Ref": "pDomainName" }, "\"}\r\n",
									"New-SSMAssociation -InstanceId $instance_id -Name \"AWS-JoinDirectoryServiceDomain\" -parameters $params\r\n"
								]]}
							},
							"c:\\temp\\installers\\splunkforwarder.msi" : {
								"source" : "https://cashnet-software.s3.amazonaws.com/splunk/splunkforwarder-latest-x64.msi"
							},
							"c:\\temp\\installers\\ConfigureSplunk.ps1" : {
								"source" : "https://cashnet-software.s3.amazonaws.com/splunk/ConfigureSplunk.ps1"
							},
							"c:\\temp\\installers\\alertlogic.msi": {
								"source" : "https://cashnet-software.s3.amazonaws.com/alertlogic/al_agent-LATEST.msi"
							},
							"c:\\temp\\installers\\dsa_install.ps1": {
								"content": { "Fn::Join" : ["", [
									"[Net.ServicePointManager]::ServerCertificateValidationCallback = {$true} \r\n",
									"Start-Transcript -path \"c:\\temp\\dsa_deploy.log\" -append \r\n",
									"echo \"$(Get-Date -format T) - DSA download started\" \r\n",
									"(New-Object System.Net.WebClient).DownloadFile(\"https://",
									{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:ELBDeepSec" } },
									":443/software/agent/Windows/x86_64/\", \"c:\\temp\\dsa_agent.msi\") \r\n",
									"echo \"$(Get-Date -format T) - Downloaded File Size:\" (Get-Item \"c:\\temp\\dsa_agent.msi\").length \r\n",
									"echo \"$(Get-Date -format T) - DSA install started\" \r\n",
									"echo \"$(Get-Date -format T) - Installer Exit Code:\" (Start-Process -FilePath msiexec -ArgumentList \"/i c:\\temp\\dsa_agent.msi /qn ADDLOCAL=ALL /l*v `\"c:\\temp\\dsa_install.log`\"\" -Wait -PassThru).ExitCode \r\n",
									"echo \"$(Get-Date -format T) - DSA activation started\" \r\n",
									"Start-Sleep -s 50 \r\n",
									"& $Env:ProgramFiles\"\\Trend Micro\\Deep Security Agent\\dsa_control\" -r \r\n",
									"& $Env:ProgramFiles\"\\Trend Micro\\Deep Security Agent\\dsa_control\" -a dsm://",
									{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:ELBDeepSec" } },
									":4120/ \r\n",
									"Stop-Transcript \r\n",
									"echo \"$(Get-Date -format T) - DSA Deployment Finished\" \r\n"
								]]}
							},
							"c:\\temp\\appendDNSsearchsuffix.ps1": {
								"content": { "Fn::Join" : ["", [
									"$settings=Get-DnsClientGlobalSetting\r\n",
									"$suffixes=$settings.SuffixSearchList\r\n",
									"$suffixes+=\"", { "Ref": "pAppStackName" }, ".", { "Ref": "pDomainName" }, "\"\r\n",
									"Set-DnsClientGlobalSetting -SuffixSearchList $suffixes\r\n"
								]]}
							},
							"c:\\temp\\deploywebcegreen.ps1": {
								"source" : "https://cashnet-configfiles.s3.amazonaws.com/webce/deploywebcegreen_1_1.ps1"
							},
							"c:\\temp\\web.config": {
								"source" : "https://cashnet-configfiles.s3.amazonaws.com/webce/web.config"
							},
							"c:\\temp\\codebase.zip": {
								"source" : "https://cashnet-software.s3.amazonaws.com/webce/codebase.zip"
							},
							"c:\\temp\\codedeploy-agent.msi": {
								"source" : { "Fn::Sub" : "https://aws-codedeploy-${AWS::Region}.s3.amazonaws.com/latest/codedeploy-agent.msi" }
							},
							"c:\\temp\\setapppooluser.ps1": {
								"content": { "Fn::Join" : ["", [
									"Import-Module webadministration \r\n",
									"# ADD Domain service account to local IIS_IUSRS group\r\n",
									"net localgroup IIS_IUSRS /add ",
									{ "Ref": "pWebAppUser"},
									"\r\n",
									"# Set the app pool to run under that user\r\n",
									"Set-ItemProperty 'IIS:\\AppPools\\.NET v4.5 Classic' -name processModel -value @{userName=\"",
									{ "Ref": "pWebAppUser" },
									"\";password=\"",
									{ "Ref": "pWebAppPassword" },
									"\";identitytype=3} \r\n"
								]]}
							},
							"c:\\temp\\setmachineconfig.ps1": {
								"content": { "Fn::Join" : ["", [
									"# Open the machine.config file and handle it as XML\r\n",
									"$file = 'C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\Config\\machine.config'\r\n",
									"$doc = (Get-Content $file)-as [Xml]\r\n",
									"function setConfig {\r\n",
									"# Create a new appSettings section within the configuration section since it does not exist on a new build\r\n",
									"$appSettings = $doc.configuration.AppendChild($doc.CreateElement(\"appSettings\"));\r\n",
									"# Add the ServerNo key within the appSettings section, it will be last 4 characters of the instance ID\r\n",
									"$myinstance = (Invoke-Restmethod -uri http://169.254.169.254/latest/meta-data/instance-id) \r\n",
									"$myserverno = \"webce-\" + $myinstance.substring($myinstance.length -4, 4) \r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"ServerNo\")\r\n",
									"$newKey.SetAttribute(\"value\", $myserverno)\r\n",
									"# Add the DBType key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"DBType\")\r\n",
									{ "Fn::Sub": "$newKey.SetAttribute(\"value\", \"${pDBTypeKey}\")\r\n" },
									"# Add the rshostname key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"rshostname\")\r\n",
									"$newKey.SetAttribute(\"value\", \"",
									{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:RSurl" } },
									"\")\r\n",
									"# Add the cashnethost key within the appSettings section.  On webce it is a URL.  On webauth it is a hostname.\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"cashnethost\")\r\n",
									"$newKey.SetAttribute(\"value\", \"https://",
									{ "Fn::GetAtt": "rALBwebce.DNSName" },
									"\")\r\n",
									"# Add the ConnectionStrProd key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"ConnectionStrProd\")\r\n",
									"$newKey.SetAttribute(\"value\", \"Max Pool Size=5000; Connection Lifetime=450;Packet Size=4096; server=tcp:",
									{ "Ref": "pAGListener" },
									",1433; user id=", { "Ref": "pDBAppUser" }, "; password=", { "Ref": "pDBAppPassword" }, "; encrypt=yes; TrustServerCertificate=true; Database=", { "Ref": "pProdDBName" }, "\")\r\n" ,
									"# Add the ConnectionStrTrain key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"ConnectionStrTrain\")\r\n",
									"$newKey.SetAttribute(\"value\", \"Max Pool Size=5000; Connection Lifetime=450;Packet Size=4096; server=tcp:",
									{ "Ref": "pAGListener" },
									",1433; user id=", { "Ref": "pDBAppUser" }, "; password=", { "Ref": "pDBAppPassword" }, "; encrypt=yes; TrustServerCertificate=true; Database=", { "Ref": "pTrainDBName" }, "\")\r\n" ,
									"# Add the ReportingDBConnectionStrProd key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"ReportingDBConnectionStrProd\")\r\n",
									"$newKey.SetAttribute(\"value\", \"Max Pool Size=5000; Connection Lifetime=450;Packet Size=4096; server=SQLPR2; user id=",
									{ "Ref": "pDBAppUser" }, "; password=", { "Ref": "pDBAppPassword" }, "; encrypt=yes; TrustServerCertificate=true; Database=", { "Ref": "pProdDBName" }, "\")\r\n" ,
									"# Add the ReportingDBConnectionStrTrain key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"ReportingDBConnectionStrTrain\")\r\n",
									"$newKey.SetAttribute(\"value\", \"Max Pool Size=5000; Connection Lifetime=450;Packet Size=4096; server=SQLPR2; user id=",
									{ "Ref": "pDBAppUser" }, "; password=", { "Ref": "pDBAppPassword" }, "; encrypt=yes; TrustServerCertificate=true; Database=", { "Ref": "pTrainDBName" }, "\")\r\n" ,
									"# Add the legacy ConnectionStr key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"ConnectionStr\")\r\n",
									"$newKey.SetAttribute(\"value\", \"\")\r\n",
									"# Add the legacy MasterDBName key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"MasterDBName\")\r\n",
									"$newKey.SetAttribute(\"value\", \"\")\r\n",
									"# Add the ConnectionType key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"ConnectionType\")\r\n",
									"$newKey.SetAttribute(\"value\", \"1\")\r\n",
									"# Add the FilePath key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"FilePath\")\r\n",
									"$newKey.SetAttribute(\"value\", \"\\\\fileshare\\cashnet_file01_pub\\usr\\\")\r\n",
									"# Add the PathToPublicKeyRing key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"PathToPublicKeyRing\")\r\n",
									"$newKey.SetAttribute(\"value\", \"\\\\fileshare\\cashnet_file01_priv\\PGP\\cashnet.pkr\")\r\n",
									"# Add the PathToSecretKeyRing key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"PathToSecretKeyRing\")\r\n",
									"$newKey.SetAttribute(\"value\", \"\\\\fileshare\\cashnet_file01_priv\\PGP\\cashnet.skr\")\r\n",
									"# Add the PGPLicenseKey key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"PGPLicenseKey\")\r\n",
									"$newKey.SetAttribute(\"value\", \"0253696AF1B8E27F69F0B8A8CC13893347EC8B9B64906FDAEF5F95A8D108D3EE113CDC5D9CA3C1CA0B9F06E0D66A474A738F12672531B6749063C50CFD55B084B05DFBC75A4D132F84ADD152E00A31E7620BDF9026AC7348370B66C9EC2299B1CE164FBA5B3D40681613523973FC4E6390D4A33C7D4C0E02B5B5E7B134BD736A1ED52A238EB179B31FB885B098A1CC3392B32FA9246B81AA4EA06880455CB745904AE3FF3BA65C159DAFFC8CA639B10B72447BE6DBB12753FB5F8F820055FC0910FA60D4EEF62309AF9742A64D19F04713DB12CF1A3A0B52264EEE5D85173F381C5DDE0AEE7822E71B5EA8A5712205C70E282A4EAEF4471E472DB874367C36D3\")\r\n",
									"# Add the sessionState element within the system.web section\r\n",
									"$newSystemWeb = $doc.CreateElement(\"sessionState\")\r\n",
									"$doc.configuration.\"system.web\".AppendChild($newSystemWeb)\r\n",
									"$newSystemWeb.SetAttribute(\"mode\", \"SQLServer\")\r\n",
									"$newSystemWeb.SetAttribute(\"allowCustomSqlDatabase\", \"true\")\r\n",
									"$newSystemWeb.SetAttribute(\"sqlConnectionString\", \"Packet Size=4096; server=tcp:",
									{ "Ref": "pSTAGListener" },
									",1433; initial catalog=", { "Ref": "pSTDBName" }, "; user id=", { "Ref": "pSTDBUser" }, "; password=", { "Ref": "pSTDBPassword" }, "\")\r\n" ,
									"$newSystemWeb.SetAttribute(\"cookieless\", \"false\")\r\n",
									"$newSystemWeb.SetAttribute(\"timeout\", \"1200\")\r\n",
									"# Add the machineKey element within the system.web section\r\n",
									"$newSystemWeb = $doc.CreateElement(\"machineKey\")\r\n",
									"$doc.configuration.\"system.web\".AppendChild($newSystemWeb)\r\n",
									"$newSystemWeb.SetAttribute(\"validationKey\", \"962F842FCF4AC9E9FDF0C95BC42804CBA08304D2584950B057E579A29D6CA5C8124F095F2EBBA35E040959141C2C1472C698E80B80F1E3AE634EAD62E6450A1D,IsolateApps\")\r\n",
									"$newSystemWeb.SetAttribute(\"decryptionKey\", \"6F2A71E5A07911814A3D05776870EAA6AB90DCB6552F2086,IsolateApps\")\r\n",
									"$newSystemWeb.SetAttribute(\"validation\", \"SHA1\")\r\n",
									"# Add the local_addr element within the appSettings section; this one is interesting because it needs our IP address.\r\n",
									"$myip = (Invoke-Restmethod -uri http://169.254.169.254/latest/meta-data/local-ipv4)\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"local_addr\")\r\n",
									"$newKey.SetAttribute(\"value\", $myip)\r\n",
									"# Save the file\r\n",
									"$doc.save($file)\r\n",
									"}\r\n",
									"#check if config values have already been written; exit 0 if yes, else write the values\r\n",
									"if ($doc.SelectSingleNode('//add[@key=\"ServerNo\"]').Value -ne $null)\r\n",
									"{\r\n",
									"exit 0\r\n",
									"}\r\n",
									"else\r\n",
									"{\r\n",
									"setConfig\r\n",
									"}\r\n"
								]]}
							}
						},
						"commands" : {
							"03-DomainJoin": {
								"command": "powershell.exe -ExecutionPolicy unrestricted . 'c:\\temp\\domainjoin.ps1'",
								"waitAfterCompletion": "forever"
							},
							"04-install-splunk": {
								"command": "mkdir c:\\logs & c:\\temp\\installers\\splunkforwarder.msi RECEIVING_INDEXER=\"logs:9997\" MONITOR_PATH=\"C:\\LOGS\" WINEVENTLOG_SEC_ENABLE=1 WINEVENTLOG_SYS_ENABLE=1 WINEVENTLOG_APP_ENABLE=1 AGREETOLICENSE=Yes /quiet /L*v c:\\temp\\splunk_install.log",
								"waitAfterCompletion": 0
							},
							"04a-ConfigureSplunk": {
								"command": "powershell.exe -ExecutionPolicy unrestricted . 'c:\\temp\\installers\\ConfigureSplunk.ps1' 'webcegreen'",
								"waitAfterCompletion": "0"
							},
							"05-InstallDeepSec": {
								"command": "powershell.exe -ExecutionPolicy unrestricted . 'c:\\temp\\installers\\dsa_install.ps1'",
								"waitAfterCompletion": "0"
							},
							"06-install-alertlogic": {
								"command": "msiexec /i c:\\temp\\installers\\alertlogic.msi prov_key=d450f7170ea98662c07e2b5bd991213ca55d96b2369b3ba901 /q",
								"waitAfterCompletion": 0
							},
							"07-disable-win-fw": {
                                "command": "powershell.exe -Command \"Get-NetFirewallProfile | Set-NetFirewallProfile -Enabled False\"",
								"waitAfterCompletion": "0"
                            },
							"09-appendDNSsearchsuffix": {
								"command": "powershell.exe -ExecutionPolicy unrestricted . 'c:\\temp\\appendDNSsearchsuffix.ps1'",
								"waitAfterCompletion": "0"
							},
							"20-DeployWebce": {
								"command": "powershell.exe -ExecutionPolicy unrestricted . 'c:\\temp\\deploywebcegreen.ps1'",
								"waitAfterCompletion": "0"
							},
							"22-SetAppPoolUser": {
								"command": "powershell.exe -ExecutionPolicy unrestricted . 'c:\\temp\\setapppooluser.ps1'",
								"waitAfterCompletion": "0"
							},
							"25-SetMachineConfig": {
								"command": "powershell.exe -ExecutionPolicy unrestricted . 'c:\\temp\\setmachineconfig.ps1'",
								"waitAfterCompletion": "0"
							},
							"30-InstallCodeDeploy": {
								"command": "c:\\temp\\codedeploy-agent.msi",
								"waitAfterCompletion": "0"
							},
							"40-Signal": {
								"command": { "Fn::Sub": "cfn-signal.exe -e 0 --stack ${AWS::StackName} --resource rAutoScalingGroupWebceGreen --region ${AWS::Region}" },
								"waitAfterCompletion": "0"
							}
						},
						"services" : {
							"windows" : {
								"cfn-hup" : {
									"enabled" : "true",
									"ensureRunning" : "true",
									"files" : ["c:\\cfn\\cfn-hup.conf", "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"]
								}
							}
						}
					}
				}
			},
			"Properties": {
				"ImageId": { "Ref": "pWindowsIISAMI" },
				"InstanceType": { "Ref": "pWebInstanceType" },
				"IamInstanceProfile": { "Ref": "pInstanceIAMProfile" },
				"KeyName": { "Ref": "pEC2KeyPair" },
				"SecurityGroups": [
					{ "Ref": "rSGwebce" },
					{ "Ref": "rSGcndotnetcode" },
					{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGfileshareaccess" } },
					{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SG000" } },
					{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGdomainmember" } }
				],
				"UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
					"<script>\n",
					"C:\\Windows\\System32\\tzutil /s \"Eastern Standard Time\"\n",
					"cfn-init.exe ",
					" --stack ", { "Ref" : "AWS::StackName" },
					" --resource rAutoScalingConfigWebceGreen ",
					" --region ", { "Ref" : "AWS::Region" }, "\n",
					"</script>\n"
				]]}}
			}
		},

		"rAutoScalingGroupWebceGreen": {
			"Type": "AWS::AutoScaling::AutoScalingGroup",
			"DependsOn": "rAutoScalingConfigWebceGreen",
			"CreationPolicy": {
				"ResourceSignal": {
					"Count": { "Ref" : "pWebMinInstances" },
					"Timeout": "PT55M"
				}
			},
			"Properties": {
				"AvailabilityZones": [
					{ "Ref": "pRegionAZ1Name" },
					{ "Ref": "pRegionAZ2Name" }
				],
				"VPCZoneIdentifier": [
					{ "Ref": "pSubnetA" },
					{ "Ref": "pSubnetB" }
				],
				"LaunchConfigurationName": { "Ref": "rAutoScalingConfigWebceGreen" },
				"DesiredCapacity": { "Ref" : "pWebMinInstances" },
				"MinSize": { "Ref" : "pWebMinInstances" },
				"MaxSize": { "Ref" : "pWebMaxInstances" },
				"TargetGroupARNs": [ { "Ref": "rALBwebceTargetGreen" } ],
				"TerminationPolicies" : ["OldestInstance"],
				"HealthCheckType": "EC2",
				"HealthCheckGracePeriod": "3600",
			    "NotificationConfigurations" : [
					{
						"TopicARN" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SecurityAlarmTopic" } },
						"NotificationTypes" : [
							"autoscaling:EC2_INSTANCE_LAUNCH",
							"autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
							"autoscaling:EC2_INSTANCE_TERMINATE",
							"autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
						]
					}
				],
				"Tags": [
					{
						"Key": "Name",
						"Value": { "Fn::Join" : [ " ", [ "WebCE Green", { "Ref": "pFriendlyName" } ] ] },
						"PropagateAtLaunch": "true"
					},
					{
						"Key": "Environment",
						"Value": { "Ref": "pEnvironment" },
						"PropagateAtLaunch": "true"
					},
					{
						"Key": "Role",
						"Value": "WebCE Green",
						"PropagateAtLaunch": "true"
					},
					{
						"Key": "Patch Group",
						"Value": { "Ref": "pEnvironment" },
						"PropagateAtLaunch": "true"
					},
					{
						"Key": "AppStack",
						"Value": { "Ref": "pAppStackName" },
						"PropagateAtLaunch": "true"
					}
				]
			}
		},

		"rAutoScalingUpWebceGreen": {
			"Type": "AWS::AutoScaling::ScalingPolicy",
			"Properties": {
				"AdjustmentType": "ChangeInCapacity",
				"AutoScalingGroupName": {
					"Ref": "rAutoScalingGroupWebceGreen"
				},
				"Cooldown": "500",
				"ScalingAdjustment": "1"
			}
		},

		"rAutoScalingDownWebceGreen": {
			"Type": "AWS::AutoScaling::ScalingPolicy",
			"Properties": {
				"AdjustmentType": "ChangeInCapacity",
				"AutoScalingGroupName": {
					"Ref": "rAutoScalingGroupWebceGreen"
				},
				"Cooldown": "500",
				"ScalingAdjustment": "-1"
			}
		},

		"rCWAlarmHighCPUWebceGreen": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"EvaluationPeriods": "1",
				"Statistic": "Average",
				"Threshold": "60",
				"AlarmDescription": "Alarm if CPU too high or metric disappears indicating instance is down",
				"Period": "180",
				"AlarmActions": [{
					"Ref": "rAutoScalingUpWebceGreen"
				}],
				"Namespace": "AWS/EC2",
				"Dimensions": [{
					"Name": "AutoScalingGroupName",
					"Value": {
						"Ref": "rAutoScalingGroupWebceGreen"
					}
				}],
				"ComparisonOperator": "GreaterThanThreshold",
				"MetricName": "CPUUtilization"
			}
		},

		"rCWAlarmLowCPUWebceGreen": {
			"Type": "AWS::CloudWatch::Alarm",
			"DependsOn": "rAutoScalingGroupWebceGreen",
			"Properties": {
				"EvaluationPeriods": "1",
				"Statistic": "Average",
				"Threshold": "15",
				"AlarmDescription": "Alarm if CPU too too, remove a webserver",
				"Period": "300",
				"AlarmActions": [{
					"Ref": "rAutoScalingDownWebceGreen"
				}],
				"Namespace": "AWS/EC2",
				"Dimensions": [{
					"Name": "AutoScalingGroupName",
					"Value": {
						"Ref": "rAutoScalingGroupWebceGreen"
					}
				}],
				"ComparisonOperator": "LessThanThreshold",
				"MetricName": "CPUUtilization"
			}
		},


		"rCodeDeployGroupWebceGreen": {
			"Type" : "AWS::CodeDeploy::DeploymentGroup",
			"DependsOn": [ "rCodeDeployGroup404handler" ],
			"Properties" : {
				"ApplicationName" : "webce-green",
				"AutoScalingGroups" : [ { "Ref": "rAutoScalingGroupWebceGreen" } ],
				"DeploymentConfigName" : "CodeDeployDefault.OneAtATime",
				"DeploymentGroupName" : { "Fn::Sub": "WebCEgreen-${pFriendlyName}" },
				"ServiceRoleArn" : { "Ref": "pCodeDeployServiceRoleArn" },
				"DeploymentStyle": {
					"DeploymentOption": "WITH_TRAFFIC_CONTROL",
					"DeploymentType": "IN_PLACE"
				},
				"LoadBalancerInfo" : {
					"TargetGroupInfoList" : [ { "Name": { "Fn::GetAtt": ["rALBwebceTargetGreen", "TargetGroupName"] } } ]
				},
				"Deployment" : {
					"Description" : "Initial WebCE Green Deployment",
					"Revision" : {
						"RevisionType" : "S3",
						"S3Location" : {
							"Bucket" : "cashnet-codedeploy",
							"Key" : "webce-green.zip",
							"BundleType" : "Zip"
						}
					}
				}
			}
		},

		"rAutoScalingConfigWebce404": {
			"Type": "AWS::AutoScaling::LaunchConfiguration",
			"Metadata": {
				"AWS::CloudFormation::Authentication":{
					"S3AccessCreds":{
						"type":"S3",
						"roleName":{ "Ref": "pInstanceIAMRole" },
						"buckets" : [ "cashnet-configfiles", "cashnet-software" ]
					}
				},
				"AWS::CloudFormation::Init" : {
					"config" : {
						"version": "2016-10-18-001",
						"files" : {
							"c:\\cfn\\cfn-hup.conf" : {
								"content" : { "Fn::Join" : ["", [
									"[main]\n",
									"stack=", { "Ref" : "AWS::StackId" }, "\n",
									"region=", { "Ref" : "AWS::Region" }, "\n"
								]]}
							},
							"c:\\cfn\\hooks.d\\cfn-auto-reloader.conf" : {
								"content": { "Fn::Join" : ["", [
									"[cfn-auto-reloader-hook]\n",
									"triggers=post.update\n",
									"path=Resources.rAutoScalingConfigWebce404.Metadata.AWS::CloudFormation::Init\n",
									"action=cfn-init.exe -v -s ", { "Ref" : "AWS::StackId" },
										" -r rAutoScalingConfigWebce404",
										" --region ", { "Ref" : "AWS::Region" }, "\n"
								]]}
							},
							"c:\\temp\\domainjoin.ps1": {
								"content": { "Fn::Join" : ["", [
									"Set-DefaultAWSRegion -Region ", { "Ref" : "AWS::Region" }, " \r\n",
									"Set-Variable -name instance_id -value (Invoke-Restmethod -uri http://169.254.169.254/latest/meta-data/instance-id) \r\n",
									"$params = @{\"directoryId\"=\"", { "Ref": "pDirectoryService" }, "\"; \"directoryName\"=\"", { "Ref": "pDomainName" }, "\"}\r\n",
									"New-SSMAssociation -InstanceId $instance_id -Name \"AWS-JoinDirectoryServiceDomain\" -parameters $params\r\n"
								]]}
							},
							"c:\\temp\\installers\\splunkforwarder.msi" : {
								"source" : "https://cashnet-software.s3.amazonaws.com/splunk/splunkforwarder-latest-x64.msi"
							},
							"c:\\temp\\installers\\ConfigureSplunk.ps1" : {
								"source" : "https://cashnet-software.s3.amazonaws.com/splunk/ConfigureSplunk.ps1"
							},
							"c:\\temp\\installers\\alertlogic.msi": {
								"source" : "https://cashnet-software.s3.amazonaws.com/alertlogic/al_agent-LATEST.msi"
							},
							"c:\\temp\\installers\\dsa_install.ps1": {
								"content": { "Fn::Join" : ["", [
									"[Net.ServicePointManager]::ServerCertificateValidationCallback = {$true} \r\n",
									"Start-Transcript -path \"c:\\temp\\dsa_deploy.log\" -append \r\n",
									"echo \"$(Get-Date -format T) - DSA download started\" \r\n",
									"(New-Object System.Net.WebClient).DownloadFile(\"https://",
									{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:ELBDeepSec" } },
									":443/software/agent/Windows/x86_64/\", \"c:\\temp\\dsa_agent.msi\") \r\n",
									"echo \"$(Get-Date -format T) - Downloaded File Size:\" (Get-Item \"c:\\temp\\dsa_agent.msi\").length \r\n",
									"echo \"$(Get-Date -format T) - DSA install started\" \r\n",
									"echo \"$(Get-Date -format T) - Installer Exit Code:\" (Start-Process -FilePath msiexec -ArgumentList \"/i c:\\temp\\dsa_agent.msi /qn ADDLOCAL=ALL /l*v `\"c:\\temp\\dsa_install.log`\"\" -Wait -PassThru).ExitCode \r\n",
									"echo \"$(Get-Date -format T) - DSA activation started\" \r\n",
									"Start-Sleep -s 50 \r\n",
									"& $Env:ProgramFiles\"\\Trend Micro\\Deep Security Agent\\dsa_control\" -r \r\n",
									"& $Env:ProgramFiles\"\\Trend Micro\\Deep Security Agent\\dsa_control\" -a dsm://",
									{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:ELBDeepSec" } },
									":4120/ \r\n",
									"Stop-Transcript \r\n",
									"echo \"$(Get-Date -format T) - DSA Deployment Finished\" \r\n"
								]]}
							},
							"c:\\temp\\appendDNSsearchsuffix.ps1": {
								"content": { "Fn::Join" : ["", [
									"$settings=Get-DnsClientGlobalSetting\r\n",
									"$suffixes=$settings.SuffixSearchList\r\n",
									"$suffixes+=\"", { "Ref": "pAppStackName" }, ".", { "Ref": "pDomainName" }, "\"\r\n",
									"Set-DnsClientGlobalSetting -SuffixSearchList $suffixes\r\n"
								]]}
							},
							"c:\\temp\\deploywebce404.ps1": {
								"source" : "https://cashnet-configfiles.s3.amazonaws.com/webce/deploywebce404.ps1"
							},
							"c:\\temp\\web.config": {
								"source" : "https://cashnet-configfiles.s3.amazonaws.com/webce/web.config"
							},
							"c:\\vol\\websites\\commerce.cashnet.com\\favicon.ico": {
								"source" : "https://cashnet-software.s3.amazonaws.com/webce/webce_webroot/favicon.ico"
							},
							"c:\\vol\\websites\\commerce.cashnet.com\\miscerror.html": {
								"source" : "https://cashnet-software.s3.amazonaws.com/webce/webce_webroot/miscerror.html"
							},
							"c:\\vol\\websites\\commerce.cashnet.com\\SmartPayTerms.html": {
								"source" : "https://cashnet-software.s3.amazonaws.com/webce/webce_webroot/SmartPayTerms.html"
							},
							"c:\\vol\\websites\\commerce.cashnet.com\\liprefs.js": {
								"source" : "https://cashnet-software.s3.amazonaws.com/webce/webce_webroot/liprefs.js"
							},
							"c:\\vol\\websites\\commerce.cashnet.com\\pagenotfound.html": {
								"source" : "https://cashnet-software.s3.amazonaws.com/webce/webce_webroot/pagenotfound.html"
							},
							"c:\\vol\\websites\\commerce.cashnet.com\\integration\\pickup.html": {
								"source" : "https://cashnet-software.s3.amazonaws.com/webce/pickup.html"
							},
							"c:\\temp\\codedeploy-agent.msi": {
								"source" : { "Fn::Sub" : "https://aws-codedeploy-${AWS::Region}.s3.amazonaws.com/latest/codedeploy-agent.msi" }
							},
							"c:\\temp\\setapppooluser.ps1": {
								"content": { "Fn::Join" : ["", [
									"Import-Module webadministration \r\n",
									"# ADD Domain service account to local IIS_IUSRS group\r\n",
									"net localgroup IIS_IUSRS /add ",
									{ "Ref": "pWebAppUser"},
									"\r\n",
									"# Set the app pool to run under that user\r\n",
									"Set-ItemProperty 'IIS:\\AppPools\\.NET v4.5 Classic' -name processModel -value @{userName=\"",
									{ "Ref": "pWebAppUser" },
									"\";password=\"",
									{ "Ref": "pWebAppPassword" },
									"\";identitytype=3} \r\n"
								]]}
							},
							"c:\\temp\\setmachineconfig.ps1": {
								"content": { "Fn::Join" : ["", [
									"# Open the machine.config file and handle it as XML\r\n",
									"$file = 'C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\Config\\machine.config'\r\n",
									"$doc = (Get-Content $file)-as [Xml]\r\n",
									"function setConfig {\r\n",
									"# Create a new appSettings section within the configuration section since it does not exist on a new build\r\n",
									"$appSettings = $doc.configuration.AppendChild($doc.CreateElement(\"appSettings\"));\r\n",
									"# Add the ServerNo key within the appSettings section, it will be last 4 characters of the instance ID\r\n",
									"$myinstance = (Invoke-Restmethod -uri http://169.254.169.254/latest/meta-data/instance-id) \r\n",
									"$myserverno = \"webce-\" + $myinstance.substring($myinstance.length -4, 4) \r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"ServerNo\")\r\n",
									"$newKey.SetAttribute(\"value\", $myserverno)\r\n",
									"# Add the DBType key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"DBType\")\r\n",
									{ "Fn::Sub": "$newKey.SetAttribute(\"value\", \"${pDBTypeKey}\")\r\n" },
									"# Add the rshostname key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"rshostname\")\r\n",
									"$newKey.SetAttribute(\"value\", \"",
									{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:RSurl" } },
									"\")\r\n",
									"# Add the cashnethost key within the appSettings section.  On webce it is a URL.  On webauth it is a hostname.\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"cashnethost\")\r\n",
									"$newKey.SetAttribute(\"value\", \"https://",
									{ "Fn::GetAtt": "rALBwebce.DNSName" },
									"\")\r\n",
									"# Add the ConnectionStrProd key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"ConnectionStrProd\")\r\n",
									"$newKey.SetAttribute(\"value\", \"Max Pool Size=5000; Connection Lifetime=450;Packet Size=4096; server=tcp:",
									{ "Ref": "pAGListener" },
									",1433; user id=", { "Ref": "pDBAppUser" }, "; password=", { "Ref": "pDBAppPassword" }, "; encrypt=yes; TrustServerCertificate=true; Database=", { "Ref": "pProdDBName" }, "\")\r\n" ,
									"# Add the ConnectionStrTrain key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"ConnectionStrTrain\")\r\n",
									"$newKey.SetAttribute(\"value\", \"Max Pool Size=5000; Connection Lifetime=450;Packet Size=4096; server=tcp:",
									{ "Ref": "pAGListener" },
									",1433; user id=", { "Ref": "pDBAppUser" }, "; password=", { "Ref": "pDBAppPassword" }, "; encrypt=yes; TrustServerCertificate=true; Database=", { "Ref": "pTrainDBName" }, "\")\r\n" ,
									"# Add the ReportingDBConnectionStrProd key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"ReportingDBConnectionStrProd\")\r\n",
									"$newKey.SetAttribute(\"value\", \"Max Pool Size=5000; Connection Lifetime=450;Packet Size=4096; server=SQLPR2; user id=",
									{ "Ref": "pDBAppUser" }, "; password=", { "Ref": "pDBAppPassword" }, "; encrypt=yes; TrustServerCertificate=true; Database=", { "Ref": "pProdDBName" }, "\")\r\n" ,
									"# Add the ReportingDBConnectionStrTrain key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"ReportingDBConnectionStrTrain\")\r\n",
									"$newKey.SetAttribute(\"value\", \"Max Pool Size=5000; Connection Lifetime=450;Packet Size=4096; server=SQLPR2; user id=",
									{ "Ref": "pDBAppUser" }, "; password=", { "Ref": "pDBAppPassword" }, "; encrypt=yes; TrustServerCertificate=true; Database=", { "Ref": "pTrainDBName" }, "\")\r\n" ,
									"# Add the legacy ConnectionStr key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"ConnectionStr\")\r\n",
									"$newKey.SetAttribute(\"value\", \"\")\r\n",
									"# Add the legacy MasterDBName key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"MasterDBName\")\r\n",
									"$newKey.SetAttribute(\"value\", \"\")\r\n",
									"# Add the ConnectionType key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"ConnectionType\")\r\n",
									"$newKey.SetAttribute(\"value\", \"1\")\r\n",
									"# Add the FilePath key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"FilePath\")\r\n",
									"$newKey.SetAttribute(\"value\", \"\\\\fileshare\\cashnet_file01_pub\\usr\\\")\r\n",
									"# Add the PathToPublicKeyRing key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"PathToPublicKeyRing\")\r\n",
									"$newKey.SetAttribute(\"value\", \"\\\\fileshare\\cashnet_file01_priv\\PGP\\cashnet.pkr\")\r\n",
									"# Add the PathToSecretKeyRing key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"PathToSecretKeyRing\")\r\n",
									"$newKey.SetAttribute(\"value\", \"\\\\fileshare\\cashnet_file01_priv\\PGP\\cashnet.skr\")\r\n",
									"# Add the PGPLicenseKey key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"PGPLicenseKey\")\r\n",
									"$newKey.SetAttribute(\"value\", \"0253696AF1B8E27F69F0B8A8CC13893347EC8B9B64906FDAEF5F95A8D108D3EE113CDC5D9CA3C1CA0B9F06E0D66A474A738F12672531B6749063C50CFD55B084B05DFBC75A4D132F84ADD152E00A31E7620BDF9026AC7348370B66C9EC2299B1CE164FBA5B3D40681613523973FC4E6390D4A33C7D4C0E02B5B5E7B134BD736A1ED52A238EB179B31FB885B098A1CC3392B32FA9246B81AA4EA06880455CB745904AE3FF3BA65C159DAFFC8CA639B10B72447BE6DBB12753FB5F8F820055FC0910FA60D4EEF62309AF9742A64D19F04713DB12CF1A3A0B52264EEE5D85173F381C5DDE0AEE7822E71B5EA8A5712205C70E282A4EAEF4471E472DB874367C36D3\")\r\n",
									"# Add the sessionState element within the system.web section\r\n",
									"$newSystemWeb = $doc.CreateElement(\"sessionState\")\r\n",
									"$doc.configuration.\"system.web\".AppendChild($newSystemWeb)\r\n",
									"$newSystemWeb.SetAttribute(\"mode\", \"SQLServer\")\r\n",
									"$newSystemWeb.SetAttribute(\"allowCustomSqlDatabase\", \"true\")\r\n",
									"$newSystemWeb.SetAttribute(\"sqlConnectionString\", \"Packet Size=4096; server=tcp:",
									{ "Ref": "pSTAGListener" },
									",1433; initial catalog=", { "Ref": "pSTDBName" }, "; user id=", { "Ref": "pSTDBUser" }, "; password=", { "Ref": "pSTDBPassword" }, "\")\r\n" ,
									"$newSystemWeb.SetAttribute(\"cookieless\", \"false\")\r\n",
									"$newSystemWeb.SetAttribute(\"timeout\", \"1200\")\r\n",
									"# Add the machineKey element within the system.web section\r\n",
									"$newSystemWeb = $doc.CreateElement(\"machineKey\")\r\n",
									"$doc.configuration.\"system.web\".AppendChild($newSystemWeb)\r\n",
									"$newSystemWeb.SetAttribute(\"validationKey\", \"962F842FCF4AC9E9FDF0C95BC42804CBA08304D2584950B057E579A29D6CA5C8124F095F2EBBA35E040959141C2C1472C698E80B80F1E3AE634EAD62E6450A1D,IsolateApps\")\r\n",
									"$newSystemWeb.SetAttribute(\"decryptionKey\", \"6F2A71E5A07911814A3D05776870EAA6AB90DCB6552F2086,IsolateApps\")\r\n",
									"$newSystemWeb.SetAttribute(\"validation\", \"SHA1\")\r\n",
									"# Add the local_addr element within the appSettings section; this one is interesting because it needs our IP address.\r\n",
									"$myip = (Invoke-Restmethod -uri http://169.254.169.254/latest/meta-data/local-ipv4)\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"local_addr\")\r\n",
									"$newKey.SetAttribute(\"value\", $myip)\r\n",
									"# Save the file\r\n",
									"$doc.save($file)\r\n",
									"}\r\n",
									"#check if config values have already been written; exit 0 if yes, else write the values\r\n",
									"if ($doc.SelectSingleNode('//add[@key=\"ServerNo\"]').Value -ne $null)\r\n",
									"{\r\n",
									"exit 0\r\n",
									"}\r\n",
									"else\r\n",
									"{\r\n",
									"setConfig\r\n",
									"}\r\n"
								]]}
							}
						},
						"sources": {
							"c:\\vol\\websites\\commerce.cashnet.com" : "https://cashnet-software.s3.amazonaws.com/webce/CUNY_Tufts.zip"
						},
						"commands" : {
							"03-DomainJoin": {
								"command": "powershell.exe -ExecutionPolicy unrestricted . 'c:\\temp\\domainjoin.ps1'",
								"waitAfterCompletion": "forever"
							},
							"04-install-splunk": {
								"command": "mkdir c:\\logs & c:\\temp\\installers\\splunkforwarder.msi RECEIVING_INDEXER=\"logs:9997\" MONITOR_PATH=\"C:\\LOGS\" WINEVENTLOG_SEC_ENABLE=1 WINEVENTLOG_SYS_ENABLE=1 WINEVENTLOG_APP_ENABLE=1 AGREETOLICENSE=Yes /quiet /L*v c:\\temp\\splunk_install.log",
								"waitAfterCompletion": 0
							},
							"04a-ConfigureSplunk": {
								"command": "powershell.exe -ExecutionPolicy unrestricted . 'c:\\temp\\installers\\ConfigureSplunk.ps1' 'webce404'",
								"waitAfterCompletion": "0"
							},
							"05-InstallDeepSec": {
								"command": "powershell.exe -ExecutionPolicy unrestricted . 'c:\\temp\\installers\\dsa_install.ps1'",
								"waitAfterCompletion": "0"
							},
							"06-install-alertlogic": {
								"command": "msiexec /i c:\\temp\\installers\\alertlogic.msi prov_key=d450f7170ea98662c07e2b5bd991213ca55d96b2369b3ba901 /q",
								"waitAfterCompletion": 0
							},
							"07-disable-win-fw": {
                                "command": "powershell.exe -Command \"Get-NetFirewallProfile | Set-NetFirewallProfile -Enabled False\"",
								"waitAfterCompletion": "0"
                            },
							"09-appendDNSsearchsuffix": {
								"command": "powershell.exe -ExecutionPolicy unrestricted . 'c:\\temp\\appendDNSsearchsuffix.ps1'",
								"waitAfterCompletion": "0"
							},
							"20-DeployWebce": {
								"command": "powershell.exe -ExecutionPolicy unrestricted . 'c:\\temp\\deploywebce404.ps1'",
								"waitAfterCompletion": "0"
							},
							"22-SetAppPoolUser": {
								"command": "powershell.exe -ExecutionPolicy unrestricted . 'c:\\temp\\setapppooluser.ps1'",
								"waitAfterCompletion": "0"
							},
							"25-SetMachineConfig": {
								"command": "powershell.exe -ExecutionPolicy unrestricted . 'c:\\temp\\setmachineconfig.ps1'",
								"waitAfterCompletion": "0"
							},
							"30-InstallCodeDeploy": {
								"command": "c:\\temp\\codedeploy-agent.msi",
								"waitAfterCompletion": "0"
							},
							"40-Signal": {
								"command": { "Fn::Sub": "cfn-signal.exe -e 0 --stack ${AWS::StackName} --resource rAutoScalingGroupWebce404 --region ${AWS::Region}" },
								"waitAfterCompletion": "0"
							}
						},
						"services" : {
							"windows" : {
								"cfn-hup" : {
									"enabled" : "true",
									"ensureRunning" : "true",
									"files" : ["c:\\cfn\\cfn-hup.conf", "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"]
								}
							}
						}
					}
				}
			},
			"Properties": {
				"ImageId": { "Ref": "pWindowsIISAMI" },
				"InstanceType": { "Ref": "p404InstanceType" },
				"IamInstanceProfile": { "Ref": "pInstanceIAMProfile" },
				"KeyName": { "Ref": "pEC2KeyPair" },
				"SecurityGroups": [
					{ "Ref": "rSGwebce" },
					{ "Ref": "rSGcndotnetcode" },
					{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGfileshareaccess" } },
					{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SG000" } },
					{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGdomainmember" } }
				],
				"UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
					"<script>\n",
					"C:\\Windows\\System32\\tzutil /s \"Eastern Standard Time\"\n",
					"cfn-init.exe ",
					" --stack ", { "Ref" : "AWS::StackName" },
					" --resource rAutoScalingConfigWebce404 ",
					" --region ", { "Ref" : "AWS::Region" }, "\n",
					"</script>\n"
				]]}}
			}
		},

		"rAutoScalingGroupWebce404": {
			"Type": "AWS::AutoScaling::AutoScalingGroup",
			"DependsOn": "rAutoScalingConfigWebce404",
			"CreationPolicy": {
				"ResourceSignal": {
					"Timeout": "PT55M"
				}
			},
			"Properties": {
				"AvailabilityZones": [
					{ "Ref": "pRegionAZ1Name" },
					{ "Ref": "pRegionAZ2Name" }
				],
				"VPCZoneIdentifier": [
					{ "Ref": "pSubnetA" },
					{ "Ref": "pSubnetB" }
				],
				"LaunchConfigurationName": { "Ref": "rAutoScalingConfigWebce404" },
				"DesiredCapacity": "2",
				"MinSize": "2",
				"MaxSize": "4",
				"TargetGroupARNs": [ { "Ref": "rALBwebceTarget404" } ],
				"TerminationPolicies" : ["OldestInstance"],
				"HealthCheckType": "EC2",
				"HealthCheckGracePeriod": "3600",
			    "NotificationConfigurations" : [
					{
						"TopicARN" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SecurityAlarmTopic" } },
						"NotificationTypes" : [
							"autoscaling:EC2_INSTANCE_LAUNCH",
							"autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
							"autoscaling:EC2_INSTANCE_TERMINATE",
							"autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
						]
					}
				],
				"Tags": [
					{
						"Key": "Name",
						"Value": { "Fn::Join" : [ " ", [ "WebCE 404", { "Ref": "pFriendlyName" } ] ] },
						"PropagateAtLaunch": "true"
					},
					{
						"Key": "Environment",
						"Value": { "Ref": "pEnvironment" },
						"PropagateAtLaunch": "true"
					},
					{
						"Key": "Role",
						"Value": "WebCE 404",
						"PropagateAtLaunch": "true"
					},
					{
						"Key": "Patch Group",
						"Value": { "Ref": "pEnvironment" },
						"PropagateAtLaunch": "true"
					},
					{
						"Key": "AppStack",
						"Value": { "Ref": "pAppStackName" },
						"PropagateAtLaunch": "true"
					}
				]
			}
		},

		"rAutoScalingUpWebce404": {
			"Type": "AWS::AutoScaling::ScalingPolicy",
			"Properties": {
				"AdjustmentType": "ChangeInCapacity",
				"AutoScalingGroupName": {
					"Ref": "rAutoScalingGroupWebce404"
				},
				"Cooldown": "500",
				"ScalingAdjustment": "1"
			}
		},

		"rAutoScalingDownWebce404": {
			"Type": "AWS::AutoScaling::ScalingPolicy",
			"Properties": {
				"AdjustmentType": "ChangeInCapacity",
				"AutoScalingGroupName": {
					"Ref": "rAutoScalingGroupWebce404"
				},
				"Cooldown": "500",
				"ScalingAdjustment": "-1"
			}
		},

		"rCWAlarmHighCPUWebce404": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"EvaluationPeriods": "1",
				"Statistic": "Average",
				"Threshold": "60",
				"AlarmDescription": "Alarm if CPU too high or metric disappears indicating instance is down",
				"Period": "180",
				"AlarmActions": [{
					"Ref": "rAutoScalingUpWebce404"
				}],
				"Namespace": "AWS/EC2",
				"Dimensions": [{
					"Name": "AutoScalingGroupName",
					"Value": {
						"Ref": "rAutoScalingGroupWebce404"
					}
				}],
				"ComparisonOperator": "GreaterThanThreshold",
				"MetricName": "CPUUtilization"
			}
		},

		"rCWAlarmLowCPUWebce404": {
			"Type": "AWS::CloudWatch::Alarm",
			"DependsOn": "rAutoScalingGroupWebce404",
			"Properties": {
				"EvaluationPeriods": "1",
				"Statistic": "Average",
				"Threshold": "15",
				"AlarmDescription": "Alarm if CPU too too, remove a webserver",
				"Period": "300",
				"AlarmActions": [{
					"Ref": "rAutoScalingDownWebce404"
				}],
				"Namespace": "AWS/EC2",
				"Dimensions": [{
					"Name": "AutoScalingGroupName",
					"Value": {
						"Ref": "rAutoScalingGroupWebce404"
					}
				}],
				"ComparisonOperator": "LessThanThreshold",
				"MetricName": "CPUUtilization"
			}
		},


		"rCodeDeployGroupWebceWebsvc": {
			"Type" : "AWS::CodeDeploy::DeploymentGroup",
			"DependsOn": "rCodeDeployGroup404handler",
			"Properties" : {
				"ApplicationName" : "webce-websvc",
				"AutoScalingGroups" : [ { "Ref": "rAutoScalingGroupWebce404" } ],
				"DeploymentConfigName" : "CodeDeployDefault.OneAtATime",
				"DeploymentGroupName" : { "Fn::Sub": "WebCEWebsvc-${pFriendlyName}" },
				"ServiceRoleArn" : { "Ref": "pCodeDeployServiceRoleArn" },
				"DeploymentStyle": {
					"DeploymentOption": "WITH_TRAFFIC_CONTROL",
					"DeploymentType": "IN_PLACE"
				},
				"LoadBalancerInfo" : {
					"TargetGroupInfoList" : [ { "Name": { "Fn::GetAtt": ["rALBwebceTarget404", "TargetGroupName"] } } ]
				},
				"Deployment" : {
					"Description" : "Initial WebCE Webservices Deployment",
					"Revision" : {
						"RevisionType" : "S3",
						"S3Location" : {
							"Bucket" : "cashnet-codedeploy",
							"Key" : "webce-websvc.zip",
							"BundleType" : "Zip"
						}
					}
				}
			}
		},

		"rCodeDeployGroup404handler": {
			"Type" : "AWS::CodeDeploy::DeploymentGroup",
			"Properties" : {
				"ApplicationName" : "404handler",
				"AutoScalingGroups" : [
					{ "Ref": "rAutoScalingGroupWebce404" },
					{ "Ref": "rAutoScalingGroupWebceBlue" },
					{ "Ref": "rAutoScalingGroupWebceGreen" },
					{ "Ref": "rAutoScalingGroupWebauth" },
					{ "Ref": "rAutoScalingGroupWebauth2" }
				],
				"DeploymentConfigName" : "CodeDeployDefault.OneAtATime",
				"DeploymentGroupName" : { "Fn::Sub": "404handler-${pFriendlyName}" },
				"ServiceRoleArn" : { "Ref": "pCodeDeployServiceRoleArn" },
				"Deployment" : {
					"Description" : "Initial WebCE 404 Handler Deployment",
					"Revision" : {
						"RevisionType" : "S3",
						"S3Location" : {
							"Bucket" : "cashnet-codedeploy",
							"Key" : "404handler.zip",
							"BundleType" : "Zip"
						}
					}
				}
			}
		},


		"rALBws": {
			"Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
			"Properties" : {
				"Scheme": "internal",
				"SecurityGroups": [
					{ "Ref": "rSGwsELB" },
					{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SG000" } }
				],
				"Subnets": [{
					"Ref": "pSubnetA"
				}, {
					"Ref": "pSubnetB"
				}],
				"LoadBalancerAttributes" : [
					{ "Key" : "access_logs.s3.enabled", "Value" : "false" },
					{ "Key" : "access_logs.s3.bucket", "Value" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:S3ELBAccessLogs" } } },
					{ "Key" : "access_logs.s3.prefix", "Value" : "Logs" }
				],
				"Tags": [
					{ "Key": "Name", "Value": { "Fn::Sub": "${pFriendlyName} WS ALB" } },
					{ "Key": "Role", "Value": "WS" },
					{ "Key": "AppStack", "Value": { "Ref": "pAppStackName" } },
					{ "Key": "Environment", "Value": { "Ref": "pEnvironment" } }
				]
			}
		},

		"rALBwsListener": {
			"Type" : "AWS::ElasticLoadBalancingV2::Listener",
			"Properties" : {
				"DefaultActions": [{
					"Type": "forward",
					"TargetGroupArn": { "Ref": "rALBwsTarget" }
				}],
				"LoadBalancerArn" : { "Ref": "rALBws" },
				"Port" : 80,
				"Protocol" : "HTTP"
			}
		},

		"rALBwsTarget": {
			"Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
			"Properties" : {
				"HealthCheckIntervalSeconds" : 30,
				"HealthCheckPath" : "/wswrapper/wswrapper.aspx?command=help",
				"HealthCheckPort" : 80,
				"HealthCheckProtocol" : "HTTP",
				"HealthCheckTimeoutSeconds" : 5,
				"HealthyThresholdCount" : 2,
				"Matcher" : { "HttpCode" : "200" },
				"Port" : 80,
				"Protocol" : "HTTP",
				"Tags" : [
					{ "Key": "Name", "Value": { "Fn::Sub": "${pFriendlyName} WS ALB Target" } },
					{ "Key": "Role", "Value": "WS" },
					{ "Key": "AppStack", "Value": { "Ref": "pAppStackName" } },
					{ "Key": "Environment", "Value": { "Ref": "pEnvironment" } }
				],
				"TargetGroupAttributes": [
					{
						"Key": "deregistration_delay.timeout_seconds",
						"Value": "30"
					}
				],
				"UnhealthyThresholdCount" : 5,
				"VpcId" : { "Ref": "pProductionVPC" }
			}
		},

		"rAutoScalingConfigWS": {
			"Type": "AWS::AutoScaling::LaunchConfiguration",
			"Metadata": {
				"AWS::CloudFormation::Authentication":{
					"S3AccessCreds":{
						"type":"S3",
						"roleName":{ "Ref": "pInstanceIAMRole" },
						"buckets" : [ "cashnet-configfiles", "cashnet-software" ]
					}
				},
				"AWS::CloudFormation::Init" : {
					"configSets": {
						"PROD": [ "PROD", "Misc" ],
						"Non-Prod": [ "NonProd", "Misc" ],
                        "default": [ "NonProd", "Misc" ]
                    },
					"NonProd": {
						"version": "2016-10-18-001",
						"files" : {
							"c:\\vol\\ws\\connect-dev.cashnet.com.cer": {
								"source" : "https://cashnet-configfiles.s3.amazonaws.com/ws/connect-dev.cashnet.com.cer"
							},
							"c:\\temp\\connect-dev.cashnet.com.pfx": {
								"source" : "https://cashnet-configfiles.s3.amazonaws.com/ws/connect-dev.cashnet.com.pfx"
							}
						}
					},
					"PROD": {
						"version": "2016-10-18-001",
						"files" : {
							"c:\\vol\\ws\\connect.cashnet.com.cer": {
								"source" : "https://cashnet-configfiles.s3.amazonaws.com/ws/connect.cashnet.com.cer"
							},
							"c:\\temp\\connect.cashnet.com.pfx": {
								"source" : "https://cashnet-configfiles.s3.amazonaws.com/ws/connect.cashnet.com.pfx"
							},
							"c:\\vol\\ws\\connect-dev.cashnet.com.cer": {
								"source" : "https://cashnet-configfiles.s3.amazonaws.com/ws/connect-dev.cashnet.com.cer"
							},
							"c:\\temp\\connect-dev.cashnet.com.pfx": {
								"source" : "https://cashnet-configfiles.s3.amazonaws.com/ws/connect-dev.cashnet.com.pfx"
							}
						}
					},
					"Misc" : {
						"version": "2016-10-18-001",
						"files" : {
							"c:\\cfn\\cfn-hup.conf" : {
								"content" : { "Fn::Join" : ["", [
									"[main]\n",
									"stack=", { "Ref" : "AWS::StackId" }, "\n",
									"region=", { "Ref" : "AWS::Region" }, "\n"
								]]}
							},
							"c:\\cfn\\hooks.d\\cfn-auto-reloader.conf" : {
								"content": { "Fn::Join" : ["", [
									"[cfn-auto-reloader-hook]\n",
									"triggers=post.update\n",
									"path=Resources.rAutoScalingConfigWS.Metadata.AWS::CloudFormation::Init\n",
									"action=cfn-init.exe -v -s ", { "Ref" : "AWS::StackId" },
										" -r rAutoScalingConfigWS",
										" --region ", { "Ref" : "AWS::Region" }, "\n"
								]]}
							},
							"c:\\temp\\domainjoin.ps1": {
								"content": { "Fn::Join" : ["", [
									"Set-DefaultAWSRegion -Region ", { "Ref" : "AWS::Region" }, " \r\n",
									"Set-Variable -name instance_id -value (Invoke-Restmethod -uri http://169.254.169.254/latest/meta-data/instance-id) \r\n",
									"$params = @{\"directoryId\"=\"", { "Ref": "pDirectoryService" }, "\"; \"directoryName\"=\"", { "Ref": "pDomainName" }, "\"}\r\n",
									"New-SSMAssociation -InstanceId $instance_id -Name \"AWS-JoinDirectoryServiceDomain\" -parameters $params\r\n"
								]]}
							},
							"c:\\temp\\installers\\splunkforwarder.msi" : {
								"source" : "https://cashnet-software.s3.amazonaws.com/splunk/splunkforwarder-latest-x64.msi"
							},
							"c:\\temp\\installers\\ConfigureSplunk.ps1" : {
								"source" : "https://cashnet-software.s3.amazonaws.com/splunk/ConfigureSplunk.ps1"
							},
							"c:\\temp\\installers\\alertlogic.msi": {
								"source" : "https://cashnet-software.s3.amazonaws.com/alertlogic/al_agent-LATEST.msi"
							},
							"c:\\temp\\installers\\dsa_install.ps1": {
								"content": { "Fn::Join" : ["", [
									"[Net.ServicePointManager]::ServerCertificateValidationCallback = {$true} \r\n",
									"Start-Transcript -path \"c:\\temp\\dsa_deploy.log\" -append \r\n",
									"echo \"$(Get-Date -format T) - DSA download started\" \r\n",
									"(New-Object System.Net.WebClient).DownloadFile(\"https://",
									{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:ELBDeepSec" } },
									":443/software/agent/Windows/x86_64/\", \"c:\\temp\\dsa_agent.msi\") \r\n",
									"echo \"$(Get-Date -format T) - Downloaded File Size:\" (Get-Item \"c:\\temp\\dsa_agent.msi\").length \r\n",
									"echo \"$(Get-Date -format T) - DSA install started\" \r\n",
									"echo \"$(Get-Date -format T) - Installer Exit Code:\" (Start-Process -FilePath msiexec -ArgumentList \"/i c:\\temp\\dsa_agent.msi /qn ADDLOCAL=ALL /l*v `\"c:\\temp\\dsa_install.log`\"\" -Wait -PassThru).ExitCode \r\n",
									"echo \"$(Get-Date -format T) - DSA activation started\" \r\n",
									"Start-Sleep -s 50 \r\n",
									"& $Env:ProgramFiles\"\\Trend Micro\\Deep Security Agent\\dsa_control\" -r \r\n",
									"& $Env:ProgramFiles\"\\Trend Micro\\Deep Security Agent\\dsa_control\" -a dsm://",
									{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:ELBDeepSec" } },
									":4120/ \r\n",
									"Stop-Transcript \r\n",
									"echo \"$(Get-Date -format T) - DSA Deployment Finished\" \r\n"
								]]}
							},
							"c:\\temp\\deployws_1_1.ps1": {
								"source" : "https://cashnet-configfiles.s3.amazonaws.com/ws/deployws_1_1.ps1"
							},
							"c:\\temp\\AddToIUSRS.ps1": {
								"content": { "Fn::Join" : ["", [
									"# ADD Domain service account to local IIS_IUSRS group\r\n",
									"net localgroup IIS_IUSRS /add ",
									{ "Ref": "pWebAppUser"},
									"\r\n"
								]]}
							},
							"c:\\temp\\setapppooluser.ps1": {
								"content": { "Fn::Join" : ["", [
									"Import-Module webadministration \r\n",
									"# ADD Domain service account to local IIS_IUSRS group\r\n",
									"net localgroup IIS_IUSRS /add ",
									{ "Ref": "pWebAppUser"},
									"\r\n",
									"# Set the app pool to run under that user\r\n",
									"Set-ItemProperty 'IIS:\\AppPools\\WsAppPool' -name processModel -value @{userName=\"",
									{ "Ref": "pWebAppUser" },
									"\";password=\"",
									{ "Ref": "pWebAppPassword" },
									"\";identitytype=3} \r\n"
								]]}
							},
							"c:\\temp\\winhttpcertcfg.exe": {
								"source" : "https://cashnet-software.s3.amazonaws.com/winhttpcertcfg/winhttpcertcfg.exe"
							},
							"c:\\temp\\codedeploy-agent.msi": {
								"source" : { "Fn::Sub" : "https://aws-codedeploy-${AWS::Region}.s3.amazonaws.com/latest/codedeploy-agent.msi" }
							}
						},
						"commands" : {
							"03-DomainJoin": {
								"command": "powershell.exe -ExecutionPolicy unrestricted . 'c:\\temp\\domainjoin.ps1'",
								"waitAfterCompletion": "forever"
							},
							"04-install-splunk": {
								"command": "mkdir c:\\logs & c:\\temp\\installers\\splunkforwarder.msi RECEIVING_INDEXER=\"logs:9997\" MONITOR_PATH=\"C:\\LOGS\" WINEVENTLOG_SEC_ENABLE=1 WINEVENTLOG_SYS_ENABLE=1 WINEVENTLOG_APP_ENABLE=1 AGREETOLICENSE=Yes /quiet /L*v c:\\temp\\splunk_install.log",
								"waitAfterCompletion": 0
							},
							"04a-ConfigureSplunk": {
								"command": "powershell.exe -ExecutionPolicy unrestricted . 'c:\\temp\\installers\\ConfigureSplunk.ps1' 'ws'",
								"waitAfterCompletion": "0"
							},
							"05-InstallDeepSec": {
								"command": "powershell.exe -ExecutionPolicy unrestricted . 'c:\\temp\\installers\\dsa_install.ps1'",
								"waitAfterCompletion": "0"
							},
							"06-install-alertlogic": {
								"command": "msiexec /i c:\\temp\\installers\\alertlogic.msi prov_key=d450f7170ea98662c07e2b5bd991213ca55d96b2369b3ba901 /q",
								"waitAfterCompletion": 0
							},
							"07-disable-win-fw": {
                                "command": "powershell.exe -Command \"Get-NetFirewallProfile | Set-NetFirewallProfile -Enabled False\"",
								"waitAfterCompletion": "0"
                            },
							"20-deployws_1_1": {
								"command": { "Fn::Sub": "powershell.exe -ExecutionPolicy unrestricted . 'c:\\temp\\deployws_1_1.ps1' ${pEnvironmentType}" },
								"waitAfterCompletion": "0"
							},
							"25-SetAppPoolUser": {
								"command": "powershell.exe -ExecutionPolicy unrestricted . 'c:\\temp\\setapppooluser.ps1'",
								"waitAfterCompletion": "0"
							},
							"30-InstallCodeDeploy": {
								"command": "c:\\temp\\codedeploy-agent.msi",
								"waitAfterCompletion": "0"
							},
							"40-Signal": {
								"command": { "Fn::Sub": "cfn-signal.exe -e 0 --stack ${AWS::StackName} --resource rAutoScalingGroupWS --region ${AWS::Region}" },
								"waitAfterCompletion": "0"
							}
						},
						"services" : {
							"windows" : {
								"cfn-hup" : {
									"enabled" : "true",
									"ensureRunning" : "true",
									"files" : ["c:\\cfn\\cfn-hup.conf", "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"]
								}
							}
						}
					}
				}
			},
			"Properties": {
				"ImageId": { "Ref": "pWindowsIISAMI" },
				"InstanceType": { "Ref": "pMiscInstanceType" },
				"IamInstanceProfile": { "Ref": "pInstanceIAMProfile" },
				"KeyName": { "Ref": "pEC2KeyPair" },
				"SecurityGroups": [
					{ "Ref": "rSGws" },
					{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGfileshareaccess" } },
					{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SG000" } },
					{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGdomainmember" } }
				],
				"UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
					"<script>\n",
					"C:\\Windows\\System32\\tzutil /s \"Eastern Standard Time\"\n",
					"cfn-init.exe ",
					{ "Fn::If": [ "cProdEnvironment", " -c PROD ", "" ] },
					" --stack ", { "Ref" : "AWS::StackName" },
					" --resource rAutoScalingConfigWS ",
					" --region ", { "Ref" : "AWS::Region" }, "\n",
					"</script>\n"
				]]}}
			}
		},

		"rAutoScalingGroupWS": {
			"Type": "AWS::AutoScaling::AutoScalingGroup",
			"DependsOn": "rAutoScalingConfigWS",
			"CreationPolicy": {
				"ResourceSignal": {
					"Count": { "Ref" : "pMiscMinInstances" },
					"Timeout": "PT55M"
				}
			},
			"Properties": {
				"AvailabilityZones": [
					{ "Ref": "pRegionAZ1Name" },
					{ "Ref": "pRegionAZ2Name" }
				],
				"VPCZoneIdentifier": [
					{ "Ref": "pSubnetA" },
					{ "Ref": "pSubnetB" }
				],
				"LaunchConfigurationName": { "Ref": "rAutoScalingConfigWS" },
				"DesiredCapacity": { "Ref" : "pMiscMinInstances" },
				"MinSize": { "Ref" : "pMiscMinInstances" },
				"MaxSize": { "Ref" : "pMiscMaxInstances" },
				"TargetGroupARNs": [ { "Ref": "rALBwsTarget" } ],
				"TerminationPolicies" : ["OldestInstance"],
				"HealthCheckType": "EC2",
				"HealthCheckGracePeriod": "3600",
			    "NotificationConfigurations" : [
					{
						"TopicARN" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SecurityAlarmTopic" } },
						"NotificationTypes" : [
							"autoscaling:EC2_INSTANCE_LAUNCH",
							"autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
							"autoscaling:EC2_INSTANCE_TERMINATE",
							"autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
						]
					}
				],
				"Tags": [
					{
						"Key": "Name",
						"Value": { "Fn::Join" : [ " ", [ "WS", { "Ref": "pFriendlyName" } ] ] },
						"PropagateAtLaunch": "true"
					},
					{
						"Key": "Environment",
						"Value": { "Ref": "pEnvironment" },
						"PropagateAtLaunch": "true"
					},
					{
						"Key": "Role",
						"Value": "WS",
						"PropagateAtLaunch": "true"
					},
					{
						"Key": "Patch Group",
						"Value": { "Ref": "pEnvironment" },
						"PropagateAtLaunch": "true"
					},
					{
						"Key": "AppStack",
						"Value": { "Ref": "pAppStackName" },
						"PropagateAtLaunch": "true"
					}
				]
			}
		},

		"rAutoScalingUpWS": {
			"Type": "AWS::AutoScaling::ScalingPolicy",
			"Properties": {
				"AdjustmentType": "ChangeInCapacity",
				"AutoScalingGroupName": {
					"Ref": "rAutoScalingGroupWS"
				},
				"Cooldown": "500",
				"ScalingAdjustment": "1"
			}
		},

		"rAutoScalingDownWS": {
			"Type": "AWS::AutoScaling::ScalingPolicy",
			"Properties": {
				"AdjustmentType": "ChangeInCapacity",
				"AutoScalingGroupName": {
					"Ref": "rAutoScalingGroupWS"
				},
				"Cooldown": "500",
				"ScalingAdjustment": "-1"
			}
		},

		"rCWAlarmHighCPUWS": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"EvaluationPeriods": "1",
				"Statistic": "Average",
				"Threshold": "60",
				"AlarmDescription": "Alarm if CPU too high or metric disappears indicating instance is down",
				"Period": "180",
				"AlarmActions": [{
					"Ref": "rAutoScalingUpWS"
				}],
				"Namespace": "AWS/EC2",
				"Dimensions": [{
					"Name": "AutoScalingGroupName",
					"Value": {
						"Ref": "rAutoScalingGroupWS"
					}
				}],
				"ComparisonOperator": "GreaterThanThreshold",
				"MetricName": "CPUUtilization"
			}
		},

		"rCWAlarmLowCPUWS": {
			"Type": "AWS::CloudWatch::Alarm",
			"DependsOn": "rAutoScalingGroupWS",
			"Properties": {
				"EvaluationPeriods": "1",
				"Statistic": "Average",
				"Threshold": "15",
				"AlarmDescription": "Alarm if CPU too too, remove a webserver",
				"Period": "300",
				"AlarmActions": [{
					"Ref": "rAutoScalingDownWS"
				}],
				"Namespace": "AWS/EC2",
				"Dimensions": [{
					"Name": "AutoScalingGroupName",
					"Value": {
						"Ref": "rAutoScalingGroupWS"
					}
				}],
				"ComparisonOperator": "LessThanThreshold",
				"MetricName": "CPUUtilization"
			}
		},

		"rCodeDeployGroupWS": {
			"Type" : "AWS::CodeDeploy::DeploymentGroup",
			"Properties" : {
				"ApplicationName" : "wswrapper",
				"AutoScalingGroups" : [ { "Ref": "rAutoScalingGroupWS" } ],
				"DeploymentConfigName" : "CodeDeployDefault.OneAtATime",
				"DeploymentGroupName" : { "Fn::Sub": "WS-${pFriendlyName}" },
				"ServiceRoleArn" : { "Ref": "pCodeDeployServiceRoleArn" },
				"DeploymentStyle": {
					"DeploymentOption": "WITH_TRAFFIC_CONTROL",
					"DeploymentType": "IN_PLACE"
				},
				"LoadBalancerInfo" : {
					"TargetGroupInfoList" : [ { "Name": { "Fn::GetAtt": ["rALBwsTarget", "TargetGroupName"] } } ]
				},
				"Deployment" : {
					"Description" : "Initial WS Deployment",
					"Revision" : {
						"RevisionType" : "S3",
						"S3Location" : {
							"Bucket" : "cashnet-codedeploy",
							"Key" : "wswrapper.zip",
							"BundleType" : "Zip"
						}
					}
				}
			}
		},


		"rALBwebauthWAF": {
			"Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
			"Properties" : {
				"Scheme": "internet-facing",
				"SecurityGroups": [
					{ "Ref": "rSGwebauthWAFALB" },
					{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SG000" } },
					{ "Fn::If": [ "cPublicAccess", { "Ref": "rSGcnsiteaccessOpen" }, { "Ref": "rSGcnsiteaccessRestricted"} ] }
				],
				"Subnets": [
					{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:DMZSubnetA" } },
					{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:DMZSubnetB" } }
				],
				"LoadBalancerAttributes" : [
					{ "Key" : "access_logs.s3.enabled", "Value" : "false" },
					{ "Key" : "access_logs.s3.bucket", "Value" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:S3ELBAccessLogs" } } },
					{ "Key" : "access_logs.s3.prefix", "Value" : "Logs" }
				],
				"Tags": [
					{ "Key": "Name", "Value": { "Fn::Sub": "${pFriendlyName} Webauth WAF ALB" } },
					{ "Key": "Role", "Value": "Webauth WAF" },
					{ "Key": "AppStack", "Value": { "Ref": "pAppStackName" } },
					{ "Key": "Environment", "Value": { "Ref": "pEnvironment" } }
				]
			}
		},

		"rALBwebauthWAFListener80": {
			"Type" : "AWS::ElasticLoadBalancingV2::Listener",
			"Properties" : {
				"DefaultActions": [{
					"Type": "forward",
					"TargetGroupArn": { "Ref": "rALBwebauthWAFTarget" }
				}],
				"LoadBalancerArn" : { "Ref": "rALBwebauthWAF" },
				"Port" : 80,
				"Protocol" : "HTTP"
			}
		},

		"rALBwebauthWAFListener443": {
			"Type" : "AWS::ElasticLoadBalancingV2::Listener",
			"Properties" : {
				"DefaultActions": [{
					"Type": "forward",
					"TargetGroupArn": { "Ref": "rALBwebauthWAFTarget" }
				}],
				"LoadBalancerArn" : { "Ref": "rALBwebauthWAF" },
				"Port" : 443,
				"Protocol" : "HTTPS",
				"SslPolicy" : "ELBSecurityPolicy-TLS-1-2-2017-01",
				"Certificates": [
					{ "CertificateArn":
						{ "Ref": "pWebauthCertARN" }
					}
				]
			}
		},

		"rALBwebauthWAFTarget": {
			"Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
			"Properties" : {
				"HealthCheckIntervalSeconds" : 10,
				"HealthCheckPath" : "/",
				"HealthCheckPort" : "traffic-port",
				"HealthCheckProtocol" : "HTTP",
				"HealthCheckTimeoutSeconds" : 5,
				"HealthyThresholdCount" : 2,
				"Matcher" : { "HttpCode" : "200,302" },
				"Port" : { "Ref": "pWebauthWAFPort" },
				"Protocol" : "HTTP",
				"Tags" : [
					{ "Key": "Name", "Value": { "Fn::Sub": "${pFriendlyName} Webauth WAF ALB Target" } },
					{ "Key": "Role", "Value": "Webauth WAF" },
					{ "Key": "AppStack", "Value": { "Ref": "pAppStackName" } },
					{ "Key": "Environment", "Value": { "Ref": "pEnvironment" } }
				],
				"Targets": [
					{ "Id": { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:WAF1" } }, "Port": { "Ref": "pWebauthWAFPort" } }
				],
				"TargetGroupAttributes": [
					{
						"Key": "deregistration_delay.timeout_seconds",
						"Value": "30"
					},
					{
						"Key": "stickiness.enabled",
						"Value": "true"
					},
					{
						"Key": "stickiness.type",
						"Value": "lb_cookie"
					},
					{
						"Key": "stickiness.lb_cookie.duration_seconds",
						"Value": "3600"
					}
				],
				"UnhealthyThresholdCount" : 3,
				"VpcId" : { "Ref": "pProductionVPC" }
			}
		},

		"rALBwebauth": {
			"Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
			"Properties" : {
				"Scheme": "internal",
				"SecurityGroups": [
					{ "Ref": "rSGwebauthELB" },
					{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SG000" } }
				],
				"Subnets": [{
					"Ref": "pSubnetA"
				}, {
					"Ref": "pSubnetB"
				}],
				"LoadBalancerAttributes" : [
					{ "Key" : "access_logs.s3.enabled", "Value" : "false" },
					{ "Key" : "access_logs.s3.bucket", "Value" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:S3ELBAccessLogs" } } },
					{ "Key" : "access_logs.s3.prefix", "Value" : "Logs" }
				],
				"Tags": [
					{ "Key": "Name", "Value": { "Fn::Sub": "${pFriendlyName} Webauth ALB" } },
					{ "Key": "Role", "Value": "Webauth" },
					{ "Key": "AppStack", "Value": { "Ref": "pAppStackName" } },
					{ "Key": "Environment", "Value": { "Ref": "pEnvironment" } }
				]
			}
		},

		"rALBwebauth2": {
			"Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
			"Properties" : {
				"Scheme": "internal",
				"SecurityGroups": [
					{ "Ref": "rSGwebauthELB" },
					{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SG000" } }
				],
				"Subnets": [{
					"Ref": "pSubnetA"
				}, {
					"Ref": "pSubnetB"
				}],
				"LoadBalancerAttributes" : [
					{ "Key" : "access_logs.s3.enabled", "Value" : "false" },
					{ "Key" : "access_logs.s3.bucket", "Value" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:S3ELBAccessLogs" } } },
					{ "Key" : "access_logs.s3.prefix", "Value" : "Logs" }
				],
				"Tags": [
					{ "Key": "Name", "Value": { "Fn::Sub": "${pFriendlyName} Webauth ALB" } },
					{ "Key": "Role", "Value": "Webauth" },
					{ "Key": "AppStack", "Value": { "Ref": "pAppStackName" } },
					{ "Key": "Environment", "Value": { "Ref": "pEnvironment" } }
				]
			}
		},

		"rALBwebauthListenerHttp": {
			"Type" : "AWS::ElasticLoadBalancingV2::Listener",
			"Properties" : {
				"DefaultActions": [{
					"Type": "forward",
					"TargetGroupArn": { "Ref": "rALBwebauthTarget" }
				}],
				"LoadBalancerArn" : { "Ref": "rALBwebauth" },
				"Port" : 80,
				"Protocol" : "HTTP"
			}
		},

		"rALBwebauthListenerHttp2": {
			"Type" : "AWS::ElasticLoadBalancingV2::Listener",
			"Properties" : {
				"DefaultActions": [{
					"Type": "forward",
					"TargetGroupArn": { "Ref": "rALBwebauthTarget2" }
				}],
				"LoadBalancerArn" : { "Ref": "rALBwebauth2" },
				"Port" : 80,
				"Protocol" : "HTTP"
			}
		},

		"rALBwebauthListenerHttps": {
			"Type" : "AWS::ElasticLoadBalancingV2::Listener",
			"Properties" : {
				"DefaultActions": [{
					"Type": "forward",
					"TargetGroupArn": { "Ref": "rALBwebauthTarget" }
				}],
				"LoadBalancerArn" : { "Ref": "rALBwebauth" },
				"Port" : 443,
				"Protocol" : "HTTPS",
				"SslPolicy" : "ELBSecurityPolicy-TLS-1-2-2017-01",
				"Certificates": [
					{ "CertificateArn":
						{ "Ref": "pWebauthCertARN" }
					}
				]
			}
		},

		"rALBwebauthListenerHttps2": {
			"Type" : "AWS::ElasticLoadBalancingV2::Listener",
			"Properties" : {
				"DefaultActions": [{
					"Type": "forward",
					"TargetGroupArn": { "Ref": "rALBwebauthTarget2" }
				}],
				"LoadBalancerArn" : { "Ref": "rALBwebauth2" },
				"Port" : 443,
				"Protocol" : "HTTPS",
				"Certificates": [
					{ "CertificateArn":
						{ "Ref": "pWebauthCertARN" }
					}
				]
			}
		},

		"rALBwebauthTarget": {
			"Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
			"Properties" : {
				"HealthCheckIntervalSeconds" : 30,
				"HealthCheckPath" : "/Shibboleth.sso/Metadata",
				"HealthCheckPort" : 80,
				"HealthCheckProtocol" : "HTTP",
				"HealthCheckTimeoutSeconds" : 5,
				"HealthyThresholdCount" : 2,
				"Matcher" : { "HttpCode" : "200" },
				"Port" : 80,
				"Protocol" : "HTTP",
				"Tags" : [
					{ "Key": "Name", "Value": { "Fn::Sub": "${pFriendlyName} Webauth ALB Target" } },
					{ "Key": "Role", "Value": "Webauth" },
					{ "Key": "AppStack", "Value": { "Ref": "pAppStackName" } },
					{ "Key": "Environment", "Value": { "Ref": "pEnvironment" } }
				],
				"TargetGroupAttributes": [
					{
						"Key": "deregistration_delay.timeout_seconds",
						"Value": "30"
					}
				],
				"UnhealthyThresholdCount" : 5,
				"VpcId" : { "Ref": "pProductionVPC" }
			}
		},

		"rALBwebauthTarget2": {
			"Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
			"Properties" : {
				"HealthCheckIntervalSeconds" : 30,
				"HealthCheckPath" : "/Shibboleth.sso/Metadata",
				"HealthCheckPort" : 80,
				"HealthCheckProtocol" : "HTTP",
				"HealthCheckTimeoutSeconds" : 5,
				"HealthyThresholdCount" : 2,
				"Matcher" : { "HttpCode" : "200" },
				"Port" : 80,
				"Protocol" : "HTTP",
				"Tags" : [
					{ "Key": "Name", "Value": { "Fn::Sub": "${pFriendlyName} Webauth ALB Target" } },
					{ "Key": "Role", "Value": "Webauth" },
					{ "Key": "AppStack", "Value": { "Ref": "pAppStackName" } },
					{ "Key": "Environment", "Value": { "Ref": "pEnvironment" } }
				],
				"TargetGroupAttributes": [
					{
						"Key": "deregistration_delay.timeout_seconds",
						"Value": "30"
					}
				],
				"UnhealthyThresholdCount" : 5,
				"VpcId" : { "Ref": "pProductionVPC" }
			}
		},

		"rAutoScalingConfigWebauth": {
			"Type": "AWS::AutoScaling::LaunchConfiguration",
			"Metadata": {
				"AWS::CloudFormation::Authentication":{
					"S3AccessCreds":{
						"type":"S3",
						"roleName":{ "Ref": "pInstanceIAMRole" },
						"buckets" : [ "cashnet-configfiles" , "cashnet-software" ]
					}
				},
				"AWS::CloudFormation::Init" : {
					"config" : {
						"version": "2016-10-18-001",
						"files" : {
							"c:\\cfn\\cfn-hup.conf" : {
								"content" : { "Fn::Join" : ["", [
									"[main]\n",
									"stack=", { "Ref" : "AWS::StackId" }, "\n",
									"region=", { "Ref" : "AWS::Region" }, "\n"
								]]}
							},
							"c:\\cfn\\hooks.d\\cfn-auto-reloader.conf" : {
								"content": { "Fn::Join" : ["", [
									"[cfn-auto-reloader-hook]\n",
									"triggers=post.update\n",
									"path=Resources.rAutoScalingConfigWebauth.Metadata.AWS::CloudFormation::Init\n",
									"action=cfn-init.exe -v -s ", { "Ref" : "AWS::StackId" },
										" -r rAutoScalingConfigWebauth",
										" --region ", { "Ref" : "AWS::Region" }, "\n"
								]]}
							},
							"c:\\temp\\domainjoin.ps1": {
								"content": { "Fn::Join" : ["", [
									"Set-DefaultAWSRegion -Region ", { "Ref" : "AWS::Region" }, " \r\n",
									"Set-Variable -name instance_id -value (Invoke-Restmethod -uri http://169.254.169.254/latest/meta-data/instance-id) \r\n",
									"$params = @{\"directoryId\"=\"", { "Ref": "pDirectoryService" }, "\"; \"directoryName\"=\"", { "Ref": "pDomainName" }, "\"}\r\n",
									"New-SSMAssociation -InstanceId $instance_id -Name \"AWS-JoinDirectoryServiceDomain\" -parameters $params\r\n"
								]]}
							},
							"c:\\temp\\installers\\splunkforwarder.msi" : {
								"source" : "https://cashnet-software.s3.amazonaws.com/splunk/splunkforwarder-latest-x64.msi"
							},
							"c:\\temp\\installers\\ConfigureSplunk.ps1" : {
								"source" : "https://cashnet-software.s3.amazonaws.com/splunk/ConfigureSplunk.ps1"
							},
							"c:\\temp\\installers\\alertlogic.msi": {
								"source" : "https://cashnet-software.s3.amazonaws.com/alertlogic/al_agent-LATEST.msi"
							},
							"c:\\environment.txt": {
								"content": { "Fn::Join" : ["", [
									{ "Ref": "pDBTypeKey" },
									"\r\n"
								]]}
							},
							"c:\\temp\\installers\\dsa_install.ps1": {
								"content": { "Fn::Join" : ["", [
									"[Net.ServicePointManager]::ServerCertificateValidationCallback = {$true} \r\n",
									"Start-Transcript -path \"c:\\temp\\dsa_deploy.log\" -append \r\n",
									"echo \"$(Get-Date -format T) - DSA download started\" \r\n",
									"(New-Object System.Net.WebClient).DownloadFile(\"https://",
									{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:ELBDeepSec" } },
									":443/software/agent/Windows/x86_64/\", \"c:\\temp\\dsa_agent.msi\") \r\n",
									"echo \"$(Get-Date -format T) - Downloaded File Size:\" (Get-Item \"c:\\temp\\dsa_agent.msi\").length \r\n",
									"echo \"$(Get-Date -format T) - DSA install started\" \r\n",
									"echo \"$(Get-Date -format T) - Installer Exit Code:\" (Start-Process -FilePath msiexec -ArgumentList \"/i c:\\temp\\dsa_agent.msi /qn ADDLOCAL=ALL /l*v `\"c:\\temp\\dsa_install.log`\"\" -Wait -PassThru).ExitCode \r\n",
									"echo \"$(Get-Date -format T) - DSA activation started\" \r\n",
									"Start-Sleep -s 50 \r\n",
									"& $Env:ProgramFiles\"\\Trend Micro\\Deep Security Agent\\dsa_control\" -r \r\n",
									"& $Env:ProgramFiles\"\\Trend Micro\\Deep Security Agent\\dsa_control\" -a dsm://",
									{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:ELBDeepSec" } },
									":4120/ \r\n",
									"Stop-Transcript \r\n",
									"echo \"$(Get-Date -format T) - DSA Deployment Finished\" \r\n"
								]]}
							},
							"c:\\temp\\setapppooluser.ps1": {
								"content": { "Fn::Join" : ["", [
									"Import-Module webadministration \r\n",
									"# ADD Domain service account to local IIS_IUSRS group\r\n",
									"net localgroup IIS_IUSRS /add ",
									{ "Ref": "pWebAppUser"},
									"\r\n",
									"# Set the app pool to run under that user\r\n",
									"Set-ItemProperty 'IIS:\\AppPools\\.NET v4.5 Classic' -name processModel -value @{userName=\"",
									{ "Ref": "pWebAppUser" },
									"\";password=\"",
									{ "Ref": "pWebAppPassword" },
									"\";identitytype=3} \r\n"
								]]}
							},
							"c:\\temp\\setmachineconfig.ps1": {
								"content": { "Fn::Join" : ["", [
									"# Open the machine.config file and handle it as XML\r\n",
									"$file = 'C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\Config\\machine.config'\r\n",
									"$doc = (Get-Content $file)-as [Xml]\r\n",
									"function setConfig {\r\n",
									"# Create a new appSettings section within the configuration section since it does not exist on a new build\r\n",
									"$appSettings = $doc.configuration.AppendChild($doc.CreateElement(\"appSettings\"));\r\n",
									"# Add the ServerNo key within the appSettings section, it will be last 4 characters of the instance ID\r\n",
									"$myinstance = (Invoke-Restmethod -uri http://169.254.169.254/latest/meta-data/instance-id) \r\n",
									"$myserverno = \"webce-\" + $myinstance.substring($myinstance.length -4, 4) \r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"ServerNo\")\r\n",
									"$newKey.SetAttribute(\"value\", $myserverno)\r\n",
									"# Add the DBType key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"DBType\")\r\n",
									{ "Fn::Sub": "$newKey.SetAttribute(\"value\", \"${pDBTypeKey}\")\r\n" },
									"# Add the rshostname key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"rshostname\")\r\n",
									"$newKey.SetAttribute(\"value\", \"",
									{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:RSurl" } },
									"\")\r\n",
									"# Add the cashnethost key within the appSettings section.  On webce it is a URL.  On webauth it is a hostname.\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"cashnethost\")\r\n",
									"$newKey.SetAttribute(\"value\", \"",
									{ "Ref": "pCashnetHost" },
									"\")\r\n",
									"# Add the ConnectionStrProd key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"ConnectionStrProd\")\r\n",
									"$newKey.SetAttribute(\"value\", \"Max Pool Size=5000; Connection Lifetime=450;Packet Size=4096; server=tcp:",
									{ "Ref": "pAGListener" },
									",1433; user id=", { "Ref": "pDBAppUser" }, "; password=", { "Ref": "pDBAppPassword" }, "; encrypt=yes; TrustServerCertificate=true; Database=", { "Ref": "pProdDBName" }, "\")\r\n" ,
									"# Add the ConnectionStrTrain key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"ConnectionStrTrain\")\r\n",
									"$newKey.SetAttribute(\"value\", \"Max Pool Size=5000; Connection Lifetime=450;Packet Size=4096; server=tcp:",
									{ "Ref": "pAGListener" },
									",1433; user id=", { "Ref": "pDBAppUser" }, "; password=", { "Ref": "pDBAppPassword" }, "; encrypt=yes; TrustServerCertificate=true; Database=", { "Ref": "pTrainDBName" }, "\")\r\n" ,
									"# Add the ReportingDBConnectionStrProd key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"ReportingDBConnectionStrProd\")\r\n",
									"$newKey.SetAttribute(\"value\", \"Max Pool Size=5000; Connection Lifetime=450;Packet Size=4096; server=SQLPR2; user id=",
									{ "Ref": "pDBAppUser" }, "; password=", { "Ref": "pDBAppPassword" }, "; encrypt=yes; TrustServerCertificate=true; Database=", { "Ref": "pProdDBName" }, "\")\r\n" ,
									"# Add the ReportingDBConnectionStrTrain key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"ReportingDBConnectionStrTrain\")\r\n",
									"$newKey.SetAttribute(\"value\", \"Max Pool Size=5000; Connection Lifetime=450;Packet Size=4096; server=SQLPR2; user id=",
									{ "Ref": "pDBAppUser" }, "; password=", { "Ref": "pDBAppPassword" }, "; encrypt=yes; TrustServerCertificate=true; Database=", { "Ref": "pTrainDBName" }, "\")\r\n" ,
									"# Add the legacy ConnectionStr key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"ConnectionStr\")\r\n",
									"$newKey.SetAttribute(\"value\", \"\")\r\n",
									"# Add the legacy MasterDBName key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"MasterDBName\")\r\n",
									"$newKey.SetAttribute(\"value\", \"\")\r\n",
									"# Add the ConnectionType key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"ConnectionType\")\r\n",
									"$newKey.SetAttribute(\"value\", \"1\")\r\n",
									"# Add the FilePath key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"FilePath\")\r\n",
									"$newKey.SetAttribute(\"value\", \"\\\\fileshare\\cashnet_file01_pub\\usr\\\")\r\n",
									"# Add the PathToPublicKeyRing key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"PathToPublicKeyRing\")\r\n",
									"$newKey.SetAttribute(\"value\", \"\\\\fileshare\\cashnet_file01_priv\\PGP\\cashnet.pkr\")\r\n",
									"# Add the PathToSecretKeyRing key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"PathToSecretKeyRing\")\r\n",
									"$newKey.SetAttribute(\"value\", \"\\\\fileshare\\cashnet_file01_priv\\PGP\\cashnet.skr\")\r\n",
									"# Add the PGPLicenseKey key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"PGPLicenseKey\")\r\n",
									"$newKey.SetAttribute(\"value\", \"0253696AF1B8E27F69F0B8A8CC13893347EC8B9B64906FDAEF5F95A8D108D3EE113CDC5D9CA3C1CA0B9F06E0D66A474A738F12672531B6749063C50CFD55B084B05DFBC75A4D132F84ADD152E00A31E7620BDF9026AC7348370B66C9EC2299B1CE164FBA5B3D40681613523973FC4E6390D4A33C7D4C0E02B5B5E7B134BD736A1ED52A238EB179B31FB885B098A1CC3392B32FA9246B81AA4EA06880455CB745904AE3FF3BA65C159DAFFC8CA639B10B72447BE6DBB12753FB5F8F820055FC0910FA60D4EEF62309AF9742A64D19F04713DB12CF1A3A0B52264EEE5D85173F381C5DDE0AEE7822E71B5EA8A5712205C70E282A4EAEF4471E472DB874367C36D3\")\r\n",
									"# Add the sessionState element within the system.web section\r\n",
									"$newSystemWeb = $doc.CreateElement(\"sessionState\")\r\n",
									"$doc.configuration.\"system.web\".AppendChild($newSystemWeb)\r\n",
									"$newSystemWeb.SetAttribute(\"mode\", \"SQLServer\")\r\n",
									"$newSystemWeb.SetAttribute(\"allowCustomSqlDatabase\", \"true\")\r\n",
									"$newSystemWeb.SetAttribute(\"sqlConnectionString\", \"Packet Size=4096; server=tcp:",
									{ "Ref": "pSTAGListener" },
									",1433; initial catalog=", { "Ref": "pSTDBName" }, "; user id=", { "Ref": "pSTDBUser" }, "; password=", { "Ref": "pSTDBPassword" }, "\")\r\n" ,
									"$newSystemWeb.SetAttribute(\"cookieless\", \"false\")\r\n",
									"$newSystemWeb.SetAttribute(\"timeout\", \"1200\")\r\n",
									"# Add the machineKey element within the system.web section\r\n",
									"$newSystemWeb = $doc.CreateElement(\"machineKey\")\r\n",
									"$doc.configuration.\"system.web\".AppendChild($newSystemWeb)\r\n",
									"$newSystemWeb.SetAttribute(\"validationKey\", \"962F842FCF4AC9E9FDF0C95BC42804CBA08304D2584950B057E579A29D6CA5C8124F095F2EBBA35E040959141C2C1472C698E80B80F1E3AE634EAD62E6450A1D,IsolateApps\")\r\n",
									"$newSystemWeb.SetAttribute(\"decryptionKey\", \"6F2A71E5A07911814A3D05776870EAA6AB90DCB6552F2086,IsolateApps\")\r\n",
									"$newSystemWeb.SetAttribute(\"validation\", \"SHA1\")\r\n",
									"# Add the local_addr element within the appSettings section; this one is interesting because it needs our IP address.\r\n",
									"$myip = (Invoke-Restmethod -uri http://169.254.169.254/latest/meta-data/local-ipv4)\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"local_addr\")\r\n",
									"$newKey.SetAttribute(\"value\", $myip)\r\n",
									"# Save the file\r\n",
									"$doc.save($file)\r\n",
									"}\r\n",
									"#check if config values have already been written; exit 0 if yes, else write the values\r\n",
									"if ($doc.SelectSingleNode('//add[@key=\"ServerNo\"]').Value -ne $null)\r\n",
									"{\r\n",
									"exit 0\r\n",
									"}\r\n",
									"else\r\n",
									"{\r\n",
									"setConfig\r\n",
									"}\r\n"
								]]}
							},
							"c:\\temp\\web.config": {
								"source" : "https://cashnet-configfiles.s3.amazonaws.com/webce/web.config"
							},
							"c:\\temp\\deploywebauth_1_1.ps1": {
								"source" : "https://cashnet-configfiles.s3.amazonaws.com/webauth/deploywebauth_1_1.ps1"
							},
							"c:\\temp\\shibboleth-sp-2.6.1.4-win64.msi": {
								"source" : "https://cashnet-software.s3.amazonaws.com/shibboleth/shibboleth-sp-2.6.1.4-win64.msi"
							},
							"c:\\temp\\codedeploy-agent.msi": {
								"source" : { "Fn::Sub" : "https://aws-codedeploy-${AWS::Region}.s3.amazonaws.com/latest/codedeploy-agent.msi" }
							}
						},
						"sources": {
							"c:\\opt\\shibboleth-sp\\etc\\shibboleth": "https://cashnet-configfiles.s3.amazonaws.com/webauth/shibSPconfigs.zip"
						},
						"commands" : {
							"03-DomainJoin": {
								"command": "powershell.exe -ExecutionPolicy unrestricted . 'c:\\temp\\domainjoin.ps1'",
								"waitAfterCompletion": "forever"
							},
							"04-install-splunk": {
								"command": "mkdir c:\\logs & c:\\temp\\installers\\splunkforwarder.msi RECEIVING_INDEXER=\"logs:9997\" MONITOR_PATH=\"C:\\LOGS\" WINEVENTLOG_SEC_ENABLE=1 WINEVENTLOG_SYS_ENABLE=1 WINEVENTLOG_APP_ENABLE=1 AGREETOLICENSE=Yes /quiet /L*v c:\\temp\\splunk_install.log",
								"waitAfterCompletion": 0
							},
							"04a-ConfigureSplunk": {
								"command": "powershell.exe -ExecutionPolicy unrestricted . 'c:\\temp\\installers\\ConfigureSplunk.ps1' 'webauth' 'C:\\opt\\shibboleth-sp\\var\\log\\shibboleth'",
								"waitAfterCompletion": "0"
							},
							"05-InstallDeepSec": {
								"command": "powershell.exe -ExecutionPolicy unrestricted . 'c:\\temp\\installers\\dsa_install.ps1'",
								"waitAfterCompletion": "0"
							},
							"06-install-alertlogic": {
								"command": "msiexec /i c:\\temp\\installers\\alertlogic.msi prov_key=d450f7170ea98662c07e2b5bd991213ca55d96b2369b3ba901 /q",
								"waitAfterCompletion": 0
							},
							"07-disable-win-fw": {
                                "command": "powershell.exe -Command \"Get-NetFirewallProfile | Set-NetFirewallProfile -Enabled False\"",
								"waitAfterCompletion": "0"
                            },
							"10-DeployWebauth": {
								"command": "powershell.exe -ExecutionPolicy unrestricted . 'c:\\temp\\deploywebauth_1_1.ps1'",
								"waitAfterCompletion": "0"
							},
							"20-SetAppPoolUser": {
								"command": "powershell.exe -ExecutionPolicy unrestricted . 'c:\\temp\\setapppooluser.ps1'",
								"waitAfterCompletion": "0"
							},
							"25-SetMachineConfig": {
								"command": "powershell.exe -ExecutionPolicy unrestricted . 'c:\\temp\\setmachineconfig.ps1'",
								"waitAfterCompletion": "0"
							},
							"30-InstallCodeDeploy": {
								"command": "c:\\temp\\codedeploy-agent.msi",
								"waitAfterCompletion": "0"
							}
						},
						"services" : {
							"windows" : {
								"cfn-hup" : {
									"enabled" : "true",
									"ensureRunning" : "true",
									"files" : ["c:\\cfn\\cfn-hup.conf", "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"]
								}
							}
						}
					}
				}
			},
			"Properties": {
				"ImageId": { "Ref": "pWindowsIISAMI" },
				"InstanceType": { "Ref": "pMiscInstanceType" },
				"IamInstanceProfile": { "Ref": "pInstanceIAMProfile" },
				"KeyName": { "Ref": "pEC2KeyPair" },
				"SecurityGroups": [
					{ "Ref": "rSGwebauth" },
					{ "Ref": "rSGcndotnetcode" },
					{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGfileshareaccess" } },
					{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SG000" } },
					{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGdomainmember" } }
				],
				"UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
					"<script>\n",
					"C:\\Windows\\System32\\tzutil /s \"Eastern Standard Time\"\n",
					"cfn-init.exe ",
					" --stack ", { "Ref" : "AWS::StackName" },
					" --resource rAutoScalingConfigWebauth ",
					" --region ", { "Ref" : "AWS::Region" }, "\n",
					"</script>\n"
				]]}}
			}
		},

		"rAutoScalingGroupWebauth": {
			"Type": "AWS::AutoScaling::AutoScalingGroup",
			"DependsOn": "rAutoScalingConfigWebauth",
			"Properties": {
				"AvailabilityZones": [
					{ "Ref": "pRegionAZ1Name" }
				],
				"VPCZoneIdentifier": [
					{ "Ref": "pSubnetA" }
				],
				"LaunchConfigurationName": { "Ref": "rAutoScalingConfigWebauth" },
				"DesiredCapacity": "1",
				"MinSize": "1",
				"MaxSize": "1",
				"TargetGroupARNs": [ { "Ref": "rALBwebauthTarget" } ],
				"TerminationPolicies" : ["OldestInstance"],
				"HealthCheckType": "EC2",
				"HealthCheckGracePeriod": "3600",
			    "NotificationConfigurations" : [
					{
						"TopicARN" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SecurityAlarmTopic" } },
						"NotificationTypes" : [
							"autoscaling:EC2_INSTANCE_LAUNCH",
							"autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
							"autoscaling:EC2_INSTANCE_TERMINATE",
							"autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
						]
					}
				],
				"Tags": [
					{
						"Key": "Name",
						"Value": { "Fn::Join" : [ " ", [ "Webauth", { "Ref": "pFriendlyName" } ] ] },
						"PropagateAtLaunch": "true"
					},
					{
						"Key": "Environment",
						"Value": { "Ref": "pEnvironment" },
						"PropagateAtLaunch": "true"
					},
					{
						"Key": "Role",
						"Value": "Webauth",
						"PropagateAtLaunch": "true"
					},
					{
						"Key": "Patch Group",
						"Value": { "Ref": "pEnvironment" },
						"PropagateAtLaunch": "true"
					},
					{
						"Key": "AppStack",
						"Value": { "Ref": "pAppStackName" },
						"PropagateAtLaunch": "true"
					}
				]
			}
		},

		"rAutoScalingGroupWebauth2": {
			"Type": "AWS::AutoScaling::AutoScalingGroup",
			"DependsOn": "rAutoScalingConfigWebauth",
			"Properties": {
				"AvailabilityZones": [
					{ "Ref": "pRegionAZ2Name" }
				],
				"VPCZoneIdentifier": [
					{ "Ref": "pSubnetB" }
				],
				"LaunchConfigurationName": { "Ref": "rAutoScalingConfigWebauth" },
				"DesiredCapacity": "1",
				"MinSize": "1",
				"MaxSize": "1",
				"TargetGroupARNs": [ { "Ref": "rALBwebauthTarget2" } ],
				"TerminationPolicies" : ["OldestInstance"],
				"HealthCheckType": "EC2",
				"HealthCheckGracePeriod": "3600",
			    "NotificationConfigurations" : [
					{
						"TopicARN" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SecurityAlarmTopic" } },
						"NotificationTypes" : [
							"autoscaling:EC2_INSTANCE_LAUNCH",
							"autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
							"autoscaling:EC2_INSTANCE_TERMINATE",
							"autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
						]
					}
				],
				"Tags": [
					{
						"Key": "Name",
						"Value": { "Fn::Join" : [ " ", [ "Webauth", { "Ref": "pFriendlyName" } ] ] },
						"PropagateAtLaunch": "true"
					},
					{
						"Key": "Environment",
						"Value": { "Ref": "pEnvironment" },
						"PropagateAtLaunch": "true"
					},
					{
						"Key": "Role",
						"Value": "Webauth",
						"PropagateAtLaunch": "true"
					},
					{
						"Key": "Patch Group",
						"Value": { "Ref": "pEnvironment" },
						"PropagateAtLaunch": "true"
					},
					{
						"Key": "AppStack",
						"Value": { "Ref": "pAppStackName" },
						"PropagateAtLaunch": "true"
					}
				]
			}
		},

		"rCodeDeployGroupWebauthShibidp": {
			"Type" : "AWS::CodeDeploy::DeploymentGroup",
			"DependsOn" : "rCodeDeployGroup404handler",
			"Properties" : {
				"ApplicationName" : "webauth-shibidp",
				"AutoScalingGroups" : [ { "Ref": "rAutoScalingGroupWebauth" }, { "Ref": "rAutoScalingGroupWebauth2" }  ],
				"DeploymentConfigName" : "CodeDeployDefault.OneAtATime",
				"DeploymentGroupName" : { "Fn::Sub": "WebauthShibidp-${pFriendlyName}" },
				"ServiceRoleArn" : { "Ref": "pCodeDeployServiceRoleArn" },
				"Deployment" : {
					"Description" : "Initial Webauth ShibIdP Deployment",
					"Revision" : {
						"RevisionType" : "S3",
						"S3Location" : {
							"Bucket" : "cashnet-codedeploy",
							"Key" : "webauth-shibidp.zip",
							"BundleType" : "Zip"
						}
					}
				}
			}
		},


		"rALBtomcat": {
			"Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
			"Properties" : {
				"Scheme": "internal",
				"SecurityGroups": [
					{ "Ref": "rSGtomcatELB" },
					{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SG000" } }
				],
				"Subnets": [{
					"Ref": "pSubnetA"
				}, {
					"Ref": "pSubnetB"
				}],
				"LoadBalancerAttributes" : [
					{ "Key" : "access_logs.s3.enabled", "Value" : "false" },
					{ "Key" : "access_logs.s3.bucket", "Value" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:S3ELBAccessLogs" } } },
					{ "Key" : "access_logs.s3.prefix", "Value" : "Logs" },
					{ "Key" : "idle_timeout.timeout_seconds", "Value": "210"}
				],
				"Tags": [
					{ "Key": "Name", "Value": { "Fn::Sub": "${pFriendlyName} Tomcat ALB" } },
					{ "Key": "Role", "Value": "Tomcat" },
					{ "Key": "AppStack", "Value": { "Ref": "pAppStackName" } },
					{ "Key": "Environment", "Value": { "Ref": "pEnvironment" } }
				]
			}
		},

		"rALBtomcatListener8083": {
			"Type" : "AWS::ElasticLoadBalancingV2::Listener",
			"Properties" : {
				"DefaultActions": [{
					"Type": "forward",
					"TargetGroupArn": { "Ref": "rALBtomcatTarget8083" }
				}],
				"LoadBalancerArn" : { "Ref": "rALBtomcat" },
				"Port" : 8083,
				"Protocol" : "HTTP"
			}
		},

		"rALBtomcatTarget8083": {
			"Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
			"Properties" : {
				"HealthCheckIntervalSeconds" : 30,
				"HealthCheckPath" : "/lbmonitor/servlet/lbmonitor",
				"HealthCheckPort" : "traffic-port",
				"HealthCheckProtocol" : "HTTP",
				"HealthCheckTimeoutSeconds" : 5,
				"HealthyThresholdCount" : 2,
				"Matcher" : { "HttpCode" : "200" },
				"Port" : 8083,
				"Protocol" : "HTTP",
				"Tags" : [
					{ "Key": "Name", "Value": { "Fn::Sub": "${pFriendlyName} Tomcat ALB Target" } },
					{ "Key": "Role", "Value": "Tomcat" },
					{ "Key": "AppStack", "Value": { "Ref": "pAppStackName" } },
					{ "Key": "Environment", "Value": { "Ref": "pEnvironment" } }
				],
				"TargetGroupAttributes": [
					{
						"Key": "deregistration_delay.timeout_seconds",
						"Value": "30"
					}
				],
				"UnhealthyThresholdCount" : 5,
				"VpcId" : { "Ref": "pProductionVPC" }
			}
		},

		"rALBtomcatListener8084": {
			"Type" : "AWS::ElasticLoadBalancingV2::Listener",
			"Properties" : {
				"DefaultActions": [{
					"Type": "forward",
					"TargetGroupArn": { "Ref": "rALBtomcatTarget8084" }
				}],
				"LoadBalancerArn" : { "Ref": "rALBtomcat" },
				"Port" : 8084,
				"Protocol" : "HTTP"
			}
		},

		"rALBtomcatTarget8084": {
			"Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
			"Properties" : {
				"HealthCheckIntervalSeconds" : 30,
				"HealthCheckPath" : "/lbmonitor/servlet/lbmonitor",
				"HealthCheckPort" : "traffic-port",
				"HealthCheckProtocol" : "HTTP",
				"HealthCheckTimeoutSeconds" : 5,
				"HealthyThresholdCount" : 2,
				"Matcher" : { "HttpCode" : "200" },
				"Port" : 8084,
				"Protocol" : "HTTP",
				"Tags" : [
					{ "Key": "Name", "Value": { "Fn::Sub": "${pFriendlyName} Tomcat ALB Target" } },
					{ "Key": "Role", "Value": "Tomcat" },
					{ "Key": "AppStack", "Value": { "Ref": "pAppStackName" } },
					{ "Key": "Environment", "Value": { "Ref": "pEnvironment" } }
				],
				"TargetGroupAttributes": [
					{
						"Key": "deregistration_delay.timeout_seconds",
						"Value": "30"
					}
				],
				"UnhealthyThresholdCount" : 5,
				"VpcId" : { "Ref": "pProductionVPC" }
			}
		},

		"rALBtomcatListener8085": {
			"Type" : "AWS::ElasticLoadBalancingV2::Listener",
			"Properties" : {
				"DefaultActions": [{
					"Type": "forward",
					"TargetGroupArn": { "Ref": "rALBtomcatTarget8085" }
				}],
				"LoadBalancerArn" : { "Ref": "rALBtomcat" },
				"Port" : 8085,
				"Protocol" : "HTTP"
			}
		},

		"rALBtomcatTarget8085": {
			"Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
			"Properties" : {
				"HealthCheckIntervalSeconds" : 30,
				"HealthCheckPath" : "/lbmonitor/servlet/lbmonitor",
				"HealthCheckPort" : "traffic-port",
				"HealthCheckProtocol" : "HTTP",
				"HealthCheckTimeoutSeconds" : 5,
				"HealthyThresholdCount" : 2,
				"Matcher" : { "HttpCode" : "200" },
				"Port" : 8085,
				"Protocol" : "HTTP",
				"Tags" : [
					{ "Key": "Name", "Value": { "Fn::Sub": "${pFriendlyName} Tomcat ALB Target" } },
					{ "Key": "Role", "Value": "Tomcat" },
					{ "Key": "AppStack", "Value": { "Ref": "pAppStackName" } },
					{ "Key": "Environment", "Value": { "Ref": "pEnvironment" } }
				],
				"TargetGroupAttributes": [
					{
						"Key": "deregistration_delay.timeout_seconds",
						"Value": "30"
					}
				],
				"UnhealthyThresholdCount" : 5,
				"VpcId" : { "Ref": "pProductionVPC" }
			}
		},

		"rAutoScalingConfigTomcat": {
			"Type": "AWS::AutoScaling::LaunchConfiguration",
			"DependsOn": ["rALBtomcat"],
			"Metadata": {
				"AWS::CloudFormation::Authentication":{
					"S3AccessCreds":{
						"type":"S3",
						"roleName":{ "Ref": "pInstanceIAMRole" },
						"buckets" : [ "cashnet-configfiles", "cashnet-software" ]
					}
				},
				"AWS::CloudFormation::Init": {
					"config": {
						"packages": {
							"yum": {
								"telnet":  []
							}
						},
						"files" : {
							"/etc/cfn/cfn-hup.conf" : {
								"content" : { "Fn::Join" : ["", [
									"[main]\n",
									"stack=", { "Ref" : "AWS::StackId" }, "\n",
									"region=", { "Ref" : "AWS::Region" }, "\n"
								]]}
							},
							"/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
								"content": { "Fn::Join" : ["", [
									"[cfn-auto-reloader-hook]\n",
									"triggers=post.update\n",
									"path=Resources.rAutoScalingConfigTomcat.Metadata.AWS::CloudFormation::Init\n",
									"action=cfn-init.exe -v -s ", { "Ref" : "AWS::StackId" },
										" -r rAutoScalingConfigTomcat",
										" --region ", { "Ref" : "AWS::Region" }, "\n"
								]]}
							},
							"/install/codedeploy/install": {
								"source" : { "Fn::Sub" : "https://aws-codedeploy-${AWS::Region}.s3.amazonaws.com/latest/install" },
								"mode": "000700",
								"owner": "root",
								"group": "root"
							},
							"/install/splunkforwarder.rpm": {
								"source": "https://cashnet-software.s3.amazonaws.com/splunk/splunkforwarder-6.5.1-f74036626f0c-linux-2.6-x86_64.rpm",
								"mode": "000700",
								"owner": "root",
								"group": "root"
							},
							"/install/al-agent-LATEST-1.x86_64.rpm": {
								"source" : "https://cashnet-software.s3.amazonaws.com/alertlogic/al-agent-LATEST-1.x86_64.rpm"
							},
							"/install/dsa_install.sh": {
								"content": { "Fn::Join" : ["", [
									"#!/usr/bin/env bash \n",
									"wget https://",
									{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:ELBDeepSec" } },
									":443/software/agent/amzn1/x86_64/ -O /tmp/agent.rpm --no-check-certificate --quiet \n",
									"rpm -ihv /tmp/agent.rpm \n",
									"sleep 15 \n",
									"/opt/ds_agent/dsa_control -r \n",
									"/opt/ds_agent/dsa_control -a dsm://",
									{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:ELBDeepSec" } },
									":4120/ \n"
								]]},
								"mode": "000700",
								"owner": "root",
								"group": "root"
							},
							"/install/AWS-PCI.sh": {
								"source" : "https://cashnet-configfiles.s3.amazonaws.com/linux-hardening/AWS-PCI.sh",
								"mode": "000700",
								"owner": "root",
								"group": "root"
							},
							"/install/audit_rules.tgz": {
								"source" : "https://cashnet-configfiles.s3.amazonaws.com/linux-hardening/audit_rules.tgz",
								"mode": "000600",
								"owner": "root",
								"group": "root"
							},
							"/install/config-tomcat.sh": {
								"source" : "https://cashnet-configfiles.s3.amazonaws.com/tomcat/config-tomcat.sh",
								"mode": "000700",
								"owner": "root",
								"group": "root"
							},
							"/install/java/jdk-1_5_0_22-linux-amd64.bin": {
								"source" : "https://cashnet-software.s3.amazonaws.com/java/jdk-1_5_0_22-linux-amd64.bin",
								"mode": "000700",
								"owner": "root",
								"group": "root"
							},
							"/install/java/jre-6u45-linux-x64-rpm.bin": {
								"source" : "https://cashnet-software.s3.amazonaws.com/java/jre-6u45-linux-x64-rpm.bin",
								"mode": "000700",
								"owner": "root",
								"group": "root"
							},
							"/install/java/jre-7u80-linux-x64.rpm": {
								"source" : "https://cashnet-software.s3.amazonaws.com/java/jre-7u80-linux-x64.rpm",
								"mode": "000700",
								"owner": "root",
								"group": "root"
							},
							"/install/java/jre-8u152-linux-x64.rpm": {
								"source" : "https://cashnet-software.s3.amazonaws.com/java/jre-8u152-linux-x64.rpm",
								"mode": "000700",
								"owner": "root",
								"group": "root"
							},
							"/install/tomcat/apache-tomcat-5.5.36.tar.gz": {
								"source" : "https://cashnet-software.s3.amazonaws.com/tomcat/apache-tomcat-5.5.36.tar.gz",
								"mode": "000700",
								"owner": "root",
								"group": "root"
							},
							"/install/tomcat/apache-tomcat-7.0.73.tar.gz": {
								"source" : "https://cashnet-software.s3.amazonaws.com/tomcat/apache-tomcat-7.0.73.tar.gz",
								"mode": "000700",
								"owner": "root",
								"group": "root"
							},
							"/install/tomcat/apache-tomcat-9.0.1.tar.gz": {
								"source" : "https://cashnet-software.s3.amazonaws.com/tomcat/apache-tomcat-9.0.1.tar.gz",
								"mode": "000700",
								"owner": "root",
								"group": "root"
							},
							"/install/tomcat/tc-conf.tgz": {
								"source" : "https://cashnet-software.s3.amazonaws.com/tomcat/tc-conf.tgz",
								"mode": "000700",
								"owner": "root",
								"group": "root"
							},
							"/install/tomcat/tomcat-juli-adapters.jar": {
								"source" : "https://cashnet-software.s3.amazonaws.com/tomcat/tomcat-juli-adapters.jar",
								"mode": "000700",
								"owner": "root",
								"group": "root"
							},
							"/install/tomcat/tomcat-juli.jar": {
								"source" : "https://cashnet-software.s3.amazonaws.com/tomcat/tomcat-juli.jar",
								"mode": "000700",
								"owner": "root",
								"group": "root"
							}
						},
						"commands" : {
							"05-harden-linux": {
								"command": { "Fn::Join": ["", [ "/install/AWS-PCI.sh -u ", { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:DomainJoinUser" } }, " -p ",  { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:DomainJoinPassword" } }, " -r Tomcat", " -s ", {"Ref":"pAppStackName"} ] ] },
								"waitAfterCompletion": "0"
							},
							"08-install-deep-security": {
								"command": "/install/dsa_install.sh",
								"waitAfterCompletion": "0"
							},
							"10-config-tomcat": {
								"command": "/install/config-tomcat.sh",
								"waitAfterCompletion": "0"
							},
							"30-install-codedeploy-agent": {
								"command": "cd /install/codedeploy ; ./install auto",
								"waitAfterCompletion": "0"
							}
						}
					}
				}
			},

			"Properties": {
				"AssociatePublicIpAddress" : "false",
				"BlockDeviceMappings": [{
					"DeviceName": "/dev/xvda",
					"Ebs" : {"VolumeSize": "16"}
				}],
				"IamInstanceProfile": { "Ref": "pInstanceIAMProfile" },
				"ImageId": { "Ref": "pLinuxAMI" },
				"InstanceType": { "Ref": "pTomcatInstanceType" },
				"KeyName": { "Ref": "pEC2KeyPair" },
				"SecurityGroups": [
					{ "Ref": "rSGtomcat" },
					{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGfileshareaccess" } },
					{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SG000" } },
					{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGdomainmember" } }
				],
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": ["", [
							"#!/bin/bash\n",
							"yum update -y aws-cfn-bootstrap\n",
							"/opt/aws/bin/cfn-init -v ",
							"         --stack ", {
								"Ref": "AWS::StackName"
							},
							"         --resource rAutoScalingConfigTomcat ",
							"         --region ", {
								"Ref": "AWS::Region"
							}, "\n"
						]]
					}
				}
			}
		},

		"rAutoScalingGroupTomcat": {
			"Type": "AWS::AutoScaling::AutoScalingGroup",
			"DependsOn": "rAutoScalingConfigTomcat",
			"Properties": {
				"AvailabilityZones": [
					{ "Ref": "pRegionAZ1Name" },
					{ "Ref": "pRegionAZ2Name" }
				],
				"VPCZoneIdentifier": [
					{ "Ref": "pSubnetA" },
					{ "Ref": "pSubnetB" }
				],
				"LaunchConfigurationName": { "Ref": "rAutoScalingConfigTomcat" },
				"DesiredCapacity": { "Ref" : "pTomcatMinInstances" },
				"MinSize": { "Ref" : "pTomcatMinInstances" },
				"MaxSize": { "Ref" : "pTomcatMaxInstances" },
				"TargetGroupARNs": [
					{ "Ref": "rALBtomcatTarget8083" },
					{ "Ref": "rALBtomcatTarget8084" },
					{ "Ref": "rALBtomcatTarget8085" }
				],
				"TerminationPolicies" : ["OldestInstance"],
				"HealthCheckType": "EC2",
				"HealthCheckGracePeriod": "1800",
			    "NotificationConfigurations" : [
					{
						"TopicARN" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SecurityAlarmTopic" } },
						"NotificationTypes" : [
							"autoscaling:EC2_INSTANCE_LAUNCH",
							"autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
							"autoscaling:EC2_INSTANCE_TERMINATE",
							"autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
						]
					}
				],
				"Tags": [
					{
						"Key": "Name",
						"Value": { "Fn::Join" : [ " ", [ "Tomcat", { "Ref": "pFriendlyName" } ] ] },
						"PropagateAtLaunch": "true"
					},
					{
						"Key": "Environment",
						"Value": { "Ref": "pEnvironment" },
						"PropagateAtLaunch": "true"
					},
					{
						"Key": "Role",
						"Value": "Tomcat",
						"PropagateAtLaunch": "true"
					},
					{
						"Key": "AppStack",
						"Value": { "Ref": "pAppStackName" },
						"PropagateAtLaunch": "true"
					}
				]
			}
		},

		"rAutoScalingUpTomcat": {
			"Type": "AWS::AutoScaling::ScalingPolicy",
			"Properties": {
				"AdjustmentType": "ChangeInCapacity",
				"AutoScalingGroupName": {
					"Ref": "rAutoScalingGroupTomcat"
				},
				"Cooldown": "500",
				"ScalingAdjustment": "1"
			}
		},

		"rAutoScalingDownTomcat": {
			"Type": "AWS::AutoScaling::ScalingPolicy",
			"Properties": {
				"AdjustmentType": "ChangeInCapacity",
				"AutoScalingGroupName": {
					"Ref": "rAutoScalingGroupTomcat"
				},
				"Cooldown": "500",
				"ScalingAdjustment": "-1"
			}
		},

		"rCWAlarmHighCPUTomcat": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"EvaluationPeriods": "1",
				"Statistic": "Average",
				"Threshold": "60",
				"AlarmDescription": "Alarm if CPU too high or metric disappears indicating instance is down",
				"Period": "180",
				"AlarmActions": [{
					"Ref": "rAutoScalingUpTomcat"
				}],
				"Namespace": "AWS/EC2",
				"Dimensions": [{
					"Name": "AutoScalingGroupName",
					"Value": {
						"Ref": "rAutoScalingGroupTomcat"
					}
				}],
				"ComparisonOperator": "GreaterThanThreshold",
				"MetricName": "CPUUtilization"
			}
		},

		"rCWAlarmLowCPUTomcat": {
			"Type": "AWS::CloudWatch::Alarm",
			"DependsOn": "rAutoScalingGroupTomcat",
			"Properties": {
				"EvaluationPeriods": "1",
				"Statistic": "Average",
				"Threshold": "15",
				"AlarmDescription": "Alarm if CPU too too, remove a webserver",
				"Period": "300",
				"AlarmActions": [{
					"Ref": "rAutoScalingDownTomcat"
				}],
				"Namespace": "AWS/EC2",
				"Dimensions": [{
					"Name": "AutoScalingGroupName",
					"Value": {
						"Ref": "rAutoScalingGroupTomcat"
					}
				}],
				"ComparisonOperator": "LessThanThreshold",
				"MetricName": "CPUUtilization"
			}
		},

		"rCodeDeployGroupTomcat4": {
			"Type" : "AWS::CodeDeploy::DeploymentGroup",
			"Properties" : {
				"ApplicationName" : "tomcat4",
				"AutoScalingGroups" : [ { "Ref": "rAutoScalingGroupTomcat" } ],
				"DeploymentConfigName" : "CodeDeployDefault.OneAtATime",
				"DeploymentGroupName" : { "Fn::Sub": "tomcat4-${pFriendlyName}" },
				"ServiceRoleArn" : { "Ref": "pCodeDeployServiceRoleArn" },
				"Deployment" : {
					"Description" : "Initial cnbatches Deployment",
					"Revision" : {
						"RevisionType" : "S3",
						"S3Location" : {
							"Bucket" : "cashnet-codedeploy",
							"Key" : "tomcat4.zip",
							"BundleType" : "Zip"
						}
					}
				}
			}
		},

		"rCodeDeployGroupTomcat5": {
			"Type" : "AWS::CodeDeploy::DeploymentGroup",
			"DependsOn": "rCodeDeployGroupTomcat4",
			"Properties" : {
				"ApplicationName" : "tomcat5",
				"AutoScalingGroups" : [ { "Ref": "rAutoScalingGroupTomcat" } ],
				"DeploymentConfigName" : "CodeDeployDefault.OneAtATime",
				"DeploymentGroupName" : { "Fn::Sub": "tomcat5-${pFriendlyName}" },
				"ServiceRoleArn" : { "Ref": "pCodeDeployServiceRoleArn" },
				"Deployment" : {
					"Description" : "Initial cnbatches Deployment",
					"Revision" : {
						"RevisionType" : "S3",
						"S3Location" : {
							"Bucket" : "cashnet-codedeploy",
							"Key" : "tomcat5.zip",
							"BundleType" : "Zip"
						}
					}
				}
			}
		},

		"rCodeDeployGroupTomcat6": {
			"Type" : "AWS::CodeDeploy::DeploymentGroup",
			"DependsOn": "rCodeDeployGroupTomcat5",
			"Properties" : {
				"ApplicationName" : "tomcat6",
				"AutoScalingGroups" : [ { "Ref": "rAutoScalingGroupTomcat" } ],
				"DeploymentConfigName" : "CodeDeployDefault.OneAtATime",
				"DeploymentGroupName" : { "Fn::Sub": "tomcat6-${pFriendlyName}" },
				"ServiceRoleArn" : { "Ref": "pCodeDeployServiceRoleArn" },
				"Deployment" : {
					"Description" : "Initial cnbatches Deployment",
					"Revision" : {
						"RevisionType" : "S3",
						"S3Location" : {
							"Bucket" : "cashnet-codedeploy",
							"Key" : "tomcat6.zip",
							"BundleType" : "Zip"
						}
					}
				}
			}
		},


		"rELBjob": {
			"Type": "AWS::ElasticLoadBalancing::LoadBalancer",
			"Properties": {
				"Subnets": [{
					"Ref": "pSubnetA"
				}, {
					"Ref": "pSubnetB"
				}],
				"CrossZone": "true",
				"HealthCheck": {
					"HealthyThreshold": "2",
					"Interval": "30",
					"Target": "TCP:77",
					"Timeout": "5",
					"UnhealthyThreshold": "5"
				},
				"AccessLoggingPolicy": {
					"S3BucketName": {
						"Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:S3ELBAccessLogs" }
					},
					"S3BucketPrefix": "Logs",
					"Enabled": "false",
					"EmitInterval": "60"
				},
				"SecurityGroups": [
					{ "Ref": "rSGjobELB" },
					{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SG000" } }
				],
				"Scheme": "internal",
				"Listeners": [
					{ "InstancePort": "77", "LoadBalancerPort": "77", "Protocol": "TCP", "InstanceProtocol": "TCP" }
				],
				"ConnectionDrainingPolicy": {
					"Enabled" : "true",
					"Timeout" : "900"
				},
				"Tags": [
					{ "Key": "Name", "Value": { "Fn::Sub": "${pFriendlyName} Job ELB" } },
					{ "Key": "Role", "Value": "Job" },
					{ "Key": "AppStack", "Value": { "Ref": "pAppStackName" } },
					{ "Key": "Environment", "Value": { "Ref": "pEnvironment" } }
				]
			}
		},

		"rAutoScalingConfigJob": {
			"Type": "AWS::AutoScaling::LaunchConfiguration",
			"DependsOn": "rALBwebce",
			"Metadata": {
				"AWS::CloudFormation::Authentication":{
					"S3AccessCreds":{
						"type":"S3",
						"roleName":{ "Ref": "pInstanceIAMRole" },
						"buckets" : [ "cashnet-configfiles", "cashnet-software" ]
					}
				},
				"AWS::CloudFormation::Init" : {
					"config" : {
						"version": "2016-10-18-001",
						"files" : {
							"c:\\cfn\\cfn-hup.conf" : {
								"content" : { "Fn::Join" : ["", [
									"[main]\n",
									"stack=", { "Ref" : "AWS::StackId" }, "\n",
									"region=", { "Ref" : "AWS::Region" }, "\n"
								]]}
							},
							"c:\\cfn\\hooks.d\\cfn-auto-reloader.conf" : {
								"content": { "Fn::Join" : ["", [
									"[cfn-auto-reloader-hook]\n",
									"triggers=post.update\n",
									"path=Resources.rAutoScalingConfigJob.Metadata.AWS::CloudFormation::Init\n",
									"action=cfn-init.exe -v -s ", { "Ref" : "AWS::StackId" },
										" -r rAutoScalingConfigJob",
										" --region ", { "Ref" : "AWS::Region" }, "\n"
								]]}
							},
							"c:\\temp\\domainjoin.ps1": {
								"content": { "Fn::Join" : ["", [
									"Set-DefaultAWSRegion -Region ", { "Ref" : "AWS::Region" }, " \r\n",
									"Set-Variable -name instance_id -value (Invoke-Restmethod -uri http://169.254.169.254/latest/meta-data/instance-id) \r\n",
									"$params = @{\"directoryId\"=\"", { "Ref": "pDirectoryService" }, "\"; \"directoryName\"=\"", { "Ref": "pDomainName" }, "\"}\r\n",
									"New-SSMAssociation -InstanceId $instance_id -Name \"AWS-JoinDirectoryServiceDomain\" -parameters $params\r\n"
								]]}
							},
							"c:\\temp\\installers\\splunkforwarder.msi" : {
								"source" : "https://cashnet-software.s3.amazonaws.com/splunk/splunkforwarder-latest-x64.msi"
							},
							"c:\\temp\\installers\\ConfigureSplunk.ps1" : {
								"source" : "https://cashnet-software.s3.amazonaws.com/splunk/ConfigureSplunk.ps1"
							},
							"c:\\temp\\installers\\alertlogic.msi": {
								"source" : "https://cashnet-software.s3.amazonaws.com/alertlogic/al_agent-LATEST.msi"
							},
							"c:\\temp\\installers\\dsa_install.ps1": {
								"content": { "Fn::Join" : ["", [
									"[Net.ServicePointManager]::ServerCertificateValidationCallback = {$true} \r\n",
									"Start-Transcript -path \"c:\\temp\\dsa_deploy.log\" -append \r\n",
									"echo \"$(Get-Date -format T) - DSA download started\" \r\n",
									"(New-Object System.Net.WebClient).DownloadFile(\"https://",
									{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:ELBDeepSec" } },
									":443/software/agent/Windows/x86_64/\", \"c:\\temp\\dsa_agent.msi\") \r\n",
									"echo \"$(Get-Date -format T) - Downloaded File Size:\" (Get-Item \"c:\\temp\\dsa_agent.msi\").length \r\n",
									"echo \"$(Get-Date -format T) - DSA install started\" \r\n",
									"echo \"$(Get-Date -format T) - Installer Exit Code:\" (Start-Process -FilePath msiexec -ArgumentList \"/i c:\\temp\\dsa_agent.msi /qn ADDLOCAL=ALL /l*v `\"c:\\temp\\dsa_install.log`\"\" -Wait -PassThru).ExitCode \r\n",
									"echo \"$(Get-Date -format T) - DSA activation started\" \r\n",
									"Start-Sleep -s 50 \r\n",
									"& $Env:ProgramFiles\"\\Trend Micro\\Deep Security Agent\\dsa_control\" -r \r\n",
									"& $Env:ProgramFiles\"\\Trend Micro\\Deep Security Agent\\dsa_control\" -a dsm://",
									{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:ELBDeepSec" } },
									":4120/ \r\n",
									"Stop-Transcript \r\n",
									"echo \"$(Get-Date -format T) - DSA Deployment Finished\" \r\n"
								]]}
							},
							"c:\\temp\\appendDNSsearchsuffix.ps1": {
								"content": { "Fn::Join" : ["", [
									"$settings=Get-DnsClientGlobalSetting\r\n",
									"$suffixes=$settings.SuffixSearchList\r\n",
									"$suffixes+=\"", { "Ref": "pAppStackName" }, ".", { "Ref": "pDomainName" }, "\"\r\n",
									"Set-DnsClientGlobalSetting -SuffixSearchList $suffixes\r\n"
								]]}
							},
							"c:\\temp\\UserRights.ps1": {
								"source" : "https://cashnet-configfiles.s3.amazonaws.com/windows-user-rights/UserRights.ps1"
							},
							"c:\\temp\\deployjob_1_1.ps1": {
								"source" : "https://cashnet-configfiles.s3.amazonaws.com/job/deployjob_1_1.ps1"
							},
							"c:\\temp\\sqlncli.msi": {
								"source" : "https://cashnet-software.s3.amazonaws.com/mssql/sqlncli.msi"
							},
							"c:\\temp\\installers\\JamsWindowsAgent\\SetupAgentx64.msi": {
								"source" : "https://cashnet-software.s3.amazonaws.com/JAMS/SetupAgentx64.msi"
							},
							"c:\\temp\\cnjob_copyCode.ps1": {
								"source" : "https://cashnet-configfiles.s3.amazonaws.com/job/cnjob_copyCode.ps1"
							},
							"c:\\temp\\CNJOB_CopyCode.xml": {
								"source" : "https://cashnet-configfiles.s3.amazonaws.com/job/CNJOB_CopyCode.xml"
							},
							"c:\\temp\\codedeploy-agent.msi": {
								"source" : { "Fn::Sub" : "https://aws-codedeploy-${AWS::Region}.s3.amazonaws.com/latest/codedeploy-agent.msi" }
							},
							"c:\\vol\\scripts\\job_fsaccess.ps1": {
								"content": { "Fn::Join" : ["", [
									"# Grant FileSystem Access to the domain service account\r\n",
									"icacls.exe",
									" c:\\vol\\ /T  /C  /grant '",
									{ "Ref": "pBatchAppUser" },
									":(OI)(CI)F' \r\n",
									"icacls.exe",
									" c:\\windows\\temp\\ /T /C /grant '",
									{ "Ref": "pBatchAppUser" },
									":(OI)(CI)F' \r\n"
								]]}
							},
							"c:\\temp\\setmachineconfig.ps1": {
								"content": { "Fn::Join" : ["", [
									"# Open the machine.config file and handle it as XML\r\n",
									"$file = 'C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\Config\\machine.config'\r\n",
									"$doc = (Get-Content $file)-as [Xml]\r\n",
    							"function setConfig {\r\n",
									"# Create a new appSettings section within the configuration section since it does not exist on a new build\r\n",
									"$appSettings = $doc.configuration.AppendChild($doc.CreateElement(\"appSettings\"));\r\n",
									"# Add the ServerNo key within the appSettings section, it will be last 4 characters of the instance ID\r\n",
									"$myinstance = (Invoke-Restmethod -uri http://169.254.169.254/latest/meta-data/instance-id) \r\n",
									"$myserverno = \"job-\" + $myinstance.substring($myinstance.length -4, 4) \r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"ServerNo\")\r\n",
									"$newKey.SetAttribute(\"value\", $myserverno)\r\n",
									"# Add the DBType key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"DBType\")\r\n",
									{ "Fn::Sub": "$newKey.SetAttribute(\"value\", \"${pDBTypeKey}\")\r\n" },
									"# Add the rshostname key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"rshostname\")\r\n",
									"$newKey.SetAttribute(\"value\", \"",
									{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:RSurl" } },
									"\")\r\n",
									"# Add the cashnethost key within the appSettings section.  On webce it is a URL.  On webauth it is a hostname.\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"cashnethost\")\r\n",
									"$newKey.SetAttribute(\"value\", \"",
									{ "Ref": "pCashnetHost" },
									"\")\r\n",
									"# Add the ConnectionStrProd key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"ConnectionStrProd\")\r\n",
									"$newKey.SetAttribute(\"value\", \"Max Pool Size=5000; Connection Lifetime=450;Packet Size=4096; server=tcp:",
									{ "Ref": "pAGListener" },
									",1433; user id=", { "Ref": "pDBAppUser" }, "; password=", { "Ref": "pDBAppPassword" }, "; encrypt=yes; TrustServerCertificate=true; Database=", { "Ref": "pProdDBName" }, "\")\r\n" ,
									"# Add the ConnectionStrTrain key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"ConnectionStrTrain\")\r\n",
									"$newKey.SetAttribute(\"value\", \"Max Pool Size=5000; Connection Lifetime=450;Packet Size=4096; server=tcp:",
									{ "Ref": "pAGListener" },
									",1433; user id=", { "Ref": "pDBAppUser" }, "; password=", { "Ref": "pDBAppPassword" }, "; encrypt=yes; TrustServerCertificate=true; Database=", { "Ref": "pTrainDBName" }, "\")\r\n" ,
									"# Add the ReportingDBConnectionStrProd key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"ReportingDBConnectionStrProd\")\r\n",
									"$newKey.SetAttribute(\"value\", \"Max Pool Size=5000; Connection Lifetime=450;Packet Size=4096; server=SQLPR2; user id=",
									{ "Ref": "pDBAppUser" }, "; password=", { "Ref": "pDBAppPassword" }, "; encrypt=yes; TrustServerCertificate=true; Database=", { "Ref": "pProdDBName" }, "\")\r\n" ,
									"# Add the ReportingDBConnectionStrTrain key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"ReportingDBConnectionStrTrain\")\r\n",
									"$newKey.SetAttribute(\"value\", \"Max Pool Size=5000; Connection Lifetime=450;Packet Size=4096; server=SQLPR2; user id=",
									{ "Ref": "pDBAppUser" }, "; password=", { "Ref": "pDBAppPassword" }, "; encrypt=yes; TrustServerCertificate=true; Database=", { "Ref": "pTrainDBName" }, "\")\r\n" ,
									"# Add the legacy ConnectionStr key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"ConnectionStr\")\r\n",
									"$newKey.SetAttribute(\"value\", \"\")\r\n",
									"# Add the legacy MasterDBName key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"MasterDBName\")\r\n",
									"$newKey.SetAttribute(\"value\", \"\")\r\n",
									"# Add the ConnectionType key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"ConnectionType\")\r\n",
									"$newKey.SetAttribute(\"value\", \"1\")\r\n",
									"# Add the FilePath key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"FilePath\")\r\n",
									"$newKey.SetAttribute(\"value\", \"\\\\fileshare\\cashnet_file01_pub\\usr\\\")\r\n",
									"# Add the PathToPublicKeyRing key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"PathToPublicKeyRing\")\r\n",
									"$newKey.SetAttribute(\"value\", \"\\\\fileshare\\cashnet_file01_priv\\PGP\\cashnet.pkr\")\r\n",
									"# Add the PathToSecretKeyRing key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"PathToSecretKeyRing\")\r\n",
									"$newKey.SetAttribute(\"value\", \"\\\\fileshare\\cashnet_file01_priv\\PGP\\cashnet.skr\")\r\n",
									"# Add the PGPLicenseKey key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"PGPLicenseKey\")\r\n",
									"$newKey.SetAttribute(\"value\", \"0253696AF1B8E27F69F0B8A8CC13893347EC8B9B64906FDAEF5F95A8D108D3EE113CDC5D9CA3C1CA0B9F06E0D66A474A738F12672531B6749063C50CFD55B084B05DFBC75A4D132F84ADD152E00A31E7620BDF9026AC7348370B66C9EC2299B1CE164FBA5B3D40681613523973FC4E6390D4A33C7D4C0E02B5B5E7B134BD736A1ED52A238EB179B31FB885B098A1CC3392B32FA9246B81AA4EA06880455CB745904AE3FF3BA65C159DAFFC8CA639B10B72447BE6DBB12753FB5F8F820055FC0910FA60D4EEF62309AF9742A64D19F04713DB12CF1A3A0B52264EEE5D85173F381C5DDE0AEE7822E71B5EA8A5712205C70E282A4EAEF4471E472DB874367C36D3\")\r\n",
									"# Add the sessionState element within the system.web section\r\n",
									"$newSystemWeb = $doc.CreateElement(\"sessionState\")\r\n",
									"$doc.configuration.\"system.web\".AppendChild($newSystemWeb)\r\n",
									"$newSystemWeb.SetAttribute(\"mode\", \"SQLServer\")\r\n",
									"$newSystemWeb.SetAttribute(\"allowCustomSqlDatabase\", \"true\")\r\n",
									"$newSystemWeb.SetAttribute(\"sqlConnectionString\", \"Packet Size=4096; server=tcp:",
									{ "Ref": "pSTAGListener" },
									",1433; initial catalog=", { "Ref": "pSTDBName" }, "; user id=", { "Ref": "pSTDBUser" }, "; password=", { "Ref": "pSTDBPassword" }, "\")\r\n" ,
									"$newSystemWeb.SetAttribute(\"cookieless\", \"false\")\r\n",
									"$newSystemWeb.SetAttribute(\"timeout\", \"1200\")\r\n",
									"# Add the machineKey element within the system.web section\r\n",
									"$newSystemWeb = $doc.CreateElement(\"machineKey\")\r\n",
									"$doc.configuration.\"system.web\".AppendChild($newSystemWeb)\r\n",
									"$newSystemWeb.SetAttribute(\"validationKey\", \"962F842FCF4AC9E9FDF0C95BC42804CBA08304D2584950B057E579A29D6CA5C8124F095F2EBBA35E040959141C2C1472C698E80B80F1E3AE634EAD62E6450A1D,IsolateApps\")\r\n",
									"$newSystemWeb.SetAttribute(\"decryptionKey\", \"6F2A71E5A07911814A3D05776870EAA6AB90DCB6552F2086,IsolateApps\")\r\n",
									"$newSystemWeb.SetAttribute(\"validation\", \"SHA1\")\r\n",
									"# *** UNIQUE TO JOB AND OLPOST SERVER BUILD *** \r\n",
									"# Add the local_addr element within the appSettings section; On a web this would be its IP address, but here on job we use the ALB URL.\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"local_addr\")\r\n",
									"$newKey.SetAttribute(\"value\", \"", { "Fn::GetAtt": [ "rALBwebce", "DNSName" ] }, "\")\r\n",
									"# Add the PathToBatchExe key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"PathToBatchExe\")\r\n",
									"$newKey.SetAttribute(\"value\", \"c:\\vol\\cashnet\\cnbatches\")\r\n",
									"# Add the PathToStatusXXML key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"PathToStatusXML\")\r\n",
									"$newKey.SetAttribute(\"value\", \"c:\\vol\\cashnet\\cnbatches\")\r\n",
									"# Save the file\r\n",
									"$doc.save($file)\r\n",
							    "}\r\n",
							    "#check if config values have already been written; exit 0 if yes, else write the values\r\n",
							    "if ($doc.SelectSingleNode('//add[@key=\"ServerNo\"]').Value -ne $null)\r\n",
							    "{\r\n",
							    "exit 0\r\n",
							    "}\r\n",
							    "else\r\n",
							    "{\r\n",
							    "setConfig\r\n",
							    "}\r\n"
								]]}
							},
							"c:\\environment.txt": {
								"content": { "Fn::Join" : ["", [
									{ "Ref": "pEnvironmentType" }, "\r\n"
								]]}
							},
							"c:\\vol\\CASHNet\\AutoRunServer\\AutoRunServer.exe.config": {
								"content": { "Fn::Join" : ["", [
									"<?xml version=\"1.0\" encoding=\"utf-8\" ?> \r\n",
									"<configuration> \r\n",
									"    <appSettings> \r\n",
									"        <add key=\"ConnectionStr\" value=\"Packet Size=4096; server=", { "Ref": "pAGListener" },
									"; user id=", { "Ref": "pAutorunUser" },
									"; password=", { "Ref": "pAutorunPassword" },
									"; Database=utility_", { "Ref": "pDBTypeKey" }, ";\"></add> \r\n",
									"        <add key=\"Command\" value=\"c:\\vol\\cashnet\\cnbatches\\cnbatchrunner.exe\"/> \r\n",
									"        <add key=\"ArgBase\" value=\"-u ", { "Ref": "pOLPostOperator" }, " -p ", { "Ref": "pOLPostOperatorPassword" }, "\"/> \r\n",
									"    </appSettings> \r\n",
									"</configuration> \r\n"
								]]}
							}
						},
						"sources": {
							"c:\\vol\\CASHNet\\AutoRunServer": "https://cashnet-software.s3.amazonaws.com/job/AutoRunServer.zip",
							"c:\\vol\\CASHNet\\cnbatches\\cnebillmerge": "https://cashnet-software.s3.amazonaws.com/job/CNeBillMerge.zip"
						},
						"commands" : {
							"03-DomainJoin": {
								"command": "powershell.exe -ExecutionPolicy unrestricted . 'c:\\temp\\domainjoin.ps1'",
								"waitAfterCompletion": "forever"
							},
							"04-install-splunk": {
								"command": "mkdir c:\\logs & c:\\temp\\installers\\splunkforwarder.msi RECEIVING_INDEXER=\"logs:9997\" MONITOR_PATH=\"C:\\LOGS\" WINEVENTLOG_SEC_ENABLE=1 WINEVENTLOG_SYS_ENABLE=1 WINEVENTLOG_APP_ENABLE=1 AGREETOLICENSE=Yes /quiet /L*v c:\\temp\\splunk_install.log",
								"waitAfterCompletion": 0
							},
							"04a-ConfigureSplunk": {
								"command": "powershell.exe -ExecutionPolicy unrestricted . 'c:\\temp\\installers\\ConfigureSplunk.ps1' 'job'",
								"waitAfterCompletion": "0"
							},
							"05-InstallDeepSec": {
								"command": "powershell.exe -ExecutionPolicy unrestricted . 'c:\\temp\\installers\\dsa_install.ps1'",
								"waitAfterCompletion": "0"
							},
							"06-install-alertlogic": {
								"command": "msiexec /i c:\\temp\\installers\\alertlogic.msi prov_key=d450f7170ea98662c07e2b5bd991213ca55d96b2369b3ba901 /q",
								"waitAfterCompletion": 0
							},
							"07-disable-win-fw": {
                                "command": "powershell.exe -Command \"Get-NetFirewallProfile | Set-NetFirewallProfile -Enabled False\"",
								"waitAfterCompletion": "0"
                            },
							"09-appendDNSsearchsuffix": {
								"command": "powershell.exe -ExecutionPolicy unrestricted . 'c:\\temp\\appendDNSsearchsuffix.ps1'",
								"waitAfterCompletion": "0"
							},
							"10-deployjob_1_1": {
								"command": "powershell.exe -ExecutionPolicy unrestricted . 'c:\\temp\\deployjob_1_1.ps1'",
								"waitAfterCompletion": "0"
							},
							"15-SetExecutionPolicy": {
								"command": "powershell.exe -command Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope LocalMachine",
								"waitAfterCompletion": "0"
							},
							"20-SetMachineConfig": {
								"command": "powershell.exe -ExecutionPolicy unrestricted . 'c:\\temp\\setmachineconfig.ps1'",
								"waitAfterCompletion": "0"
							},
							"22-SetUserRights": {
								"command": { "Fn::Sub": "powershell.exe -ExecutionPolicy unrestricted c:\\temp\\UserRights.ps1 ${pBatchAppUser}" },
								"waitAfterCompletion": "0"
							},
							"25-InstallJamsAgent": {
								"command": "c:\\temp\\installers\\JamsWindowsAgent\\SetupAgentx64.msi /quiet",
								"waitAfterCompletion": "0"
							},
							"30-InstallCodeDeploy": {
								"command": "c:\\temp\\codedeploy-agent.msi",
								"waitAfterCompletion": "0"
							},
							"40-Signal": {
								"command": { "Fn::Sub": "cfn-signal.exe -e 0 --stack ${AWS::StackName} --resource rAutoScalingGroupJob --region ${AWS::Region}" },
								"waitAfterCompletion": "0"
							}
						},
						"services" : {
							"windows" : {
								"cfn-hup" : {
									"enabled" : "true",
									"ensureRunning" : "true",
									"files" : ["c:\\cfn\\cfn-hup.conf", "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"]
								}
							}
						}
					}
				}
			},

			"Properties": {
				"ImageId": { "Ref": "pWindowsAMI" },
				"InstanceType": { "Ref": "pJobInstanceType" },
				"IamInstanceProfile": { "Ref": "pInstanceIAMProfile" },
				"KeyName": { "Ref": "pEC2KeyPair" },
				"SecurityGroups": [
					{ "Ref": "rSGcndotnetcode" },
					{ "Ref": "rSGjob" },
					{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGfileshareaccess" } },
					{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SG000" } },
					{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGdomainmember" } }
				],
				"UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
					"<script>\n",
					"C:\\Windows\\System32\\tzutil /s \"Eastern Standard Time\"\n",
					"cfn-init.exe ",
					" --stack ", { "Ref" : "AWS::StackName" },
					" --resource rAutoScalingConfigJob ",
					" --region ", { "Ref" : "AWS::Region" }, "\n",
					"</script>\n"
				]]}}
			}
		},

		"rAutoScalingGroupJob": {
			"Type": "AWS::AutoScaling::AutoScalingGroup",
			"DependsOn": "rAutoScalingConfigJob",
			"CreationPolicy": {
				"ResourceSignal": {
					"Count": 1,
					"Timeout": "PT55M"
				}
			},
			"Properties": {
				"AvailabilityZones": [
					{ "Ref": "pRegionAZ1Name" },
					{ "Ref": "pRegionAZ2Name" }
				],
				"VPCZoneIdentifier": [
					{ "Ref": "pSubnetA" },
					{ "Ref": "pSubnetB" }
				],
				"LaunchConfigurationName": { "Ref": "rAutoScalingConfigJob" },
				"DesiredCapacity": { "Ref": "pJobMinInstances" },
				"MinSize": { "Ref": "pJobMinInstances" },
				"MaxSize": { "Ref": "pJobMaxInstances" },
				"HealthCheckType": "EC2",
				"LoadBalancerNames": [
					{ "Ref": "rELBjob" }
				],
				"HealthCheckGracePeriod": "3600",
			    "NotificationConfigurations" : [
					{
						"TopicARN" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SecurityAlarmTopic" } },
						"NotificationTypes" : [
							"autoscaling:EC2_INSTANCE_LAUNCH",
							"autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
							"autoscaling:EC2_INSTANCE_TERMINATE",
							"autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
						]
					}
				],
				"Tags": [
					{
						"Key": "Name",
						"Value": { "Fn::Join" : [ " ", [ "Job", { "Ref": "pFriendlyName" } ] ] },
						"PropagateAtLaunch": "true"
					},
					{
						"Key": "Environment",
						"Value": { "Ref": "pEnvironment" },
						"PropagateAtLaunch": "true"
					},
					{
						"Key": "Role",
						"Value": "Job",
						"PropagateAtLaunch": "true"
					},
					{
						"Key": "Patch Group",
						"Value": { "Ref": "pEnvironment" },
						"PropagateAtLaunch": "true"
					},
					{
						"Key": "AppStack",
						"Value": { "Ref": "pAppStackName" },
						"PropagateAtLaunch": "true"
					}
				]
			}
		},

		"rAutoScalingUpJob": {
			"Type": "AWS::AutoScaling::ScalingPolicy",
			"Properties": {
				"AdjustmentType": "ChangeInCapacity",
				"AutoScalingGroupName": {
					"Ref": "rAutoScalingGroupJob"
				},
				"Cooldown": "3600",
				"ScalingAdjustment": "1"
			}
		},

		"rAutoScalingDownJob": {
			"Type": "AWS::AutoScaling::ScalingPolicy",
			"Properties": {
				"AdjustmentType": "ChangeInCapacity",
				"AutoScalingGroupName": {
					"Ref": "rAutoScalingGroupJob"
				},
				"Cooldown": "3600",
				"ScalingAdjustment": "-1"
			}
		},

		"rCWAlarmHighCPUJob": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"EvaluationPeriods": "1",
				"Statistic": "Average",
				"Threshold": "75",
				"AlarmDescription": "Alarm if CPU too high or metric disappears indicating instance is down",
				"Period": "900",
				"AlarmActions": [{
					"Ref": "rAutoScalingUpJob"
				}],
				"Namespace": "AWS/EC2",
				"Dimensions": [{
					"Name": "AutoScalingGroupName",
					"Value": {
						"Ref": "rAutoScalingGroupJob"
					}
				}],
				"ComparisonOperator": "GreaterThanThreshold",
				"MetricName": "CPUUtilization"
			}
		},

		"rCWAlarmLowCPUJob": {
			"Type": "AWS::CloudWatch::Alarm",
			"DependsOn": "rAutoScalingGroupJob",
			"Properties": {
				"EvaluationPeriods": "1",
				"Statistic": "Average",
				"Threshold": "15",
				"AlarmDescription": "Alarm if CPU too too, remove a webserver",
				"Period": "3600",
				"AlarmActions": [{
					"Ref": "rAutoScalingDownJob"
				}],
				"Namespace": "AWS/EC2",
				"Dimensions": [{
					"Name": "AutoScalingGroupName",
					"Value": {
						"Ref": "rAutoScalingGroupJob"
					}
				}],
				"ComparisonOperator": "LessThanThreshold",
				"MetricName": "CPUUtilization"
			}
		},


		"rCodeDeployGroupCnbatchesCnbatchrunner": {
			"Type" : "AWS::CodeDeploy::DeploymentGroup",
			"Properties" : {
				"ApplicationName" : "cnbatches-cnbatchrunner",
				"AutoScalingGroups" : [ { "Ref": "rAutoScalingGroupJob" } ],
				"DeploymentConfigName" : "CodeDeployDefault.OneAtATime",
				"DeploymentGroupName" : { "Fn::Sub": "CnbatchesCnbatchrunner-${pFriendlyName}" },
				"ServiceRoleArn" : { "Ref": "pCodeDeployServiceRoleArn" },
				"Deployment" : {
					"Description" : "Initial cnbatches-cnbatchrunner Deployment",
					"Revision" : {
						"RevisionType" : "S3",
						"S3Location" : {
							"Bucket" : "cashnet-codedeploy",
							"Key" : "cnbatches-cnbatchrunner.zip",
							"BundleType" : "Zip"
						}
					}
				}
			}
		},

		"rCodeDeployGroupCnbatchesBlue": {
			"Type" : "AWS::CodeDeploy::DeploymentGroup",
			"DependsOn": "rCodeDeployGroupCnbatchesCnbatchrunner",
			"Properties" : {
				"ApplicationName" : "cnbatches-blue",
				"AutoScalingGroups" : [ { "Ref": "rAutoScalingGroupJob" }, { "Ref": "rAutoScalingGroupOLPost" } ],
				"DeploymentConfigName" : "CodeDeployDefault.OneAtATime",
				"DeploymentGroupName" : { "Fn::Sub": "CnbatchesBlue-${pFriendlyName}" },
				"ServiceRoleArn" : { "Ref": "pCodeDeployServiceRoleArn" },
				"Deployment" : {
					"Description" : "Initial cnbatches blue Deployment",
					"Revision" : {
						"RevisionType" : "S3",
						"S3Location" : {
							"Bucket" : "cashnet-codedeploy",
							"Key" : "cnbatches-blue.zip",
							"BundleType" : "Zip"
						}
					}
				}
			}
		},

		"rCodeDeployGroupCnbatchesGreen": {
			"Type" : "AWS::CodeDeploy::DeploymentGroup",
			"DependsOn": [ "rCodeDeployGroupCnbatchesCnbatchrunner", "rCodeDeployGroupCnbatchesBlue" ],
			"Properties" : {
				"ApplicationName" : "cnbatches-green",
				"AutoScalingGroups" : [ { "Ref": "rAutoScalingGroupJob" }, { "Ref": "rAutoScalingGroupOLPost" } ],
				"DeploymentConfigName" : "CodeDeployDefault.OneAtATime",
				"DeploymentGroupName" : { "Fn::Sub": "CnbatchesGreen-${pFriendlyName}" },
				"ServiceRoleArn" : { "Ref": "pCodeDeployServiceRoleArn" },
				"Deployment" : {
					"Description" : "Initial cnbatches green Deployment",
					"Revision" : {
						"RevisionType" : "S3",
						"S3Location" : {
							"Bucket" : "cashnet-codedeploy",
							"Key" : "cnbatches-green.zip",
							"BundleType" : "Zip"
						}
					}
				}
			}
		},

		"rCodeDeployGroupStatusTypes": {
			"Type" : "AWS::CodeDeploy::DeploymentGroup",
			"Properties" : {
				"ApplicationName" : "statustypes",
				"AutoScalingGroups" : [
					{ "Ref": "rAutoScalingGroupJob" },
					{ "Ref": "rAutoScalingGroupOLPost"},
					{ "Ref": "rAutoScalingGroupWebceBlue"},
					{ "Ref": "rAutoScalingGroupWebceGreen"}
				],
				"DeploymentConfigName" : "CodeDeployDefault.OneAtATime",
				"DeploymentGroupName" : { "Fn::Sub": "StatusTypes-${pFriendlyName}" },
				"ServiceRoleArn" : { "Ref": "pCodeDeployServiceRoleArn" },
				"Deployment" : {
					"Description" : "Initial StatusTypes Deployment",
					"Revision" : {
						"RevisionType" : "S3",
						"S3Location" : {
							"Bucket" : "cashnet-codedeploy",
							"Key" : "statustypes.zip",
							"BundleType" : "Zip"
						}
					}
				}
			}
		},


		"rAutoScalingConfigOLPost": {
			"Type": "AWS::AutoScaling::LaunchConfiguration",
			"Metadata": {
				"AWS::CloudFormation::Authentication":{
					"S3AccessCreds":{
						"type":"S3",
						"roleName":{ "Ref": "pInstanceIAMRole" },
						"buckets" : [ "cashnet-configfiles", "cashnet-software" ]
					}
				},
				"AWS::CloudFormation::Init" : {
					"config" : {
						"version": "2016-10-18-001",
						"files" : {
							"c:\\cfn\\cfn-hup.conf" : {
								"content" : { "Fn::Join" : ["", [
									"[main]\n",
									"stack=", { "Ref" : "AWS::StackId" }, "\n",
									"region=", { "Ref" : "AWS::Region" }, "\n"
								]]}
							},
							"c:\\cfn\\hooks.d\\cfn-auto-reloader.conf" : {
								"content": { "Fn::Join" : ["", [
									"[cfn-auto-reloader-hook]\n",
									"triggers=post.update\n",
									"path=Resources.rAutoScalingConfigOLPost.Metadata.AWS::CloudFormation::Init\n",
									"action=cfn-init.exe -v -s ", { "Ref" : "AWS::StackId" },
										" -r rAutoScalingConfigOLPost",
										" --region ", { "Ref" : "AWS::Region" }, "\n"
								]]}
							},
							"c:\\temp\\domainjoin.ps1": {
								"content": { "Fn::Join" : ["", [
									"Set-DefaultAWSRegion -Region ", { "Ref" : "AWS::Region" }, " \r\n",
									"Set-Variable -name instance_id -value (Invoke-Restmethod -uri http://169.254.169.254/latest/meta-data/instance-id) \r\n",
									"$params = @{\"directoryId\"=\"", { "Ref": "pDirectoryService" }, "\"; \"directoryName\"=\"", { "Ref": "pDomainName" }, "\"}\r\n",
									"New-SSMAssociation -InstanceId $instance_id -Name \"AWS-JoinDirectoryServiceDomain\" -parameters $params\r\n"
								]]}
							},
							"c:\\temp\\installers\\splunkforwarder.msi" : {
								"source" : "https://cashnet-software.s3.amazonaws.com/splunk/splunkforwarder-latest-x64.msi"
							},
							"c:\\temp\\installers\\ConfigureSplunk.ps1" : {
								"source" : "https://cashnet-software.s3.amazonaws.com/splunk/ConfigureSplunk.ps1"
							},
							"c:\\temp\\installers\\alertlogic.msi": {
								"source" : "https://cashnet-software.s3.amazonaws.com/alertlogic/al_agent-LATEST.msi"
							},
							"c:\\temp\\installers\\dsa_install.ps1": {
								"content": { "Fn::Join" : ["", [
									"[Net.ServicePointManager]::ServerCertificateValidationCallback = {$true} \r\n",
									"Start-Transcript -path \"c:\\temp\\dsa_deploy.log\" -append \r\n",
									"echo \"$(Get-Date -format T) - DSA download started\" \r\n",
									"(New-Object System.Net.WebClient).DownloadFile(\"https://",
									{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:ELBDeepSec" } },
									":443/software/agent/Windows/x86_64/\", \"c:\\temp\\dsa_agent.msi\") \r\n",
									"echo \"$(Get-Date -format T) - Downloaded File Size:\" (Get-Item \"c:\\temp\\dsa_agent.msi\").length \r\n",
									"echo \"$(Get-Date -format T) - DSA install started\" \r\n",
									"echo \"$(Get-Date -format T) - Installer Exit Code:\" (Start-Process -FilePath msiexec -ArgumentList \"/i c:\\temp\\dsa_agent.msi /qn ADDLOCAL=ALL /l*v `\"c:\\temp\\dsa_install.log`\"\" -Wait -PassThru).ExitCode \r\n",
									"echo \"$(Get-Date -format T) - DSA activation started\" \r\n",
									"Start-Sleep -s 50 \r\n",
									"& $Env:ProgramFiles\"\\Trend Micro\\Deep Security Agent\\dsa_control\" -r \r\n",
									"& $Env:ProgramFiles\"\\Trend Micro\\Deep Security Agent\\dsa_control\" -a dsm://",
									{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:ELBDeepSec" } },
									":4120/ \r\n",
									"Stop-Transcript \r\n",
									"echo \"$(Get-Date -format T) - DSA Deployment Finished\" \r\n"
								]]}
							},
							"c:\\temp\\appendDNSsearchsuffix.ps1": {
								"content": { "Fn::Join" : ["", [
									"$settings=Get-DnsClientGlobalSetting\r\n",
									"$suffixes=$settings.SuffixSearchList\r\n",
									"$suffixes+=\"", { "Ref": "pAppStackName" }, ".", { "Ref": "pDomainName" }, "\"\r\n",
									"Set-DnsClientGlobalSetting -SuffixSearchList $suffixes\r\n"
								]]}
							},
							"c:\\temp\\createProcessGroupSvc.ps1": {
								"content": { "Fn::Join" : ["", [
									"Invoke-Command -ScriptBlock { C:\\WINDOWS\\Microsoft.NET\\Framework\\v4.0.30319\\InstallUtil.exe  /username=",
									{ "Ref": "pBatchAppUser" },
									" /password=",
									{ "Ref": "pBatchAppPassword" },
									" /install \"c:\\vol\\CASHNet\\CNProcessGroups\\CNProcessGroups.exe\" /servicename=\"CNProcessGroups\" /servicedisplayname=\"CN Process Groups Service\" } \r\n",
									" Set-Service CNProcessGroups -startuptype \"automatic\" \r\n",
									" Start-Service CNProcessGroups \r\n"
								]]}
							},
							"c:\\temp\\createMassEODSvc.ps1": {
								"content": { "Fn::Join" : ["", [
									"Invoke-Command -ScriptBlock { C:\\WINDOWS\\Microsoft.NET\\Framework\\v4.0.30319\\InstallUtil.exe  /username=",
									{ "Ref": "pBatchAppUser" },
									" /password=",
									{ "Ref": "pBatchAppPassword" },
									" /install \"c:\\vol\\CASHNet\\MassEODsvc\\MassEOD.exe\" /servicename=\"CNMassEOD\" /servicedisplayname=\"CN Mass EOD Service\" } \r\n",
									" Set-Service CNMassEOD -startuptype \"automatic\" \r\n",
									" Start-Service CNMassEOD \r\n"
								]]}
							},
							"c:\\vol\\scripts\\CNNightlyRestart.ps1": {
							  "content": { "Fn::Join" : ["", [
							    "$restart_flag = 0; \r\n",
							    "for ( $i = 0; $i -lt $args.count; $i++ ) { \r\n",
							    "    if ($args[ $i ] -eq \"restart\"){ \r\n",
							    "        $restart_flag=1  \r\n",
							    "        echo \"**********PROCESSING NIGHTLY RESTART $(get-date)**********\" | out-file 'c:\\logs\\NightlyRestart.log' \r\n",
							    "    } \r\n",
							    "} \r\n",
							    "Invoke-Command -ScriptBlock { c:\\vol\\Scripts\\osql.exe -d ",
							    "CASHNET_", { "Ref": "pDBTypeKey" },
							    " -U ",
							    { "Ref": "pDBAppUser" },
							    " -P \"",
							    { "Ref": "pDBAppPassword" },
							    "\" -S ",
							    { "Ref": "pAGListener" },
							    " -Q \"update extracts set request_type=7 where batch_or_online='O' and request_type in (0,1,4,5)\" }\r\n",
							    " timeout /t 300 /nobreak \r\n",
								"    echo \"$(Get-Date) stopping online posting\" | out-file -append 'c:\\logs\\NightlyRestart.log' \r\n",
							    " Stop-Service \"CN Process Groups Service\" \r\n",
								"    echo \"$(Get-Date) stopping cnprocessgroup service\" | out-file -append 'c:\\logs\\NightlyRestart.log' \r\n",
							    " timeout /t 120 /nobreak \r\n",
							    " wmic Path win32_process Where \"CommandLine Like '%cnbatches%-prog PROCESSGROUP%'\" Call Terminate \r\n",
							    "Invoke-Command -ScriptBlock { c:\\vol\\Scripts\\osql.exe -d ",
							    "CASHNET_", { "Ref": "pDBTypeKey" },
							    " -U ",
							    { "Ref": "pDBAppUser" },
							    " -P \"",
							    { "Ref": "pDBAppPassword" },
							    "\" -S ",
							    { "Ref": "pAGListener" },
							    " -Q \"update extracts set request_type=0 where batch_or_online='O' and request_type in (7,8)\" }\r\n",
							    " timeout /t 30 /nobreak \r\n",
							    " IF ($restart_flag = 1) { \r\n",
							    "# Deploy code, if needed \r\n",
							    "# Is there any code to deploy in cashnetg_staging? \r\n",
							    "if((Get-ChildItem c:\\vol\\cashnet\\cnbatches_staging\\cashnetg -force | Select-Object -First 1 | Measure-Object).Count -gt 0) { \r\n",
							    "    echo \"$(Get-Date) in deploy cashnetg block\" | out-file -append 'c:\\logs\\NightlyRestart.log' \r\n",
							    "    #Stop the MassEOD service \r\n",
							    "    echo \"$(Get-Date) stopping massEOD\" | out-file -append ''c:\\logs\\NightlyRestart.log'' \r\n",
							    "    Stop-Service -displayname \"CN Mass EOD Service\"  \r\n",
							    "    If (Get-Service \"CN Mass EOD Service\" -ErrorAction SilentlyContinue) { \r\n",
							    "        If ((Get-Service \"CN Mass EOD Service\").Status -eq 'Running') { \r\n",
							    "            echo MassEOD is running and it the Coolest \r\n",
							    "        } Else { \r\n",
							    "            echo MassEOD stopped \r\n",
							    "        } \r\n",
							    "    } \r\n",
							    "    #Kill any remaining cnbatches \r\n",
							    "    wmic Path win32_process Where \"CommandLine Like '%cnbatches%'\" Call Terminate \r\n",
							    "    echo \"$(Get-Date) terminating cn batches\" | out-file -append ''c:\\logs\\NightlyRestart.log''  \r\n",
							    "    #Copy files from staging to production \r\n",
							    "    echo \"now im copying cashnetg stuff\" | out-file -append ''c:\\logs\\NightlyRestart.log''  \r\n",
							    "    Copy-Item -path 'c:\\vol\\cashnet\\cnbatches_staging\\cashnetg\\*.*' -destination 'c:\\vol\\cashnet\\cnbatches\\cashnetg' -force \r\n",
							    "    Move-Item -path 'c:\\vol\\cashnet\\cnbatches_staging\\cashnetg\\*.*' -destination 'c:\\vol\\cashnet\\cnbatches_archive\\cashnetg' -force \r\n",
								"    echo \"$(Get-Date) archiving cashnetg code\" | out-file -append 'c:\\logs\\NightlyRestart.log' \r\n",
							    "Invoke-Command -ScriptBlock  {C:\\vol\\scripts\\CheckCNbatchesCashnetg.ps1} \r\n",
								"    echo \"$(Get-Date) starting mass eod after deploying cashnetg\" | out-file -append 'c:\\logs\\NightlyRestart.log' \r\n",
							    "    #Start the mass eod service \r\n",
							    "    Start-Service -displayname \"CN Mass EOD Service\"  \r\n",
							    "} \r\n",
							    "# Is there any code to deploy in cashneti_staging? \r\n",
							    "if((Get-ChildItem c:\\vol\\cashnet\\cnbatches_staging\\cashneti -force | Select-Object -First 1 | Measure-Object).Count -gt 0)   { \r\n",
							    "    echo \"$(Get-Date) in deploy cashneti block\" | out-file -append 'c:\\logs\\NightlyRestart.log' \r\n",
							    "    #Stop the MassEOD service \r\n",
							    "    Stop-Service -displayname \"CN Mass EOD Service\" \r\n",
							    "    If (Get-Service \"CN Mass EOD Service\" -ErrorAction SilentlyContinue) { \r\n",
							    "        If ((Get-Service \"CN Mass EOD Service\").Status -eq 'Running') { \r\n",
							    "            echo MassEOD is running \r\n",
							    "        } Else { \r\n",
							    "            echo MassEOD stopped \r\n",
							    "        } \r\n",
							    "    }  \r\n",
							    "    #Kill any remaining cnbatches \r\n",
							    "    echo \"$(Get-Date) terminating cnbatches to deploy cashneti\" | out-file -append 'c:\\logs\\NightlyRestart.log' \r\n",
							    "    wmic Path win32_process Where \"CommandLine Like '%cnbatches%'\" Call Terminate  \r\n",
							    "    #Copy files from staging to production \r\n",
							    "    echo \"$(Get-Date) copying files to deploy cashneti\" | out-file -append 'c:\\logs\\NightlyRestart.log' \r\n",
							    "    Copy-Item -path 'c:\\vol\\cashnet\\cnbatches_staging\\cashneti\\*.*' -destination 'c:\\vol\\cashnet\\cnbatches\\cashneti' -force \r\n",
							    "    echo \"$(Get-Date) archiving files to deploy cashneti\" | out-file -append 'c:\\logs\\NightlyRestart.log' \r\n",
							    "    Move-Item -path 'c:\\vol\\cashnet\\cnbatches_staging\\cashneti\\*.*' -destination 'c:\\vol\\cashnet\\cnbatches_archive\\cashneti' -force \r\n",
							    "    echo \"$(Get-Date) starting mass eod after deploying cashneti\" | out-file -append 'c:\\logs\\NightlyRestart.log' \r\n",
							    "Invoke-Command -ScriptBlock  {C:\\vol\\scripts\\CheckCNbatchesCashneti.ps1} \r\n",
							    "    Start-Service -displayname \"CN Mass EOD Service\" \r\n",
							    "} \r\n",
							    "echo \"$(Get-Date) in archive logs block\" | out-file -append 'c:\\logs\\NightlyRestart.log' \r\n",
							    "#finally, restart CNProcessGroups after deploying the code \r\n",
							    "echo \"$(Get-Date) Nightly restart finished, starting cnprocessgroup service\" | out-file -append 'c:\\logs\\NightlyRestart.log' \r\n",
							    " Start-Service \"CN Process Groups Service\" \r\n",
							    "} \r\n"
							  ]]}
							},
							"c:\\vol\\scripts\\olpost_fsaccess.ps1": {
								"content": { "Fn::Join" : ["", [
									"# Grant FileSystem Access to the domain service account\r\n",
									"icacls.exe c:\\vol\\ /T  /C /grant '",
									{ "Ref": "pBatchAppUser" },
									":(OI)(CI)F' \r\n",
									"icacls.exe c:\\windows\\temp\\ /T /C /grant '",
									{ "Ref": "pBatchAppUser" },
									":(OI)(CI)F' \r\n",
									"icacls.exe c:\\oracle\\ /T /C  /grant '",
									{ "Ref": "pBatchAppUser" },
									":(OI)(CI)F' \r\n"
								]]}
							},
							"c:\\temp\\deployolpost_1_1.ps1": {
								"source" : "https://cashnet-configfiles.s3.amazonaws.com/olpost/deployolpost_1_1.ps1"
							},
							"c:\\temp\\UserRights.ps1": {
								"source" : "https://cashnet-configfiles.s3.amazonaws.com/windows-user-rights/UserRights.ps1"
							},
							"c:\\temp\\nightlyRestart.xml": {
								"source" : "https://cashnet-configfiles.s3.amazonaws.com/olpost/nightlyRestart.xml"
							},
							"c:\\temp\\sqlncli.msi": {
								"source" : "https://cashnet-software.s3.amazonaws.com/mssql/sqlncli.msi"
							},
							"c:\\vol\\scripts\\CheckCNBatchesCashnetg.ps1": {
								"source" : "https://cashnet-configfiles.s3.amazonaws.com/olpost/CheckCNBatchesCashnetg.ps1"
							},
							"c:\\vol\\scripts\\CheckCNBatchesCashneti.ps1": {
								"source" : "https://cashnet-configfiles.s3.amazonaws.com/olpost/CheckCNBatchesCashneti.ps1"
							},
							"c:\\temp\\MassEODRotateLogs.xml": {
								"source" : "https://cashnet-configfiles.s3.amazonaws.com/olpost/MassEODRotateLogs.xml"
							},
							"c:\\temp\\aws_unattended_install.rsp": {
								"source" : "https://cashnet-configfiles.s3.amazonaws.com/oracle/CN/aws_unattended_install.rsp"
							},
							"c:\\temp\\tnsnames.ora": {
								"source" : "https://cashnet-configfiles.s3.amazonaws.com/oracle/CN/tnsnames.ora"
							},
							"c:\\vol\\scripts\\osql.exe": {
								"source" : "https://cashnet-software.s3.amazonaws.com/mssql/osql.exe"
							},
							"c:\\temp\\codedeploy-agent.msi": {
								"source" : { "Fn::Sub" : "https://aws-codedeploy-${AWS::Region}.s3.amazonaws.com/latest/codedeploy-agent.msi" }
							},

							"c:\\temp\\setmachineconfig.ps1": {
								"content": { "Fn::Join" : ["", [
									"# Open the machine.config file and handle it as XML\r\n",
									"$file = 'C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\Config\\machine.config'\r\n",
									"$doc = (Get-Content $file)-as [Xml]\r\n",
									"function setConfig {\r\n",
									"# Create a new appSettings section within the configuration section since it does not exist on a new build\r\n",
									"$appSettings = $doc.configuration.AppendChild($doc.CreateElement(\"appSettings\"));\r\n",
									"# Add the ServerNo key within the appSettings section, it will be last 4 characters of the instance ID\r\n",
									"$myinstance = (Invoke-Restmethod -uri http://169.254.169.254/latest/meta-data/instance-id) \r\n",
									"$myserverno = \"olpst-\" + $myinstance.substring($myinstance.length -4, 4) \r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"ServerNo\")\r\n",
									"$newKey.SetAttribute(\"value\", $myserverno)\r\n",
									"# Add the DBType key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"DBType\")\r\n",
									{ "Fn::Sub": "$newKey.SetAttribute(\"value\", \"${pDBTypeKey}\")\r\n" },
									"# Add the rshostname key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"rshostname\")\r\n",
									"$newKey.SetAttribute(\"value\", \"",
									{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:RSurl" } },
									"\")\r\n",
									"# Add the cashnethost key within the appSettings section.  On webce it is a URL.  On webauth it is a hostname.\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"cashnethost\")\r\n",
									"$newKey.SetAttribute(\"value\", \"",
									{ "Ref": "pCashnetHost" },
									"\")\r\n",
									"# Add the ConnectionStrProd key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"ConnectionStrProd\")\r\n",
									"$newKey.SetAttribute(\"value\", \"Max Pool Size=5000; Connection Lifetime=450;Packet Size=4096; server=tcp:",
									{ "Ref": "pAGListener" },
									",1433; user id=", { "Ref": "pDBAppUser" }, "; password=", { "Ref": "pDBAppPassword" }, "; encrypt=yes; TrustServerCertificate=true; Database=", { "Ref": "pProdDBName" }, "\")\r\n" ,
									"# Add the ConnectionStrTrain key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"ConnectionStrTrain\")\r\n",
									"$newKey.SetAttribute(\"value\", \"Max Pool Size=5000; Connection Lifetime=450;Packet Size=4096; server=tcp:",
									{ "Ref": "pAGListener" },
									",1433; user id=", { "Ref": "pDBAppUser" }, "; password=", { "Ref": "pDBAppPassword" }, "; encrypt=yes; TrustServerCertificate=true; Database=", { "Ref": "pTrainDBName" }, "\")\r\n" ,
									"# Add the ReportingDBConnectionStrProd key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"ReportingDBConnectionStrProd\")\r\n",
									"$newKey.SetAttribute(\"value\", \"Max Pool Size=5000; Connection Lifetime=450;Packet Size=4096; server=SQLPR2; user id=",
									{ "Ref": "pDBAppUser" }, "; password=", { "Ref": "pDBAppPassword" }, "; encrypt=yes; TrustServerCertificate=true; Database=", { "Ref": "pProdDBName" }, "\")\r\n" ,
									"# Add the ReportingDBConnectionStrTrain key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"ReportingDBConnectionStrTrain\")\r\n",
									"$newKey.SetAttribute(\"value\", \"Max Pool Size=5000; Connection Lifetime=450;Packet Size=4096; server=SQLPR2; user id=",
									{ "Ref": "pDBAppUser" }, "; password=", { "Ref": "pDBAppPassword" }, "; encrypt=yes; TrustServerCertificate=true; Database=", { "Ref": "pTrainDBName" }, "\")\r\n" ,
									"# Add the legacy ConnectionStr key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"ConnectionStr\")\r\n",
									"$newKey.SetAttribute(\"value\", \"\")\r\n",
									"# Add the legacy MasterDBName key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"MasterDBName\")\r\n",
									"$newKey.SetAttribute(\"value\", \"\")\r\n",
									"# Add the ConnectionType key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"ConnectionType\")\r\n",
									"$newKey.SetAttribute(\"value\", \"1\")\r\n",
									"# Add the FilePath key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"FilePath\")\r\n",
									"$newKey.SetAttribute(\"value\", \"\\\\fileshare\\cashnet_file01_pub\\usr\\\")\r\n",
									"# Add the PathToPublicKeyRing key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"PathToPublicKeyRing\")\r\n",
									"$newKey.SetAttribute(\"value\", \"\\\\fileshare\\cashnet_file01_priv\\PGP\\cashnet.pkr\")\r\n",
									"# Add the PathToSecretKeyRing key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"PathToSecretKeyRing\")\r\n",
									"$newKey.SetAttribute(\"value\", \"\\\\fileshare\\cashnet_file01_priv\\PGP\\cashnet.skr\")\r\n",
									"# Add the PGPLicenseKey key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"PGPLicenseKey\")\r\n",
									"$newKey.SetAttribute(\"value\", \"0253696AF1B8E27F69F0B8A8CC13893347EC8B9B64906FDAEF5F95A8D108D3EE113CDC5D9CA3C1CA0B9F06E0D66A474A738F12672531B6749063C50CFD55B084B05DFBC75A4D132F84ADD152E00A31E7620BDF9026AC7348370B66C9EC2299B1CE164FBA5B3D40681613523973FC4E6390D4A33C7D4C0E02B5B5E7B134BD736A1ED52A238EB179B31FB885B098A1CC3392B32FA9246B81AA4EA06880455CB745904AE3FF3BA65C159DAFFC8CA639B10B72447BE6DBB12753FB5F8F820055FC0910FA60D4EEF62309AF9742A64D19F04713DB12CF1A3A0B52264EEE5D85173F381C5DDE0AEE7822E71B5EA8A5712205C70E282A4EAEF4471E472DB874367C36D3\")\r\n",
									"# Add the sessionState element within the system.web section\r\n",
									"$newSystemWeb = $doc.CreateElement(\"sessionState\")\r\n",
									"$doc.configuration.\"system.web\".AppendChild($newSystemWeb)\r\n",
									"$newSystemWeb.SetAttribute(\"mode\", \"SQLServer\")\r\n",
									"$newSystemWeb.SetAttribute(\"allowCustomSqlDatabase\", \"true\")\r\n",
									"$newSystemWeb.SetAttribute(\"sqlConnectionString\", \"Packet Size=4096; server=tcp:",
									{ "Ref": "pSTAGListener" },
									",1433; initial catalog=", { "Ref": "pSTDBName" }, "; user id=", { "Ref": "pSTDBUser" }, "; password=", { "Ref": "pSTDBPassword" }, "\")\r\n" ,
									"$newSystemWeb.SetAttribute(\"cookieless\", \"false\")\r\n",
									"$newSystemWeb.SetAttribute(\"timeout\", \"1200\")\r\n",
									"# Add the machineKey element within the system.web section\r\n",
									"$newSystemWeb = $doc.CreateElement(\"machineKey\")\r\n",
									"$doc.configuration.\"system.web\".AppendChild($newSystemWeb)\r\n",
									"$newSystemWeb.SetAttribute(\"validationKey\", \"962F842FCF4AC9E9FDF0C95BC42804CBA08304D2584950B057E579A29D6CA5C8124F095F2EBBA35E040959141C2C1472C698E80B80F1E3AE634EAD62E6450A1D,IsolateApps\")\r\n",
									"$newSystemWeb.SetAttribute(\"decryptionKey\", \"6F2A71E5A07911814A3D05776870EAA6AB90DCB6552F2086,IsolateApps\")\r\n",
									"$newSystemWeb.SetAttribute(\"validation\", \"SHA1\")\r\n",
									"# Add the local_addr element within the appSettings section; this one is interesting because it needs our IP address.\r\n",
									"$myip = (Invoke-Restmethod -uri http://169.254.169.254/latest/meta-data/local-ipv4)\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"local_addr\")\r\n",
									"$newKey.SetAttribute(\"value\", $myip)\r\n",
									"# *** UNIQUE TO JOB AND OLPOST SERVER BUILD *** \r\n",
									"# Add the PathToBatchExe key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"PathToBatchExe\")\r\n",
									"$newKey.SetAttribute(\"value\", \"c:\\vol\\cashnet\\cnbatches\")\r\n",
									"# Add the PathToStatusXXML key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"PathToStatusXML\")\r\n",
									"$newKey.SetAttribute(\"value\", \"c:\\vol\\cashnet\\cnbatches\")\r\n",
									"# *** UNIQUE TO OLPOST SERVER BUILD *** \r\n",
									"# Add the extractuser key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"extractuser\")\r\n",
									"$newKey.SetAttribute(\"value\", \"", { "Ref": "pOLPostOperator" }, "\")\r\n",
									"# Add the extractpassword key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"extractpassword\")\r\n",
									"$newKey.SetAttribute(\"value\", \"", { "Ref": "pOLPostOperatorPassword" }, "\")\r\n",
									"# Add the serviceindicator key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"serviceindicator\")\r\n",
									"$newKey.SetAttribute(\"value\", \"", { "Ref": "pOLPostServiceIndicator" }, "\")\r\n",
									"# Add the processinterval key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"processinterval\")\r\n",
									"$newKey.SetAttribute(\"value\", \"2000\")\r\n",
									"# Add the processCount key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"processCount\")\r\n",
									"$newKey.SetAttribute(\"value\", \"5\")\r\n",
									"# Add the intervalMilliseconds key within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"intervalMilliseconds\")\r\n",
									"$newKey.SetAttribute(\"value\", \"5000\")\r\n",
									"# Add the keys for MassEOD within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"0\")\r\n",
									"$newKey.SetAttribute(\"value\", \"BATCHEXTRACT\")\r\n",
									"# Add the keys for MassEOD within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"1\")\r\n",
									"$newKey.SetAttribute(\"value\", \"CARDCAPTURE\")\r\n",
									"# Add the keys for MassEOD within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"3\")\r\n",
									"$newKey.SetAttribute(\"value\", \"ACHGEN\")\r\n",
									"# Add the keys for MassEOD within the appSettings section\r\n",
									"$newKey = $appSettings.AppendChild($doc.CreateElement(\"add\"))\r\n",
									"$newKey.SetAttribute(\"key\", \"10\")\r\n",
									"$newKey.SetAttribute(\"value\", \"RECGEN\")\r\n",
									"# Save the file\r\n",
									"$doc.save($file)\r\n",
									"}\r\n",
									"#check if config values have already been written; exit 0 if yes, else write the values\r\n",
									"if ($doc.SelectSingleNode('//add[@key=\"ServerNo\"]').Value -ne $null)\r\n",
									"{\r\n",
									"exit 0\r\n",
									"}\r\n",
									"else\r\n",
									"{\r\n",
									"setConfig\r\n",
									"}\r\n"
								]]}
							},
							"c:\\environment.txt": {
								"content": { "Fn::Join" : ["", [
									{ "Ref": "pEnvironmentType" }, "\r\n"
								]]}
							}
						},
						"sources": {
							"c:\\vol\\CASHNet\\CNProcessGroups": "https://cashnet-software.s3.amazonaws.com/olpost/CNProcessGroups.zip",
							"c:\\vol\\CASHNet\\MassEODsvc": "https://cashnet-software.s3.amazonaws.com/olpost/MassEODsvc.zip",
							"c:\\temp": "https://cashnet-software.s3.amazonaws.com/oracle/ODAC112030_x64.zip"
						},
						"commands" : {
							"03-DomainJoin": {
								"command": "powershell.exe -ExecutionPolicy unrestricted . 'c:\\temp\\domainjoin.ps1'",
								"waitAfterCompletion": "forever"
							},
							"04-install-splunk": {
								"command": "mkdir c:\\logs & mkdir c:\\logs & c:\\temp\\installers\\splunkforwarder.msi RECEIVING_INDEXER=\"logs:9997\" MONITOR_PATH=\"C:\\LOGS\" WINEVENTLOG_SEC_ENABLE=1 WINEVENTLOG_SYS_ENABLE=1 WINEVENTLOG_APP_ENABLE=1 AGREETOLICENSE=Yes /quiet /L*v c:\\temp\\splunk_install.log",
								"waitAfterCompletion": 0
							},
							"04a-ConfigureSplunk": {
								"command": "powershell.exe -ExecutionPolicy unrestricted . 'c:\\temp\\installers\\ConfigureSplunk.ps1' 'olpost'",
								"waitAfterCompletion": "0"
							},
							"05-InstallDeepSec": {
								"command": "powershell.exe -ExecutionPolicy unrestricted . 'c:\\temp\\installers\\dsa_install.ps1'",
								"waitAfterCompletion": "0"
							},
							"06-install-alertlogic": {
								"command": "msiexec /i c:\\temp\\installers\\alertlogic.msi prov_key=d450f7170ea98662c07e2b5bd991213ca55d96b2369b3ba901 /q",
								"waitAfterCompletion": 0
							},
							"07-disable-win-fw": {
                                "command": "powershell.exe -Command \"Get-NetFirewallProfile | Set-NetFirewallProfile -Enabled False\"",
								"waitAfterCompletion": "0"
                            },
							"09-appendDNSsearchsuffix": {
								"command": "powershell.exe -ExecutionPolicy unrestricted . 'c:\\temp\\appendDNSsearchsuffix.ps1'",
								"waitAfterCompletion": "0"
							},
							"10-DeployOLPost": {
								"command": { "Fn::Sub": "powershell.exe -ExecutionPolicy unrestricted . 'c:\\temp\\deployolpost_1_1.ps1' ${pBatchAppUser}" },
								"waitAfterCompletion": "0"
							},
							"15-SetNightlyRestart": {
								"command": "powershell.exe -Command \"Register-ScheduledTask -Xml (get-content 'c:\\temp\\nightlyRestart.xml' | out-string) -TaskName 'Restart CASHNet Online Posting'\"",
								"waitAfterCompletion": "0"
							},
							"20-SetMachineConfig": {
								"command": "powershell.exe -ExecutionPolicy unrestricted . 'c:\\temp\\setmachineconfig.ps1'",
								"waitAfterCompletion": "0"
							},
							"22-SetUserRights": {
								"command": { "Fn::Sub": "powershell.exe -ExecutionPolicy unrestricted c:\\temp\\UserRights.ps1 ${pBatchAppUser}" },
								"waitAfterCompletion": "0"
							},
							"24-createProcessGroupSvc": {
								"command": "powershell.exe -ExecutionPolicy unrestricted . 'c:\\temp\\createProcessGroupSvc.ps1'",
								"waitAfterCompletion": "0"
							},
							"26-createMassEODSvc": {
								"command": "powershell.exe -ExecutionPolicy unrestricted . 'c:\\temp\\createMassEODSvc.ps1'",
								"waitAfterCompletion": "0"
							},
							"30-InstallCodeDeploy": {
								"command": "c:\\temp\\codedeploy-agent.msi",
								"waitAfterCompletion": "0"
							},
							"40-Signal": {
								"command": { "Fn::Sub": "cfn-signal.exe -e 0 --stack ${AWS::StackName} --resource rAutoScalingGroupOLPost --region ${AWS::Region}" },
								"waitAfterCompletion": "0"
							}
						},
						"services" : {
							"windows" : {
								"cfn-hup" : {
									"enabled" : "true",
									"ensureRunning" : "true",
									"files" : ["c:\\cfn\\cfn-hup.conf", "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"]
								}
							}
						}
					}
				}
			},
			"Properties": {
				"ImageId": { "Ref": "pWindowsAMI" },
				"InstanceType": { "Ref": "pMiscInstanceType" },
				"IamInstanceProfile": { "Ref": "pInstanceIAMProfile" },
				"KeyName": { "Ref": "pEC2KeyPair" },
				"SecurityGroups": [
					{ "Ref": "rSGolpost" },
					{ "Ref": "rSGcndotnetcode" },
					{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGfileshareaccess" } },
					{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SG000" } },
					{ "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGdomainmember" } }
				],
				"UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
					"<script>\n",
					"C:\\Windows\\System32\\tzutil /s \"Eastern Standard Time\"\n",
					"cfn-init.exe ",
					" --stack ", { "Ref" : "AWS::StackName" },
					" --resource rAutoScalingConfigOLPost ",
					" --region ", { "Ref" : "AWS::Region" }, "\n",
					"</script>\n"
				]]}}
			}
		},

		"rAutoScalingGroupOLPost": {
			"Type": "AWS::AutoScaling::AutoScalingGroup",
			"DependsOn": "rAutoScalingConfigOLPost",
			"CreationPolicy": {
				"ResourceSignal": {
					"Count": 1,
					"Timeout": "PT55M"
				}
			},
			"Properties": {
				"AvailabilityZones": [
					{ "Ref": "pRegionAZ1Name" },
					{ "Ref": "pRegionAZ2Name" }
				],
				"VPCZoneIdentifier": [
					{ "Ref": "pSubnetA" },
					{ "Ref": "pSubnetB" }
				],
				"LaunchConfigurationName": { "Ref": "rAutoScalingConfigOLPost" },
				"DesiredCapacity": 1,
				"MinSize": 1,
				"MaxSize": 1,
				"HealthCheckType": "EC2",
				"HealthCheckGracePeriod": "3600",
			    "NotificationConfigurations" : [
					{
						"TopicARN" : { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SecurityAlarmTopic" } },
						"NotificationTypes" : [
							"autoscaling:EC2_INSTANCE_LAUNCH",
							"autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
							"autoscaling:EC2_INSTANCE_TERMINATE",
							"autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
						]
					}
				],
				"Tags": [
					{
						"Key": "Name",
						"Value": { "Fn::Join" : [ " ", [ "OLPost", { "Ref": "pFriendlyName" } ] ] },
						"PropagateAtLaunch": "true"
					},
					{
						"Key": "Environment",
						"Value": { "Ref": "pEnvironment" },
						"PropagateAtLaunch": "true"
					},
					{
						"Key": "Role",
						"Value": "OLPost",
						"PropagateAtLaunch": "true"
					},
					{
						"Key": "Patch Group",
						"Value": { "Ref": "pEnvironment" },
						"PropagateAtLaunch": "true"
					},
					{
						"Key": "AppStack",
						"Value": { "Ref": "pAppStackName" },
						"PropagateAtLaunch": "true"
					}
				]
			}
		},

		"rAutoScalingUpOLPost": {
			"Type": "AWS::AutoScaling::ScalingPolicy",
			"Properties": {
				"AdjustmentType": "ChangeInCapacity",
				"AutoScalingGroupName": {
					"Ref": "rAutoScalingGroupOLPost"
				},
				"Cooldown": "500",
				"ScalingAdjustment": "1"
			}
		},

		"rAutoScalingDownOLPost": {
			"Type": "AWS::AutoScaling::ScalingPolicy",
			"Properties": {
				"AdjustmentType": "ChangeInCapacity",
				"AutoScalingGroupName": {
					"Ref": "rAutoScalingGroupOLPost"
				},
				"Cooldown": "500",
				"ScalingAdjustment": "-1"
			}
		},

		"rCWAlarmHighCPUOLPost": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"EvaluationPeriods": "1",
				"Statistic": "Average",
				"Threshold": "60",
				"AlarmDescription": "Alarm if CPU too high or metric disappears indicating instance is down",
				"Period": "180",
				"AlarmActions": [{
					"Ref": "rAutoScalingUpOLPost"
				}],
				"Namespace": "AWS/EC2",
				"Dimensions": [{
					"Name": "AutoScalingGroupName",
					"Value": {
						"Ref": "rAutoScalingGroupOLPost"
					}
				}],
				"ComparisonOperator": "GreaterThanThreshold",
				"MetricName": "CPUUtilization"
			}
		},

		"rCWAlarmLowCPUOLPost": {
			"Type": "AWS::CloudWatch::Alarm",
			"DependsOn": "rAutoScalingGroupOLPost",
			"Properties": {
				"EvaluationPeriods": "1",
				"Statistic": "Average",
				"Threshold": "15",
				"AlarmDescription": "Alarm if CPU too too, remove a webserver",
				"Period": "300",
				"AlarmActions": [{
					"Ref": "rAutoScalingDownOLPost"
				}],
				"Namespace": "AWS/EC2",
				"Dimensions": [{
					"Name": "AutoScalingGroupName",
					"Value": {
						"Ref": "rAutoScalingGroupOLPost"
					}
				}],
				"ComparisonOperator": "LessThanThreshold",
				"MetricName": "CPUUtilization"
			}
		}
	},

	"Outputs": {
		"Hi": { "Value": "Hello" },

  	"rSGcndotnetcode" : {
		"Description" : "Security Group rSGcndotnetcode for export to other stacks",
    	"Value" : { "Ref" : "rSGcndotnetcode" }
  	},

	"rSGwebceELB" : {
		"Description" : "WebCE ELB SG for export to other stacks",
    	"Value" : { "Ref" : "rSGwebceELB" }
  	},

	 "rALBwebceListenerHttp" : {
		"Description" : "ALB WebCE HTTP listener for export to other stacks",
    	"Value" : { "Ref" : "rALBwebceListenerHttp" }
  	},

 	"rALBwebceListenerHttps" : {
		"Description" : "ALB WebCE HTTPS listener for export to other stacks",
    	"Value" : { "Ref" : "rALBwebceListenerHttps" }
  	},
	"rWebCEURL": {
		"Value": { "Fn::GetAtt": [ "rALBwebce", "DNSName" ] },
		"Export": {
			"Name": {
				"Fn::Join": [ ":", [ { "Ref": "pEnvironment" }, { "Ref": "pAppStackName" }, "WebCEURL" ] ]
			}
		}
	}

  }

}
