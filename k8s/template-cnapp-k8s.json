{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "Build eng1-cnprod Kubernetes Worker ASG",

  "Parameters": {

        "pK8sImageId": {
              "Description": "AMI id for the node instances.",
              "Type": "AWS::EC2::Image::Id",
			         "Default": "ami-0eeeef929db40543c"
          },
        "pK8sInstanceType": {
            "Description": "EC2 instance type for the node instances",
            "Type": "String",
            "Default": "t3.medium",
            "ConstraintDescription": "Must be a valid EC2 instance type",
            "AllowedValues": [
                "t2.small",
                "t2.medium",
                "t2.large",
                "t2.xlarge",
                "t2.2xlarge",
                "t3.nano",
                "t3.micro",
                "t3.small",
                "t3.medium",
                "t3.large",
                "t3.xlarge",
                "t3.2xlarge",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.10xlarge",
                "m5.large",
                "m5.xlarge",
                "m5.2xlarge",
                "m5.4xlarge",
                "m5.12xlarge",
                "m5.24xlarge",
                "c4.large",
                "c4.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge",
                "c5.large",
                "c5.xlarge",
                "c5.2xlarge",
                "c5.4xlarge",
                "c5.9xlarge",
                "c5.18xlarge",
                "i3.large",
                "i3.xlarge",
                "i3.2xlarge",
                "i3.4xlarge",
                "i3.8xlarge",
                "i3.16xlarge",
                "r3.xlarge",
                "r3.2xlarge",
                "r3.4xlarge",
                "r3.8xlarge",
                "r4.large",
                "r4.xlarge",
                "r4.2xlarge",
                "r4.4xlarge",
                "r4.8xlarge",
                "r4.16xlarge",
                "x1.16xlarge",
                "x1.32xlarge",
                "p2.xlarge",
                "p2.8xlarge",
                "p2.16xlarge",
                "p3.2xlarge",
                "p3.8xlarge",
                "p3.16xlarge",
                "p3dn.24xlarge",
                "r5.large",
                "r5.xlarge",
                "r5.2xlarge",
                "r5.4xlarge",
                "r5.12xlarge",
                "r5.24xlarge",
                "r5d.large",
                "r5d.xlarge",
                "r5d.2xlarge",
                "r5d.4xlarge",
                "r5d.12xlarge",
                "r5d.24xlarge",
                "z1d.large",
                "z1d.xlarge",
                "z1d.2xlarge",
                "z1d.3xlarge",
                "z1d.6xlarge",
                "z1d.12xlarge"
            ]
          },
        "pK8sGroupMinSize": {
            "Description": "Minimum size of Node Group ASG.",
            "Type": "Number",
            "Default": 1
          },
        "pK8sGroupMaxSize": {
            "Description": "Maximum size of Node Group ASG. Set to at least 1 greater than desired capacity.",
            "Type": "Number",
            "Default": 4
          },
        "pK8sGroupDesiredCapacity": {
            "Description": "Desired capacity of K8s nodes in ASG.",
            "Type": "Number",
            "Default": 3
          },
        "pK8sVolumeSize": {
            "Description": "K8s Worker primary disk size",
            "Type": "Number",
            "Default": 20
          },
        "pK8sClusterName": {
            "Description": "The EKS Kubernetes cluster name.",
            "Type": "String"
          },
        "pK8sBootstrapArguments": {
            "Description": "Arguments to pass to the bootstrap script. See files/bootstrap.sh in https://github.com/awslabs/amazon-eks-ami",
            "Type": "String",
            "Default": ""
          },
        "pK8sNodeGroupName": {
              "Description": "Unique identifier for the Node Group.",
              "Type": "String"
          },
        "pSGK8sClusterControl": {
            "Description": "The security group of the cluster control plane.",
            "Type": "AWS::EC2::SecurityGroup::Id"
          },
        "pSubnetA": {
            "Description": "Subnet A",
            "Type": "AWS::EC2::Subnet::Id"
          },
        "pSubnetB": {
            "Description": "Subnet B",
            "Type": "AWS::EC2::Subnet::Id"
          },
        "pSubnetC": {
            "Description": "Subnet C",
            "Type": "AWS::EC2::Subnet::Id"
          },
        "pRegionAZ1Name": {
      			"Description": "First AZ",
      			"Type": "AWS::EC2::AvailabilityZone::Name"
      		},
      	"pRegionAZ2Name": {
      			"Description": "Second AZ",
      			"Type": "AWS::EC2::AvailabilityZone::Name"
      		},
    	  "pRegionAZ3Name": {
      			"Description": "Third AZ",
      			"Type": "AWS::EC2::AvailabilityZone::Name"
      		},
        "pEnvironment": {
            "Description": "Environment type (ENG1 or PRD1)",
            "Type": "String",
            "Default": "ENG1",
		        "AllowedValues":[  "PRD1","ENG1" ]
          },
        "pAppStackName": {
            "Description": "AppStack Name (for example cnprod or cntrain)",
            "Type": "String",
		        "AllowedValues":[  "cnprod","cntrain" ]
          },
        "pFriendlyName": {
            "Description": "Friendly name for this stack.  ex: ENG1-cntrain",
            "Type": "String",
            "Default": "ENG1-cntrain",
		        "AllowedValues":[  "ENG1-cnprod","ENG1-cntrain","PRD1-cnprod","PRD1-cntrain" ]
          },
        "pProductionVPC": {
            "Description": "Production VPC",
            "Type": "AWS::EC2::VPC::Id",
		        "Default": "vpc-2fccaf49"
          },
        "pEC2KeyPair": {
              "Description": "The EC2 Key Pair to allow SSH access to the instances",
              "Type": "AWS::EC2::KeyPair::KeyName"
            },
        "pSGcndotnetcode": {
            "Description": "Security Group for CNdotNetCode",
            "Type": "String"
          },
        "pSGwebceELB": {
            "Description": "ALB listener output for WebCE ELB SG",
            "Type": "String"
          },
        "pALBwebceListenerHttp": {
            "Description": "ALB listener output for HTTP on WebCE",
            "Type": "String"
          }
    },

  "Metadata": {
      "AWS::CloudFormation::Interface": {
          "ParameterGroups":
            [	{"Label":
              {"default": "AWS Environment Configuration"},
              "Parameters": [
                "pEnvironment",
						    "pAppStackName",
						    "pFriendlyName",
				        "pEC2KeyPair",
						    "pALBwebceListenerHttp",
						    "pSGwebceELB",
						    "pSGcndotnetcode"]},
				      {"Label":
                {"default": "EKS Cluster" },
                "Parameters": [
                  "pK8sNodeGroupName",
                  "pK8sClusterName",
                  "pSGK8sClusterControl",
						      "pProductionVPC",
						      "pSubnetA",
                  "pSubnetB",
                  "pSubnetC",
                  "pRegionAZ1Name",
                  "pRegionAZ2Name",
                  "pRegionAZ3Name"
                  ]},
              {"Label":
                {"default": "K8s Worker Node Configuration"},
                "Parameters": [
                  "pK8sGroupMinSize",
                  "pK8sGroupDesiredCapacity",
                  "pK8sGroupMaxSize",
                  "pK8sInstanceType",
                  "pK8sImageId",
                  "pK8sVolumeSize",
                  "pK8sBootstrapArguments"]}
            ]}
          },

  "Resources": {

    "rASGK8s": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
              "AvailabilityZones": [
                {"Ref": "pRegionAZ1Name" },
                {"Ref": "pRegionAZ3Name" }
                ],
              "VPCZoneIdentifier": [
                {"Ref": "pSubnetA"},
                {"Ref": "pSubnetC"}
                ],
                "LaunchConfigurationName": {"Ref": "rASGK8sLaunch" },
                "DesiredCapacity": {"Ref": "pK8sGroupDesiredCapacity" },
                "MinSize": {"Ref": "pK8sGroupMinSize"},
                "MaxSize": {"Ref": "pK8sGroupMaxSize"},
                "TargetGroupARNs": [
                  {"Ref": "rALBwebceK8sTargetBlueAPI9001"},
                  {"Ref": "rALBK8swebceTargetGreenAPI9002"},
                  {"Ref": "rALBK8swebceTargetBlueStatic8001"},
                  {"Ref": "rALBK8swebceTargetGreenStatic8002"}
                  ],
                "TerminationPolicies": ["OldestInstance"],
                "HealthCheckType": "EC2",
                "HealthCheckGracePeriod": "1800",
                "NotificationConfigurations": [{
                    "TopicARN": {	"Fn::ImportValue": {"Fn::Sub": "${pEnvironment}:SecurityAlarmTopic"	}	},
                    "NotificationTypes": ["autoscaling:EC2_INSTANCE_LAUNCH", "autoscaling:EC2_INSTANCE_LAUNCH_ERROR", "autoscaling:EC2_INSTANCE_TERMINATE", "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"]
                    }],
                "Tags": [
                  {"Key": "Name", "Value":{"Fn::Sub": "${pK8sClusterName}-${pK8sNodeGroupName}-Node"},"PropagateAtLaunch": true},
                  {"Key": {"Fn::Sub": "kubernetes.io/cluster/${pK8sClusterName}"},"Value": "owned","PropagateAtLaunch": true},
                  {"Key": "Environment","Value": {"Ref": "pEnvironment"},"PropagateAtLaunch": "true"},
                  {"Key": "Role","Value": "Kubernetes","PropagateAtLaunch": "true"},
                  {"Key": "AppStack","Value": {"Ref": "pAppStackName"},"PropagateAtLaunch": "true"}
                    ]},
                "UpdatePolicy": {"AutoScalingRollingUpdate": {"MaxBatchSize": 1, "MinInstancesInService": {"Ref": "pK8sGroupDesiredCapacity"}, "PauseTime": "PT5M" } },
                "DependsOn": ["rASGK8sLaunch"]
              },

    "rASGK8sLaunch": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",

            "Metadata": {
              "AWS::CloudFormation::Authentication": {
                "S3AccessCreds":
                  { "type": "S3", "roleName": { "Ref": "rK8sInstanceRole"},
                  "buckets": ["cashnet-configfiles", "cashnet-software"]
                  }
                },
              "AWS::CloudFormation::Init": {
                "config": {
                  "packages": {
                    "yum": {"telnet": []}},
                  "files": {
                    "/etc/cfn/cfn-hup.conf": {
                      "content": {
                        "Fn::Join": ["", ["[main]\n", "stack=", {
                              "Ref": "AWS::StackId"
                            }, "\n", "region=", {
                              "Ref": "AWS::Region"
                            }, "\n"]]
                          }
                      },
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                      "content": {
                        "Fn::Join": ["", ["[cfn-auto-reloader-hook]\n", "triggers=post.update\n", "path=Resources.rAutoScalingConfigKubernetesWorker.Metadata.AWS::CloudFormation::Init\n", "action=cfn-init.exe -v -s ", {
                              "Ref": "AWS::StackId"
                            }, " -r rAutoScalingConfigTomcat", " --region ", {
                              "Ref": "AWS::Region"
                            }, "\n"]]
                          }
                        },
                    "/install/splunkforwarder.rpm": {
                        "source": "https://cashnet-software.s3.amazonaws.com/splunk/splunkforwarder-6.5.1-f74036626f0c-linux-2.6-x86_64.rpm",
                        "mode": "000700",
                        "owner": "root",
                        "group": "root",
                        "authentication" : "S3AccessCreds"
                      },
                    "/install/al-agent-LATEST-1.x86_64.rpm": {
                      "source": "https://cashnet-software.s3.amazonaws.com/alertlogic/al-agent-LATEST-1.x86_64.rpm",
                      "authentication" : "S3AccessCreds"
                      },
                    "/install/dsa_install.sh": {
                      "content": {
                        "Fn::Join": ["", ["#!/usr/bin/env bash \n", "wget https://", {
                              "Fn::ImportValue": {
                                "Fn::Sub": "${pEnvironment}:ELBDeepSec"
                              }
                            }, ":443/software/agent/amzn1/x86_64/ -O /tmp/agent.rpm --no-check-certificate --quiet \n", "rpm -ihv /tmp/agent.rpm \n", "sleep 15 \n", "/opt/ds_agent/dsa_control -r \n", "/opt/ds_agent/dsa_control -a dsm://", {
                              "Fn::ImportValue": {
                                "Fn::Sub": "${pEnvironment}:ELBDeepSec"
                              }
                            }, ":4120/ \n"]]
                          },
                      "mode": "000700",
                      "owner": "root",
                      "group": "root"
                      },
                    "/install/AWS-PCI.sh": {
                      "source": "https://cashnet-configfiles.s3.amazonaws.com/linux-hardening/AWS-PCI.sh",
                      "mode": "000700",
                      "owner": "root",
                      "group": "root",
                      "authentication" : "S3AccessCreds"
                      },
                    "/install/audit_rules.tgz": {
                      "source": "https://cashnet-configfiles.s3.amazonaws.com/linux-hardening/audit_rules.tgz",
                      "mode": "000600",
                      "owner": "root",
                      "group": "root",
                      "authentication" : "S3AccessCreds"
                      }
                    },
                  "commands": {
                    "05-harden-linux": {
                      "command": {
                        "Fn::Join": ["", ["/install/AWS-PCI.sh -u ",
                          {"Fn::ImportValue": {"Fn::Sub": "${pEnvironment}:DomainJoinUser"} },
                          " -p ",
                          {"Fn::ImportValue": {"Fn::Sub": "${pEnvironment}:DomainJoinPassword" }},
                          " -r KubernetesWorker",
                          " -s ",
                          { "Ref": "pAppStackName"}
                          ]]
                       },
                     "waitAfterCompletion": "0"  },
                    "08-install-deep-security": {
                      "command": "/install/dsa_install.sh",
                      "waitAfterCompletion": "0"  }
                    }
                  }
                }
              },

            "Properties": {
                "AssociatePublicIpAddress": false,
                "BlockDeviceMappings": [
                    {"DeviceName": "/dev/xvda",
                      "Ebs": { "VolumeSize": { "Ref": "pK8sVolumeSize" }, "VolumeType": "gp2", "DeleteOnTermination": true}}
                    ],
                "IamInstanceProfile": {"Ref": "rK8sInstanceProfile"},
                "ImageId": {"Ref": "pK8sImageId"},
                "InstanceType": {"Ref": "pK8sInstanceType"},
                "KeyName": {"Ref": "pEC2KeyPair"},
                "SecurityGroups": [
              				  {"Ref": "pSGcndotnetcode"},
                        {"Ref": "rSGK8sWorker"},
                        {"Fn::ImportValue": {"Fn::Sub": "${pEnvironment}:SGfileshareaccess"}},
            						{"Fn::ImportValue": {"Fn::Sub": "${pEnvironment}:SG000"}},
            						{"Fn::ImportValue": {"Fn::Sub": "${pEnvironment}:SGdomainmember"}}
                          ],
                "UserData": {
                    "Fn::Base64":
                        { "Fn::Join": ["", [
                        "#!/bin/bash\n",
                        "set -o xtrace\n",
                        { "Fn::Sub" : "/etc/eks/bootstrap.sh ${pK8sClusterName} ${pK8sBootstrapArguments}\n" },
                        { "Fn::Sub" : "/opt/aws/bin/cfn-signal --exit-code $? --stack  ${AWS::StackName} --resource rASGK8s --region ${AWS::Region}\n"},
                        "yum update -y aws-cfn-bootstrap\n",
                        { "Fn::Sub" : "/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource rASGK8sLaunch --region ${AWS::Region}\n"}
                        ]]
                      }
                  }
              }
          },

    "rCWAlarmHighCPUK8s": {
      			"Type": "AWS::CloudWatch::Alarm",
      			"Properties": {
      				"EvaluationPeriods": "1",
      				"Statistic": "Average",
      				"Threshold": "60",
      				"AlarmDescription": "Alarm if CPU too high or metric disappears indicating instance is down",
      				"Period": "180",
      				"AlarmActions": [{"Ref": "rAutoScalingUpK8s"}],
      				"Namespace": "AWS/EC2",
      				"Dimensions": [{"Name": "K8s High CPU Utilization",	"Value": {"Ref": "rASGK8s"}}],
      				"ComparisonOperator": "GreaterThanThreshold",
      				"MetricName": "CPUUtilization"
      			}
      		},

    "rCWAlarmLowCPUK8s": {
      			"Type": "AWS::CloudWatch::Alarm",
      			"Properties": {
      				"EvaluationPeriods": "1",
      				"Statistic": "Average",
      				"Threshold": "15",
      				"AlarmDescription": "If CPU is too low, remove a kubernetes instance",
      				"Period": "300",
      				"AlarmActions": [{"Ref": "rAutoScalingDownK8s"}],
      				"Namespace": "AWS/EC2",
      				"Dimensions": [{"Name": "K8s Low CPU Utilization","Value": {"Ref": "rASGK8s"}}],
      				"ComparisonOperator": "LessThanThreshold",
      				"MetricName": "CPUUtilization"
      			}
      		},

    "rAutoScalingDownK8s": {
      			"Type": "AWS::AutoScaling::ScalingPolicy",
      			"Properties": {
      				"AdjustmentType": "ChangeInCapacity",
      				"AutoScalingGroupName": {
      					"Ref": "rASGK8s"
      				},
      				"Cooldown": "500",
      				"ScalingAdjustment": "-1"
      			}
      		},

    "rAutoScalingUpK8s": {
      			"Type": "AWS::AutoScaling::ScalingPolicy",
      			"Properties": {
      				"AdjustmentType": "ChangeInCapacity",
      				"AutoScalingGroupName": {
      					"Ref": "rASGK8s"
      				},
      				"Cooldown": "500",
      				"ScalingAdjustment": "1"
      			}
      		},

    "rK8sInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [{ "Ref": "rK8sInstanceRole" }]
                }
              },

    "rK8sInstanceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{"Effect": "Allow", "Principal": {"Service": "ec2.amazonaws.com"}, "Action": "sts:AssumeRole"}]
                },
                "Path": "/",
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy",
                    "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy",
                    "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly",
                    "arn:aws:iam::317558825475:policy/MASTER-IAM-rInstanceRoleS3DownloadPolicy-1Y3KJSHSSPK"
                ]
            }
        },

    "rSGK8sWorker": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Security group for all nodes in the cluster",
                "VpcId": {
                    "Ref": "pProductionVPC"
                },
                "Tags": [
                    {
                        "Key": {
                            "Fn::Sub": "kubernetes.io/cluster/${pK8sClusterName}"
                        },
                        "Value": "owned"
                    }
                ]
            }
        },

    "rSGK8sWorkerNodeIngress": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "DependsOn": "rSGK8sWorker",
            "Properties": {
                "Description": "Allow node to communicate with each other",
                "GroupId": {
                    "Ref": "rSGK8sWorker"
                },
                "SourceSecurityGroupId": {
                    "Ref": "rSGK8sWorker"
                },
                "IpProtocol": -1,
                "FromPort": 0,
                "ToPort": 65535
            }
        },

    "rSGK8sWorkerControlPlaneIngress": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "DependsOn": "rSGK8sWorker",
            "Properties": {
                "Description": "Allow worker Kubelets and pods to receive communication from the cluster control plane",
                "GroupId": {
                    "Ref": "rSGK8sWorker"
                },
                "SourceSecurityGroupId": {
                    "Ref": "pSGK8sClusterControl"
                },
                "IpProtocol": "tcp",
                "FromPort": 1025,
                "ToPort": 65535
            }
        },

    "rK8sControlPlaneEgressToWorkers": {
            "Type": "AWS::EC2::SecurityGroupEgress",
            "DependsOn": "rSGK8sWorker",
            "Properties": {
                "Description": "Allow the cluster control plane to communicate with worker Kubelet and pods",
                "GroupId": {
                    "Ref": "pSGK8sClusterControl"
                },
                "DestinationSecurityGroupId": {
                    "Ref": "rSGK8sWorker"
                },
                "IpProtocol": "tcp",
                "FromPort": 1025,
                "ToPort": 65535
            }
        },

    "rK8sControlPlaneOn443Ingress": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "DependsOn": "rSGK8sWorker",
            "Properties": {
                "Description": "Allow pods running extension API servers on port 443 to receive communication from cluster control plane",
                "GroupId": {
                    "Ref": "rSGK8sWorker"
                },

                "SourceSecurityGroupId": {
                    "Ref": "pSGK8sClusterControl"
                },
                "IpProtocol": "tcp",
                "FromPort": 443,
                "ToPort": 443
            }
        },

    "rK8sControlPlaneEgressToWorkerson443": {
            "Type": "AWS::EC2::SecurityGroupEgress",
            "DependsOn": "rSGK8sWorker",
            "Properties": {
                "Description": "Allow the cluster control plane to communicate with pods running extension API servers on port 443",
                "GroupId": {
                    "Ref": "pSGK8sClusterControl"
                },
                "DestinationSecurityGroupId": {
                    "Ref": "rSGK8sWorker"
                },
                "IpProtocol": "tcp",
                "FromPort": 443,
                "ToPort": 443
            }
        },

    "rK8sClusterControlPlaneIngress": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "DependsOn": "rSGK8sWorker",
            "Properties": {
                "Description": "Allow pods to communicate with the cluster API Server",
                "GroupId": {
                    "Ref": "pSGK8sClusterControl"
                },
                "SourceSecurityGroupId": {
                    "Ref": "rSGK8sWorker"
                },
                "IpProtocol": "tcp",
                "ToPort": 443,
                "FromPort": 443
            }
        },

    "rSGK8sWorkerSGRedisE": {
          "DependsOn": "rSGK8sWorker",
          "Type": "AWS::EC2::SecurityGroupEgress",
          "Properties": {
            "FromPort": 6379,
            "ToPort": 6379,
            "GroupId": { "Ref": "rSGK8sWorker" },
            "IpProtocol": "tcp",
            "DestinationSecurityGroupId": { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGredis" } }
          }
        },

    "rSGK8sWorkerSGRedisI": {
          "DependsOn": "rSGK8sWorker",
          "Type": "AWS::EC2::SecurityGroupIngress",
          "Properties": {
            "FromPort": 6379,
            "ToPort": 6379,
            "GroupId": { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGredis" } },
            "IpProtocol": "tcp",
            "SourceSecurityGroupId": { "Ref": "rSGK8sWorker" }

          }
        },

    "rSGK8sWorkerSGPostgresE": {
          "DependsOn": "rSGK8sWorker",
          "Type": "AWS::EC2::SecurityGroupEgress",
          "Properties": {
            "FromPort": 5432,
            "ToPort": 5432,
            "GroupId": {"Ref": "rSGK8sWorker"	},
            "IpProtocol": "tcp",
            "DestinationSecurityGroupId": { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGpostgres" } }
          }
        },

    "rSGK8sWorkerSGPostgresI": {
          "DependsOn": "rSGK8sWorker",
          "Type": "AWS::EC2::SecurityGroupIngress",
          "Properties": {
            "FromPort": 5432,
            "ToPort": 5432,
            "GroupId": { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGpostgres" } },
            "IpProtocol": "tcp",
            "SourceSecurityGroupId": { "Ref": "rSGK8sWorker" }
          }
        },

    "rSGK8sWorkerAnsible22I": {
          "DependsOn": "rSGK8sWorker",
          "Type": "AWS::EC2::SecurityGroupIngress",
          "Properties": {
            "FromPort": 22,
            "ToPort": 22,
            "GroupId": { "Ref": "rSGK8sWorker" },
                    "IpProtocol": "tcp",
                    "SourceSecurityGroupId": {"Fn::ImportValue": {"Fn::Sub": "${pEnvironment}:SGansible"} }
                }
            },

    "rSGK8sWorkerAnsible9991I": {
          "DependsOn": "rSGK8sWorker",
          "Type": "AWS::EC2::SecurityGroupIngress",
          "Properties": {
            "FromPort": 9991,
            "ToPort": 9991,
            "GroupId": { "Ref": "rSGK8sWorker" },
            "IpProtocol": "tcp",
            "SourceSecurityGroupId": { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGansible" } }
          }
        },

    "rSGK8sWorkerAnsible9992I": {
          "DependsOn": "rSGK8sWorker",
          "Type": "AWS::EC2::SecurityGroupIngress",
          "Properties": {
            "FromPort": 9992,
            "ToPort": 9992,
            "GroupId": { "Ref": "rSGK8sWorker" },
            "IpProtocol": "tcp",
            "SourceSecurityGroupId": { "Fn::ImportValue": { "Fn::Sub": "${pEnvironment}:SGansible" } }
          }
        },

    "rALBwebceK8sTargetAPI": {
  	   "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
		    "DependsOn": "rSGK8sWorker",
    			"Properties": {
    				"HealthCheckIntervalSeconds": 30,
    				"HealthCheckPath": "/worths/help.aspx",
    				"HealthCheckPort": 80,
    				"HealthCheckProtocol": "HTTP",
    				"HealthCheckTimeoutSeconds": 5,
    				"HealthyThresholdCount": 2,
    				"Matcher": { "HttpCode": "200,302"},
    				"Port": 80,
    				"Protocol": "HTTP",
    				"Tags": [
                      {"Key": "Name","Value": {"Fn::Sub": "${pFriendlyName} Kubernetes HTTP"}},
                      {"Key": "Role", "Value": "Kubernettes"},
                      {"Key": "AppStack", "Value": {"Ref": "pAppStackName"}},
                      {"Key": "Environment",	"Value": {"Ref": "pEnvironment"}}
    				         ],
    				"TargetGroupAttributes": [
                      {"Key": "deregistration_delay.timeout_seconds", "Value": "30"},
                      {"Key": "stickiness.enabled", "Value": "true"},
                      {"Key": "stickiness.type", "Value": "lb_cookie"	},
                      {"Key": "stickiness.lb_cookie.duration_seconds", "Value": "3600"}
    				          ],
    				"UnhealthyThresholdCount": 5,
    				"VpcId": { "Ref": "pProductionVPC"}
    			}
    		},

    "rALBK8sworkerListenerHTTP": {
          "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
          "DependsOn": "rALBwebceK8sTargetAPI",
          "Properties": {
            "Actions": [{ "Type": "forward","TargetGroupArn": {"Ref": "rALBwebceK8sTargetAPI"}}],
            "Conditions": [{"Field": "path-pattern", "Values": ["/worths/*"]}],
            "ListenerArn": {"Ref": "pALBwebceListenerHttp"}, "Priority": 80 }
        },

		"rSGK8sworkerHTTPi": {
    			"Type": "AWS::EC2::SecurityGroupIngress",
    			"Properties": {
    				"FromPort": 80,
    				"ToPort": 80,
    				"GroupId": { "Ref": "rSGK8sWorker" },
    				"IpProtocol": "tcp",
    				"SourceSecurityGroupId": { "Ref": "pSGwebceELB" }
    			}
    		},

    "rALBwebceK8sTargetBlueAPI9001":{
        "DependsOn": "rSGK8sWorker",
    		"Type":"AWS::ElasticLoadBalancingV2::TargetGroup",
    		"Properties":{
    			"HealthCheckIntervalSeconds":30,
    			"HealthCheckPath":"/health",
    			"HealthCheckPort":9001,
    			"HealthCheckProtocol":"HTTP",
    			"HealthCheckTimeoutSeconds":5,
    			"HealthyThresholdCount":2,
    			"Matcher":{"HttpCode":"200,302"},
    			"Port":9001,
    			"Protocol":"HTTP",
    			"Tags":[
    				    {"Key":"Name","Value":{"Fn::Sub":"${pFriendlyName} Kubernetes WebCE Blue API"}},
    				    {"Key":"Role","Value":"Kubernetes Blue API"},
    				    {"Key":"AppStack","Value":{"Ref":"pAppStackName"}},
    				    {"Key":"Environment","Value":{"Ref":"pEnvironment"}}],
    			"TargetGroupAttributes":[
    				    {"Key":"deregistration_delay.timeout_seconds","Value":"30"},
    				    {"Key":"stickiness.enabled","Value":"true"},
    				    {"Key":"stickiness.type","Value":"lb_cookie"},
    				    {"Key":"stickiness.lb_cookie.duration_seconds","Value":"3600"}],
    			"UnhealthyThresholdCount":5,
    			"VpcId":{"Ref":"pProductionVPC"}
        }
    	},

  	"rALBK8sListenerBlueAPI9001":{
    		"Type":"AWS::ElasticLoadBalancingV2::ListenerRule",
    		"Properties":{
    			   "Actions":[{"Type":"forward","TargetGroupArn":{"Ref":"rALBwebceK8sTargetBlueAPI9001"}}],
    			    "Conditions":[{"Field":"path-pattern","Values":["/cashnetg/api2/*"]}],
              "ListenerArn":{"Ref":"pALBwebceListenerHttp"},
    		      "Priority":81}
    		},

  	"rSGK8sListenterBlueAPI9001i": {
    			"Type": "AWS::EC2::SecurityGroupIngress",
    			"Properties": {
    				"FromPort": 9001,
    				"ToPort": 9001,
    				"GroupId": { "Ref": "rSGK8sWorker" },
    				"IpProtocol": "tcp",
    				"SourceSecurityGroupId": { "Ref": "pSGwebceELB" }
    			}
    		},

  	"rSGK8sListenterBlueAPI9001e": {
    			"Type": "AWS::EC2::SecurityGroupEgress",
    			"Properties": {
    				"FromPort": 9001,
    				"ToPort": 9001,
    				"GroupId": { "Ref": "pSGwebceELB" },
    				"IpProtocol": "tcp",
    				"DestinationSecurityGroupId": { "Ref": "rSGK8sWorker" }
    			}
    		},

		"rALBK8swebceTargetGreenAPI9002":{
        "DependsOn": "rSGK8sWorker",
    		"Type":"AWS::ElasticLoadBalancingV2::TargetGroup",
    		"Properties":{
    			"HealthCheckIntervalSeconds":30,
    			"HealthCheckPath":"/health",
    			"HealthCheckPort":9002,
    			"HealthCheckProtocol":"HTTP",
    			"HealthCheckTimeoutSeconds":5,
    			"HealthyThresholdCount":2,
    			"Matcher":{"HttpCode":"200,302"},
    			"Port":9002,
    			"Protocol":"HTTP",
    			"Tags":[
    				{"Key":"Name","Value":{"Fn::Sub":"${pFriendlyName} KubernetesWorker WebCE Green API"}},
    				{"Key":"Role","Value":"KubernetesWorker Green API"},
    				{"Key":"AppStack","Value":{"Ref":"pAppStackName"}},
    				{"Key":"Environment","Value":{"Ref":"pEnvironment"}}],
    			"TargetGroupAttributes":[
    				{"Key":"deregistration_delay.timeout_seconds","Value":"30"},
    				{"Key":"stickiness.enabled","Value":"true"},
    				{"Key":"stickiness.type","Value":"lb_cookie"},
    				{"Key":"stickiness.lb_cookie.duration_seconds","Value":"3600"}],
    			"UnhealthyThresholdCount":5,
    			"VpcId":{"Ref":"pProductionVPC"}}
    	   },

  	"rALBK8sListenerGreenAPI9002":{
    		"Type":"AWS::ElasticLoadBalancingV2::ListenerRule",
    		"Properties":{
    			"Actions":[{"Type":"forward","TargetGroupArn":{"Ref":"rALBK8swebceTargetGreenAPI9002"}}],
    			"Conditions":[{"Field":"path-pattern","Values":["/cashneti/api2/*"]}],
    			"ListenerArn":{"Ref":"pALBwebceListenerHttp"},
    			"Priority":82}
    	   },

  	"rSGK8sListenterGreenAPI9002i": {
        "DependsOn": "rALBK8swebceTargetGreenAPI9002",
    			"Type": "AWS::EC2::SecurityGroupIngress",
    			"Properties": {
    				"FromPort": 9002,
    				"ToPort": 9002,
    				"GroupId": { "Ref": "rSGK8sWorker" },
    				"IpProtocol": "tcp",
    				"SourceSecurityGroupId": { "Ref": "pSGwebceELB" }
    			}
    		},

		"rSGK8sListenterGreenAPI9002e": {
			"DependsOn": "rALBK8swebceTargetGreenAPI9002",
			"Type": "AWS::EC2::SecurityGroupEgress",
			"Properties": {
				    "FromPort": 9002,
				     "ToPort": 9002,
				     "GroupId": { "Ref": "pSGwebceELB" },
				     "IpProtocol": "tcp",
				     "DestinationSecurityGroupId": { "Ref": "rSGK8sWorker" }
			        }
        },

    "rALBK8swebceTargetBlueStatic8001":{
    		"Type":"AWS::ElasticLoadBalancingV2::TargetGroup",
    		"Properties":{
    			"HealthCheckIntervalSeconds":30,
    			"HealthCheckPath":"/health",
    			"HealthCheckPort":8001,
    			"HealthCheckProtocol":"HTTP",
    			"HealthCheckTimeoutSeconds":5,
    			"HealthyThresholdCount":2,
    			"Matcher":{"HttpCode":"200,302"},
    			"Port":8001,
    			"Protocol":"HTTP",
    			"Tags":[
    				{"Key":"Name","Value":{"Fn::Sub":"${pFriendlyName} Kubernetes WebCE Blue API"}},
    				{"Key":"Role","Value":"Kuberbetes Blue Static"},
    				{"Key":"AppStack","Value":{"Ref":"pAppStackName"}},
    				{"Key":"Environment","Value":{"Ref":"pEnvironment"}}],
    			"TargetGroupAttributes":[
    				{"Key":"deregistration_delay.timeout_seconds","Value":"30"},
    				{"Key":"stickiness.enabled","Value":"true"},
    				{"Key":"stickiness.type","Value":"lb_cookie"},
    				{"Key":"stickiness.lb_cookie.duration_seconds","Value":"3600"}],
    			"UnhealthyThresholdCount":5,
    			"VpcId":{"Ref":"pProductionVPC"}}
    	},

    "rALBK8sListenerBlueStatic8001":{
    		"Type":"AWS::ElasticLoadBalancingV2::ListenerRule",
    		"Properties":{
    			"Actions":[{"Type":"forward","TargetGroupArn":{"Ref":"rALBK8swebceTargetBlueStatic8001"}}],
    			"Conditions":[{"Field":"path-pattern","Values":["/cashnetg/static2/*"]}],
    			"ListenerArn":{"Ref":"pALBwebceListenerHttp"},
    			"Priority":83}
    	   },

  	"rSGK8sListenterBlueStatic8001i": {
    			"Type": "AWS::EC2::SecurityGroupIngress",
    			"Properties": {
    				"FromPort": 8001,
    				"ToPort": 8001,
    				"GroupId": { "Ref": "rSGK8sWorker" },
    				"IpProtocol": "tcp",
    				"SourceSecurityGroupId": { "Ref": "pSGwebceELB" }
    			   }
    		  },

  	"rSGK8sListenterBlueStatic8001e": {
    			"Type": "AWS::EC2::SecurityGroupEgress",
    			"Properties": {
    				"FromPort": 8001,
    				"ToPort": 8001,
    				"GroupId": { "Ref": "pSGwebceELB" },
    				"IpProtocol": "tcp",
    				"DestinationSecurityGroupId": { "Ref": "rSGK8sWorker" }
    			   }
    		    },

		"rALBK8swebceTargetGreenStatic8002":{
    		"Type":"AWS::ElasticLoadBalancingV2::TargetGroup",
    		"Properties":{
    			"HealthCheckIntervalSeconds":30,
    			"HealthCheckPath":"/health",
    			"HealthCheckPort":8002,
    			"HealthCheckProtocol":"HTTP",
    			"HealthCheckTimeoutSeconds":5,
    			"HealthyThresholdCount":2,
    			"Matcher":{"HttpCode":"200,302"},
    			"Port":8002,
    			"Protocol":"HTTP",
    			"Tags":[
    				{"Key":"Name","Value":{"Fn::Sub":"${pFriendlyName} Kuberbetes WebCE Green API"}},
    				{"Key":"Role","Value":"Kuberbetes Green Static"},
    				{"Key":"AppStack","Value":{"Ref":"pAppStackName"}},
    				{"Key":"Environment","Value":{"Ref":"pEnvironment"}}],
    			"TargetGroupAttributes":[
    				{"Key":"deregistration_delay.timeout_seconds","Value":"30"},
    				{"Key":"stickiness.enabled","Value":"true"},
    				{"Key":"stickiness.type","Value":"lb_cookie"},
    				{"Key":"stickiness.lb_cookie.duration_seconds","Value":"3600"}],
    			"UnhealthyThresholdCount":5,
    			"VpcId":{"Ref":"pProductionVPC"}
            }
    	   },

    "rALBK8sListenerGreenStatic8002":{
  	   "Type":"AWS::ElasticLoadBalancingV2::ListenerRule",
  	    "Properties":{
  		      "Actions":[{"Type":"forward","TargetGroupArn":{"Ref":"rALBK8swebceTargetGreenStatic8002"}}],
  		       "Conditions":[{"Field":"path-pattern","Values":["/cashneti/static2/*"]}],
  		       "ListenerArn":{"Ref":"pALBwebceListenerHttp"},
  	        "Priority":84}
  	    },

    "rSGK8sListenterGreenStatic8002i": {
  		  "Type": "AWS::EC2::SecurityGroupIngress",
  		    "Properties": {
  		        "FromPort": 8002,
  		        "ToPort": 8002,
  		        "GroupId": { "Ref": "rSGK8sWorker" },
  		        "IpProtocol": "tcp",
  		        "SourceSecurityGroupId": { "Ref": "pSGwebceELB" }
  	         }
  	   },

	 "rSGK8sListenterGreenStatic8002e": {
    "Type": "AWS::EC2::SecurityGroupEgress",
    "Properties": {
      "FromPort": 8002,
      "ToPort": 8002,
      "GroupId": { "Ref": "pSGwebceELB" },
      "IpProtocol": "tcp",
      "DestinationSecurityGroupId": { "Ref": "rSGK8sWorker" }
        }
      }
  },

  "Outputs": {
        "rK8sInstanceRole": {
            "Description": "The node instance role",
            "Value": {"Fn::GetAtt": ["rK8sInstanceRole", "Arn"] }
          },
        "rSGK8sWorker": {
            "Description": "The security group for the node group",
            "Value": {"Ref": "rSGK8sWorker" }
          },
        "rASGK8s": {
              "Description": "The K8s node group ASG",
              "Value": {"Ref": "rASGK8s" }
            }
    }
}
